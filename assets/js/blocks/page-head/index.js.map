{"version":3,"file":"blocks/page-head/index.js","mappings":"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","sources":["webpack://pds-blocks-pro/./src/blocks/page-head/edit.js","webpack://pds-blocks-pro/./src/blocks/px-controls/dropdown.js","webpack://pds-blocks-pro/./src/blocks/px-controls/icons.js","webpack://pds-blocks-pro/./src/blocks/px-controls/number.js","webpack://pds-blocks-pro/./src/blocks/px-controls/panel-scripts.js","webpack://pds-blocks-pro/./src/blocks/px-controls/select.js","webpack://pds-blocks-pro/./src/blocks/px-controls/sets/typography.js","webpack://pds-blocks-pro/./src/blocks/px-controls/switch.js","webpack://pds-blocks-pro/external window \"React\"","webpack://pds-blocks-pro/external window [\"wp\",\"apiFetch\"]","webpack://pds-blocks-pro/external window [\"wp\",\"blockEditor\"]","webpack://pds-blocks-pro/external window [\"wp\",\"blocks\"]","webpack://pds-blocks-pro/external window [\"wp\",\"components\"]","webpack://pds-blocks-pro/external window [\"wp\",\"element\"]","webpack://pds-blocks-pro/external window [\"wp\",\"i18n\"]","webpack://pds-blocks-pro/external window [\"wp\",\"serverSideRender\"]","webpack://pds-blocks-pro/webpack/bootstrap","webpack://pds-blocks-pro/webpack/runtime/compat get default export","webpack://pds-blocks-pro/webpack/runtime/define property getters","webpack://pds-blocks-pro/webpack/runtime/global","webpack://pds-blocks-pro/webpack/runtime/hasOwnProperty shorthand","webpack://pds-blocks-pro/webpack/runtime/publicPath","webpack://pds-blocks-pro/./src/blocks/page-head/index.js"],"sourcesContent":["//====> WP Modules <====//\r\nimport {__} from '@wordpress/i18n';\r\nimport apiFetch from '@wordpress/api-fetch';\r\nimport { useState, useEffect } from '@wordpress/element';\r\nimport ServerSideRender from '@wordpress/server-side-render';\r\nimport {PanelBody, TextControl, Toolbar} from '@wordpress/components';\r\nimport {BlockControls, InspectorControls, useBlockProps, useInnerBlocksProps} from '@wordpress/block-editor';\r\n\r\n//====> Phenix Modules <====//\r\nimport PreviewImage from './preview.jpg';\r\nimport PhenixIcons from '../px-controls/icons';\r\nimport PxDropDown from '../px-controls/dropdown';\r\nimport PhenixNumber from \"../px-controls/number\";\r\nimport PhenixSelect from '../px-controls/select';\r\nimport OptionControl from '../px-controls/switch';\r\n\r\n//====> Phenix Options Sets <=====//\r\nimport TypographySet from '../px-controls/sets/typography';\r\n\r\n//====> Edit Mode <====//\r\nexport default function Edit(props) {\r\n    //===> Get Properties <===//\r\n    const {attributes, setAttributes} = props;\r\n    const blockProps = useBlockProps();\r\n\r\n    //===> Set Attributes <===//\r\n    \r\n\r\n    //===> Render <===//\r\n    return (<>\r\n        {/*====> Settings Toolbar <====*/}\r\n        <BlockControls>\r\n            <Toolbar label={__(\"Quick Settings\", \"pds-blocks\")}>\r\n\r\n            </Toolbar>\r\n        </BlockControls>\r\n        {/* //====> Controls Layout <====// */}\r\n        <InspectorControls key=\"inspector\">\r\n            {/*===> Widget Panel <===*/}\r\n            <PanelBody title={__(\"General Options\", \"pds-blocks\")} initialOpen={true}>\r\n                \r\n            </PanelBody>\r\n            {/*===> Widget Panel <===*/}\r\n            <PanelBody title={__(\"Title Options\", \"pds-blocks\")} initialOpen={true}>\r\n\r\n            </PanelBody>\r\n            {/*===> Widget Panel <===*/}\r\n            <PanelBody title={__(\"Breadcrumb Options\", \"pds-blocks\")} initialOpen={true}>\r\n\r\n            </PanelBody>\r\n            {/*===> Widget Panel <===*/}\r\n            <PanelBody title={__(\"Description Options\", \"pds-blocks\")} initialOpen={true}>\r\n\r\n            </PanelBody>\r\n            {/*===> End Widgets Panels <===*/}\r\n        </InspectorControls>\r\n\r\n        {/* //====> Edit Layout <====// */}\r\n        {attributes.preview ? <img src={PreviewImage} alt=\"\" className=\"fluid\" /> :<div {...blockProps}> \r\n            <ServerSideRender block=\"phenix/page-head\" attributes={attributes} />\r\n        </div>}\r\n    </>);\r\n}","//====> .Dependencies. <====//\r\nimport {Component} from '@wordpress/element';\r\nimport PhenixComponentsBuilder from './panel-scripts';\r\n\r\n//===> Phenix Form Control <===//\r\nexport default class PxDropDown extends Component {\r\n    //===> States <===//\r\n    state = {};\r\n\r\n    //===> Component Rendered Hooks <===//\r\n    componentDidMount() { PhenixComponentsBuilder(); };\r\n    componentDidUpdate() { PhenixComponentsBuilder(); };\r\n\r\n    render () {\r\n        //===> Properties <===//\r\n        const {\r\n            label,\r\n            button,\r\n            support,\r\n            dropList,\r\n            children,\r\n            className,\r\n            dataPosition,\r\n            title,\r\n        } = this.props;\r\n\r\n        const attributes = {};\r\n\r\n\r\n        if (support?.includes(\"hover\")) attributes[\"data-hover\"] = \"true\";\r\n        if (dataPosition) attributes[\"data-position\"] = dataPosition;\r\n\r\n        //===> Render Component <===//\r\n        return (<>\r\n            {/* Dropdown Wrapper */}\r\n            <div className={`px-dropdown pds-tm-control ${className ? className : \"\"}`} {...attributes}>\r\n                {/* Toggle Button */}\r\n                <button className={`px-toggle btn ${button} ${title ? \"tooltip\" : \"\"}`} data-title={title}>{label}</button>\r\n                {/* Dropdown Target */}\r\n                <ul className={`hidden px-dropdown-list reset-list bg-white radius-md radius-bottom bx-shadow-dp-2 border-1 border-alpha-10 border-solid ${dropList ? dropList : \"fs-14 w-min-200\"}`}>{children}</ul>\r\n                {/* // Dropdown Target */}\r\n            </div>\r\n            {/* // Dropdown Wrapper */}\r\n        </>)\r\n    }\r\n}","/*\r\n * ===> 01 - WordPress Modules\r\n * ===> 02 - Phenix Background\r\n * ===> 03 - Buttons Creator\r\n * ===> 04 - Component Output\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport { __ } from '@wordpress/i18n';\r\nimport apiFetch from '@wordpress/api-fetch';\r\nimport {Component} from '@wordpress/element';\r\nimport PhenixSelect from './select';\r\n\r\n//===> Phenix Icons <===//\r\nexport default class PhenixIcons extends Component {\r\n    //===> States <===//\r\n    state = {\r\n        icon_type : \"far\",\r\n        icon_name : \"fa-icons\",\r\n        icons_file : \"fa5-free.json\",\r\n        icons_list : [],\r\n        icons_types : [\r\n            { value: 'far',   label: 'Regular' },\r\n            { value: 'fas',   label: 'Solid' },\r\n            { value: 'fab',   label: 'Brands' }\r\n        ],\r\n        icons_version : \"5-free\",\r\n        return_type: null\r\n    };\r\n\r\n    reRender = () => {\r\n        //===> Fetch Data <===//\r\n        apiFetch({ path: \"pds-blocks/v2/options\" }).then((options) => {\r\n            //===> Get Icons Data <===//\r\n            let icons_version = this.state.icons_version,\r\n                icons_file = this.state.icons_file,\r\n                icon_type = this.state.icon_type,\r\n                icon_name = this.state.icon_name,\r\n                icons_list = this.state.icons_list;\r\n\r\n            //===> Get Icons Version <===//\r\n            if (options.pds_icon_font) icons_version = options.pds_icon_font.replace(\"fontawesome-\", \"\");\r\n\r\n            //===> Define Icons File <===//\r\n            if (this.props.value.includes(\"fab\")) { icons_file = \"fa5-brands.json\"; } \r\n            else { icons_file = \"fa5-free.json\"; }\r\n\r\n            //===> Version Correct <===//\r\n            if(icons_version.includes(\"6\")) icons_file = icons_file.replace(\"5\", \"6\");\r\n            if(icons_version.includes(\"pro\")) icons_file = icons_file.replace(\"free\", \"pro\");\r\n\r\n            //===> Set Icon Type <===//\r\n            const icon_value = this.props.value.split(\" \");\r\n\r\n            //===> Sharp Type Fallback <===//\r\n            if (icon_value.includes(\"fa-sharp\")) {\r\n                //===> Reset Icons List <===//\r\n                if (icon_type !== `${icon_value[0]} ${icon_value[1]}`) icons_list = [];\r\n\r\n                //===> Set Icon Type <===//\r\n                icon_name = icon_value[2];\r\n                icon_type = `${icon_value[0]} ${icon_value[1]}`;\r\n            } else {\r\n                //===> Reset Icons List <===//\r\n                if (icon_type !== icon_value[0]) icons_list = [];\r\n\r\n                //===> Set Icon Type <===//\r\n                icon_name = icon_value[1];\r\n                icon_type = icon_value[0];\r\n            }\r\n\r\n            //===> Add the Pro Types <===//\r\n            if (icons_file.includes(\"pro\")) {\r\n                let icons_types = this.state.icons_types.slice();\r\n                icons_types.push({ value: \"fal\", label: \"Light\" });\r\n                icons_types.push({ value: \"fad\", label: \"Duotone\" });\r\n                this.setState({ icons_types });\r\n            }\r\n\r\n            //===> Get Correct Version <===//\r\n            if (icons_file.includes(\"6\")) {\r\n                let icons_types = this.state.icons_types.slice();\r\n                icons_types.push({value: \"fa-sharp fa-regular\", label: \"Regular Sharp\"});\r\n                icons_types.push({ value: \"fa-sharp fa-solid\", label: \"Solid Sharp\" });\r\n                this.setState({ icons_types });\r\n            }\r\n        \r\n            //===> Start Fetching <===//\r\n            if (icons_list.length < 1) {\r\n                fetch(`${PDS_WP_KEY.json}/${icons_file}`).then((res) => res.json()).then((json) => {\r\n                    //===> Assign Icons List <===//\r\n                    if (json.icons !== icons_list) icons_list = json.icons;\r\n        \r\n                    //===> Update State <===//\r\n                    this.setState({icon_type, icon_name, icons_file, icons_list, icons_version});\r\n                });\r\n            } else {\r\n                //===> Update State <===//\r\n                this.setState({icon_type, icon_name, icons_file, icons_list, icons_version});\r\n            }\r\n        });\r\n    };\r\n\r\n    //===> Fetch Data When Rendered <===//\r\n    componentDidMount() { this.reRender(); };\r\n    //===> Fetch Data When Updated <===//\r\n    componentDidUpdate() { this.reRender(); };\r\n\r\n    //===> Render <===//\r\n    render () {\r\n        //===> Properties <===//\r\n        const { label, value, version, onChange } = this.props;\r\n        const uniqueKey = Date.now().toString(36) + Math.random().toString(36).substr(2, 5)+`-flexbox-${screen}-option`;\r\n\r\n        //===> Returned Value <===//\r\n        let options = {type: this.state.icon_type, value: this.state.icon_name};\r\n\r\n        //===> Set Type <===//\r\n        const set_value = clicked => {\r\n            //===> Get Value <===//\r\n            let button = clicked.target,\r\n                theValue  = button?.getAttribute('data-value');\r\n\r\n            //===> Set Value <===//\r\n            options.value = theValue;\r\n\r\n            //===> Return Options <===//\r\n            return onChange(options);\r\n        };\r\n\r\n        const set_type = value => {\r\n            //===> Set Value <===//\r\n            options.type = value;\r\n\r\n            //===> Switched to Brand <===//\r\n            if (value === \"fab\" && !this.props.value.includes('fab')) options.value = \"fa-wordpress\";\r\n\r\n            //===> Switched from Brand <===//\r\n            if (this.props.value.includes('fab') && value !== \"fab\") options.value = \"fa-icons\";\r\n\r\n            //===> Return Options <===//\r\n            return onChange(options);\r\n        };\r\n\r\n        //===> Buttons Creator <===//\r\n        const makeButtons = (list, type) => {\r\n            //===> Define Data <===//\r\n            let buttonsList = [],\r\n                buttonsStyle = {\"fontSize\": \"17px\", \"lineHeight\": \"24px\", \"width\":\"24px\", \"height\":\"24px\", \"borderRadius\": \"3px\", \"padding\": 0};\r\n\r\n            //===> for each item <===//\r\n            if(list.length > 0) {\r\n                list.forEach((item) => buttonsList.push(<button key={`${item}`} onClick={set_value} title={item} data-value={item} className={`reset-button icon-btn-item ${type} ${item} ${this.state.icon_name === item?'px-active bg-offwhite-primary':\"\"}`} style={buttonsStyle}></button>));\r\n            }\r\n\r\n            //===> Return Buttons <===//\r\n            return buttonsList;\r\n        };\r\n\r\n        //===> Colors Panel <===//\r\n        const showPanel = clicked => {\r\n            let button  = clicked.target,\r\n                wrapper = Phenix(button).ancestor('.px-gb-component'),\r\n                panel   = wrapper.querySelector(\".options-list\");\r\n\r\n            //=== Show/Hide Panel ===//\r\n            if (panel) {\r\n                Phenix(button).toggleClass(\"px-active\");\r\n                Phenix(panel).toggleClass(\"px-active\").slideToggle(300, 0, \"flex\");\r\n            }\r\n        };\r\n\r\n        //===> Search in icons <===//\r\n        const iconsFilter = changed => {\r\n            //===> Define Data <===//\r\n            let input = changed.target,\r\n                value = input.value,\r\n                options = Phenix(input).ancestor(\".options-list\"),\r\n                buttons = options.querySelectorAll(\".icon-btn-item\");\r\n            //===> Find the searched icon and hide the rest <===//\r\n            buttons.forEach(button => button.getAttribute('data-value').includes(value) ? button.classList.remove(\"hidden\") : button.classList.add(\"hidden\"));\r\n        };\r\n\r\n        //===> Component Design <===//\r\n        return (\r\n            <div className='px-gb-component position-rv mb-10 px-icons-selector'>\r\n                {/*===> Toggle Button <===*/}\r\n                {label?<label className='mb-10 tx-UpperCase fs-13'>{label}</label>:null}\r\n\r\n                {/*===> Group <===*/}\r\n                <div className='form-control small flexbox border-alpha-25 mb-5 tx-align-start radius-md align-center-y pdx-0 flow-nowrap'>\r\n                    {/*===> Panel Trigger */}\r\n                    <button onClick={showPanel} className={`col-6 w-max-150 fs-13 h-min-100 reset-button options-toggle flexbox flow-nowrap align-between align-center-y pdx-10 divider-e`} type=\"button\">\r\n                        <span className={`col tx-nowrap pde-5`} style={{\"lineHeight\": \"20px\"}}>\r\n                            <span className={`pds-icon-preview inline-block me-5 radius-circle bg-alpha-05 ${this.props.value} position-rv`}></span>\r\n                            {__(\"Replace\", \"pds-blocks\")}\r\n                        </span>\r\n                        <i className='fas fa-pencil fs-12 color-gray'></i>\r\n                    </button>\r\n                    {/*===> Type Select <===*/}\r\n                    <PhenixSelect key={`icons-type`} name=\"icons-type\" className=\"col-6\" value={this.state.icon_type} onChange={(target) => set_type(target.value)} options={this.state.icons_types} />\r\n                </div>\r\n\r\n                {/*===> Panel <===*/}\r\n                <div className={`overflow-y-auto flexbox options-list align-center tx-align-center px-scrollbar pdx-15 pdb-15 pdt-5 bg-white border-1 border-solid border-alpha-25 radius-md radius-bottom hidden fluid`} style={{gap:\"10px\", maxHeight: \"220px\"}}>\r\n                    <input name=\"pds-icons-search\" className='reset-input pdy-5 fs-12 divider-b fluid tx-align-center' onChange={iconsFilter} placeholder={__(\"Search in icons\", \"pds-blocks\")} />\r\n                    {makeButtons(this.state.icons_list, this.state.icon_type)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport {Component} from '@wordpress/element';\r\n\r\n//===> Media Uploader <===//\r\nexport default class PhenixNumber extends Component {\r\n    render () {\r\n        //===> Properties <===//\r\n        const {label, value, min, max, steps, icon, onChange, name} = this.props;\r\n        const uniqueKey = Date.now().toString(36) + Math.random().toString(36).substr(2, 5)+`-flexbox-${screen}-option`;\r\n\r\n        //===> Set Value <===//\r\n        const setNumber = (changed) => {\r\n            //===> Get Elements <===//\r\n            const input  = changed.target,\r\n                  minNum  = parseInt(min) || 0,\r\n                  maxNum  = parseInt(max) || 0;\r\n\r\n            //===> Get Input Element <===//\r\n            const newVal = parseInt(input.value),\r\n                  checkVal = (newVal >= minNum || newVal <= maxNum) ? newVal : 0;\r\n\r\n            //===> Set Data <===//\r\n            input.value = checkVal;\r\n            return onChange(input);\r\n        },\r\n\r\n        //===> Increase Number <===//\r\n        IncreaseNum = (clicked) => {\r\n            //===> Get Elements <===//\r\n            let button  = clicked.target,\r\n                wrapper = Phenix(button).ancestor(\".px-counter-input\"),\r\n                maxNum  = parseInt(max) || 9999999,\r\n                step    = steps ? parseInt(steps) : 1;\r\n\r\n            //===> Get Input Element <===//\r\n            let input  = wrapper.querySelector('input[type=\"number\"]'),\r\n                newVal = parseInt(input.value) + step;\r\n\r\n            //===> Set Data <===//\r\n            input.value = newVal < maxNum || newVal === maxNum ? newVal : maxNum;\r\n            return onChange(input);\r\n        },\r\n\r\n        //===> Decrease Number <===//\r\n        DecreaseNum = (clicked) => {\r\n            //===> Get Elements <===//\r\n            let button  = clicked.target,\r\n                wrapper = Phenix(button).ancestor(\".px-counter-input\"),\r\n                minNum  = parseInt(min) || 0,\r\n                step    = steps ? steps : 1;\r\n\r\n            //===> Get Input Element <===//\r\n            let input = wrapper.querySelector('input[type=\"number\"]'),\r\n                newVal = parseInt(input.value) - step;\r\n\r\n            //===> Set Data <===//\r\n            input.value = newVal > minNum || newVal === minNum ? newVal : minNum;\r\n            return onChange(input);\r\n        };\r\n\r\n        //===> Output <===//\r\n        return (<div className='flexbox flex-gap-fix align-between flow-column'>\r\n            {/*===> Label <===*/}\r\n            <label className='components-input-control__label tx-uppercase weight-bold'>{label}</label>\r\n            {/*===> Counter Control <===*/}\r\n            <div className={\"px-counter-input position-rv fluid \" + (icon ? icon : \"\")}>\r\n                {/*===> Button <===*/}\r\n                {!icon ? <button onClick={DecreaseNum} className='btn square small fs-13 increase-btn far fa-minus position-ab pos-start-0 pos-top-0 divider-e icon-fix'></button> : \"\"}\r\n\r\n                {/*===> Number Input <===*/}\r\n                <input name={name} type=\"number\" min={min} max={max} value={parseInt(value) ? parseInt(value) : 0} className={\"form-control small radius-sm reset-appearance tx-align-center\"} onChange={setNumber} />\r\n\r\n                {/*===> Button <===*/}\r\n                <div className='position-ab pos-end-0 pos-bottom-0 flexbox'>\r\n                    {icon ? <button onClick={DecreaseNum} className='btn square small fs-13 increase-btn far fa-minus divider-s icon-fix'></button> : \"\"}\r\n                    <button onClick={IncreaseNum} className='btn square small fs-13 increase-btn far fa-plus divider-s icon-fix'></button>\r\n                </div>\r\n            </div>\r\n            {/*===> Counter Control <===*/}\r\n        </div>)\r\n    }\r\n}","/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport { __ } from '@wordpress/i18n';\r\nimport apiFetch from '@wordpress/api-fetch';\r\nimport { useState, useEffect } from '@wordpress/element';\r\n\r\n//===> Script Runner <===//\r\nconst PhenixComponentsBuilder = () => {\r\n    //===> Create Time Loop to Find the Elements <===//\r\n    let finder_counter = 0,\r\n        element_finder = setInterval(() => {\r\n            //===> Get Elements <===//\r\n            let elements = document.querySelectorAll('.pds-tm-control');\r\n\r\n            //===> Loop Through Elements <===//\r\n            elements.forEach(element => {\r\n                //===> Define Element Data <===//\r\n                let class_names = element.classList;\r\n\r\n                //===> for Selects <===//\r\n                if (class_names.contains('px-select') && !Phenix(element).ancestor('.px-dropdown')) {\r\n                    Phenix(element).select();\r\n                } else if (class_names.contains('px-dropdown')) {\r\n                    Phenix(element).dropdown();\r\n                    element.querySelectorAll('.pds-tm-control.px-select').forEach(element => Phenix(element).select());\r\n                }\r\n            });\r\n\r\n            //===> Increase Counter <===//\r\n            finder_counter++;\r\n\r\n            //===> Clear Timer Loop <===//\r\n            if (finder_counter > 30) clearInterval(element_finder);\r\n        }, 500);\r\n\r\n    //===> Get View iFrame <===//\r\n    let viewScript = (the_document) => {\r\n        //===> Define Data <===//\r\n        let time_counter = 0,\r\n        //===> Timer Loop <===//\r\n        pds_elements_timer = setInterval(() => {\r\n            //===> Run Multimedia <===//\r\n            the_document.querySelectorAll(`.px-media:not([style*=\"background-image\"])`).forEach(element => {\r\n                element.style.backgroundImage = null;\r\n                Phenix(element).multimedia();\r\n            });\r\n\r\n            //===> Run Sliders <===//\r\n            the_document.querySelectorAll(\".px-slider:not(.block-editor-block-list__block)\").forEach(element => {\r\n                //===> Mark as Editing Mode <===//\r\n                element.classList.add('edit-mode');\r\n\r\n                //===> Disable Autoplay <===//\r\n                if(element.getAttribute('data-autoplay')) element.setAttribute('data-autoplay', false);\r\n\r\n                //===> Replace Data Attributes with Row/Columns Classes <===//\r\n                const slider_cols_fixer = (row) => {\r\n                    //===> Contain the Slides in One Line <====//\r\n                    row.classList.add('flow-nowrap');\r\n                    if (element.getAttribute('data-md')) row.classList.add(`row-cols-md-${element.getAttribute('data-md')}`);\r\n                    if (element.getAttribute('data-lg')) row.classList.add(`row-cols-md-${element.getAttribute('data-lg')}`);\r\n                    if (element.getAttribute('data-xl')) row.classList.add(`row-cols-md-${element.getAttribute('data-xl')}`);\r\n                }\r\n\r\n                slider_cols_fixer(element);\r\n\r\n                //===> Stretch Fix <===//\r\n                // let slider_element = element.querySelector(\".splide__list\"),\r\n                //===> Slides List Finder <===//\r\n                // slider_element_finder = setInterval(() => {\r\n                //     if (!slider_element) {\r\n                //         slider_cols_fixer(element);\r\n                //         slider_element = element.querySelector(\".splide__list\");\r\n                //     } else {\r\n                //         //===> Assign a Max Height for Stretch <===//\r\n                //         slider_element.style.maxHeight = Phenix(slider_element).height();\r\n\r\n                //         //===> Assign Columns Sizes <===//\r\n                //         slider_cols_fixer(slider_element);\r\n                //         element.classList.forEach(class_name => class_name.includes('row-cols') || class_name.includes('flow-') ? element.classList.remove(class_name) : null);\r\n\r\n                //         //===> Clear Timer <===//\r\n                //         clearInterval(slider_element_finder);\r\n                //     }\r\n                // }, 100);\r\n                //===> Run the Slider <===//\r\n                // Phenix(element).slider({autoplay: false});\r\n            });\r\n\r\n            //===> Run Menus <===//\r\n            the_document.querySelectorAll(\".px-navigation\").forEach(element => Phenix(element).menu());\r\n\r\n            //====> Clear Timer <===//\r\n            time_counter += 1; if (time_counter > 100) clearInterval(pds_elements_timer);\r\n        }, 500);\r\n    };\r\n\r\n    //===> Run View Script <===//\r\n    if (window.frames['editor-canvas']) {\r\n        viewScript(window.frames['editor-canvas'].document);\r\n        //===> Load Assets in Frame <====//\r\n        let trying_times = 0, loadAssetTimer = setInterval(()=> {\r\n            //====> if the Document unloaded clear the timer <====//\r\n            if (!window.frames['editor-canvas'] || !window.frames['editor-canvas'].document) {\r\n                clearInterval(loadAssetTimer);\r\n                return;\r\n            } else {\r\n                //===> When the Frame is Found <===//\r\n                if (!window.frames['editor-canvas'].document.querySelector(\"#fontawesome-css\")) {\r\n                    //===> Check in the Editor <===//\r\n                    let frameDoc = window.frames['editor-canvas'].document,\r\n                        fontAwesome = document.querySelector(\"#fontawesome-css\"),\r\n                        importedEl = fontAwesome ? document.importNode(fontAwesome, true) : false;\r\n    \r\n                    //===> Load Font <===//\r\n                    if(importedEl && frameDoc.body) {\r\n                        frameDoc.body.appendChild(importedEl);\r\n                        clearInterval(loadAssetTimer);\r\n                    }\r\n                    \r\n                    //===> Add Scrollbar <===//\r\n                    if (frameDoc && frameDoc.querySelector('html')) {\r\n                        frameDoc.querySelector('html')?.classList.add('px-scrollbar');\r\n                    };\r\n                } else {\r\n                    //===> Increase Counter <===//\r\n                    trying_times += 1;\r\n                    if (trying_times > 10) clearInterval(loadAssetTimer);\r\n                }\r\n            }\r\n        }, 300);\r\n    } else if (window.Phenix) {\r\n        window.document ? viewScript(window.document) : null;\r\n    }\r\n}\r\n\r\nexport default PhenixComponentsBuilder;","//====> .Dependencies. <====//\r\nimport React from 'react';\r\nimport {Component} from '@wordpress/element';\r\n\r\n//====> Phenix Modules <====//\r\nimport PhenixComponentsBuilder from './panel-scripts';\r\n\r\n//===> Phenix Form Control <===//\r\nexport default class PhenixSelect extends Component {\r\n    //===> States <===//\r\n    state = {};\r\n\r\n    //===> Component Rendered Hooks <===//\r\n    componentDidMount() { PhenixComponentsBuilder(); };\r\n    componentDidUpdate() { PhenixComponentsBuilder(); };\r\n    //===> Component Rendered when Props Change <===//\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return (nextProps.value !== this.props.value || nextProps.options !== this.props.options);\r\n    }\r\n\r\n    render () {\r\n        //===> Properties <===//\r\n        const {name, type, size, label, value, options, multiple, onChange, className, placeholder, search } = this.props;\r\n        const uniqueKey = Date.now().toString(36) + Math.random().toString(36).substr(2, 5)+`-flexbox-${screen}-option`;\r\n\r\n        //===> Change Value <===//\r\n        const setValue = (event) => {\r\n            return onChange(event.target);\r\n        };\r\n\r\n        //===> Define Element Attributes <===//\r\n        let attributes = {onChange: setValue};\r\n\r\n        //===> add Options <===//\r\n        if (search) attributes['data-search'] = 1;\r\n        if (value) attributes.defaultValue = value;\r\n        if (multiple) attributes.multiple = multiple;\r\n        if (placeholder) attributes['data-placeholder'] = placeholder;\r\n\r\n        //===> Get Options List <===//\r\n        let options_list = [];\r\n\r\n        if (Array.isArray(options) && !options[0].type) {\r\n            //===> Normal Lost of Options <===//\r\n            options.forEach(item => {\r\n                options_list.push(<option key={item.value} value={item.value}>{`${item.label}`}</option>);\r\n            });\r\n        } else if (options[0] && options[0].type) {\r\n            options_list = options;\r\n        } else{\r\n            //===> Grouped Options <===//\r\n            Object.entries(options).forEach(([key, options]) => {\r\n                //===> Define the Options List <===//\r\n                let group_list = [];\r\n                //===> Add Options to the Group <===//\r\n                options.forEach(item => {\r\n                    group_list.push(<option key={item.value} value={item.value}>{`${item.label}`}</option>);\r\n                });\r\n                //===> Create the Group <===//\r\n                let options_group = <optgroup key={`${key}-group`} label={`${key}`}>{group_list}</optgroup>;\r\n                //===> Add the Group <===//\r\n                options_list.push(options_group);\r\n            });\r\n        }\r\n\r\n        //===> Render Component <===//\r\n        return <>\r\n            {/*===> Control Label <===*/}\r\n            {label?<label className='tx-capitalize fs-13' style={{marginBottom: 5}}>{`${label}`}</label>:null}\r\n\r\n            {/*===> Control Element <===*/}\r\n            <div key={`select-wrapper`} className={`px-select ${className ? className : \"\"}`}>\r\n                <select key={`select-element`} name={name} className={`px-select pds-tm-control form-control ${size ? size : \"small\"} radius-md`} {...attributes}>{options_list}</select>\r\n            </div>\r\n        </>\r\n    }\r\n}","/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport { __ } from '@wordpress/i18n';\r\nimport {Component} from '@wordpress/element';\r\n\r\n//====> Phenix Modules <====//\r\nimport PhenixSelect from '../select';\r\nimport OptionControl from '../switch';\r\n\r\n//===> Options List\r\n//=> align, size, weight\r\n\r\n//===> Component <===//\r\nexport default class TypographySet extends Component {\r\n    render () {\r\n        //===> Properties <===//\r\n        const {attributes, options, mainSetter, screen} = this.props;\r\n        const screenPoint = screen ? `-${screen}` : \"\";\r\n        const uniqueKey = Date.now().toString(36) + Math.random().toString(36).substr(2, 5)+`-typography-${screen}-option`;\r\n\r\n        //===> Define Controls Options <===//\r\n        const sizes_list = [],\r\n            origin_sizes = [\r\n                ``,\r\n                `fs${screenPoint}-12`,\r\n                `fs${screenPoint}-13`,\r\n                `fs${screenPoint}-14`,\r\n                `fs${screenPoint}-15`,\r\n                `fs${screenPoint}-16`,\r\n                `fs${screenPoint}-17`,\r\n                `fs${screenPoint}-18`,\r\n                `fs${screenPoint}-19`,\r\n                `fs${screenPoint}-20`,\r\n                `fs${screenPoint}-22`,\r\n                `fs${screenPoint}-24`,\r\n                `fs${screenPoint}-25`,\r\n                `fs${screenPoint}-26`,\r\n                `fs${screenPoint}-28`,\r\n                `fs${screenPoint}-30`,\r\n                `h1${screenPoint}`, `h2${screenPoint}`, `h3${screenPoint}`, `h4${screenPoint}`, `h5${screenPoint}`, `h6${screenPoint}`,\r\n                `display${screenPoint}-h1`, `display${screenPoint}-h2`, `display${screenPoint}-h3`, `display${screenPoint}-h4`, `display${screenPoint}-h5`, `display${screenPoint}-h6`\r\n            ];\r\n\r\n        //===> Generate Responsive Sizes <===//\r\n        origin_sizes.forEach(size => {\r\n            //===> Filter Value and Label <===//\r\n            let true_label =`${size.replace(`fs${screenPoint}-`, \"\").replace(`display${screenPoint}-`,\"D\").replace(screenPoint, '').replace('-','').replace(`h`, 'H')}${size.includes(`fs${screenPoint}-`) ? 'px':''}`;\r\n            if (size === \"\") true_label = __(\"Default\", \"pds-blocks\");\r\n            sizes_list.push({\"label\": true_label, \"value\": size});\r\n        });\r\n\r\n        //===> Weights List <===//\r\n        const font_weights = [\r\n            { \"label\": \"Default\",  \"value\": \"\"},\r\n            { \"label\": \"Thin\",  \"value\": \"weight-thin\"},\r\n            { \"label\": \"Light\",  \"value\": \"weight-light\"},\r\n            { \"label\": \"Extra Light\",  \"value\": \"weight-xlight\"},\r\n            { \"label\": \"Normal\",  \"value\": \"weight-normal\"},\r\n            { \"label\": \"Medium\",  \"value\": \"weight-medium\"},\r\n            { \"label\": \"Semi-Bold\",  \"value\": \"weight-bold\"},\r\n            { \"label\": \"Bold\",  \"value\": \"weight-strong\"},\r\n            { \"label\": \"Heavy\",  \"value\": \"weight-xbold\"},\r\n            { \"label\": \"Black\",  \"value\": \"weight-black\"}\r\n        ];\r\n\r\n        //===> Lineheight List <===//\r\n        const font_lineheight = [\r\n            { \"label\": \"Default\",  \"value\": \"\"},\r\n            { \"label\": \"130%\",  \"value\": \"lineheight-100\"},\r\n            { \"label\": \"130%\",  \"value\": \"lineheight-120\"},\r\n            { \"label\": \"130%\",  \"value\": \"lineheight-130\"},\r\n            { \"label\": \"150%\",  \"value\": \"lineheight-150\"},\r\n            { \"label\": \"160%\",  \"value\": \"lineheight-160\"},\r\n            { \"label\": \"170%\",  \"value\": \"lineheight-170\"},\r\n            { \"label\": \"180%\",  \"value\": \"lineheight-180\"},\r\n            { \"label\": \"inherit\",  \"value\": \"lineheight-inherit\"},\r\n        ];\r\n\r\n        //===> Output <===//\r\n        return <>\r\n            {/*===> Size Only <===*/}\r\n            {options && options.includes(\"size\") ? <>\r\n                <PhenixSelect className=\"mb-10\" name={`size${screenPoint}`} placeholder={__(\"Default\", \"pds-blocks\")} label={__(\"Font Size\", \"pds-blocks\")} value={attributes.typography[`size${screenPoint}`]} onChange={mainSetter} options={sizes_list} search={true} />\r\n            </>: null}\r\n            {/*===> Grouped Options <===*/}\r\n            {!options ? <div className='row gpx-20 gpy-15'>\r\n                {/*===> Size <===*/}\r\n                <div className='col col-6'>\r\n                    <PhenixSelect name={`size${screenPoint}`} placeholder={__(\"Default\", \"pds-blocks\")} label={__(\"Font Size\", \"pds-blocks\")} value={attributes.typography[`size${screenPoint}`]} onChange={mainSetter} options={sizes_list} search={true} />\r\n                </div>\r\n                {/*===> Weight <===*/}\r\n                <div className='col col-6'>\r\n                    <PhenixSelect name=\"weight\" placeholder={__(\"Default\", \"pds-blocks\")} label={__(\"Font Weight\", \"pds-blocks\")} value={attributes.typography.weight} onChange={mainSetter} options={font_weights}/>\r\n                </div>\r\n                {/*===> Weight <===*/}\r\n                <div className='col col-6'>\r\n                    <PhenixSelect name=\"lineheight\" placeholder={__(\"Default\", \"pds-blocks\")} label={__(\"Line Height\", \"pds-blocks\")} value={attributes.typography.lineheight} onChange={mainSetter} options={font_lineheight}/>\r\n                </div>\r\n                {/*===> Other Options <===*/}\r\n                {this.props.children ? this.props.children : null}\r\n                {/*===> // Column <===*/}\r\n            </div> : this.props.children ? this.props.children : null }\r\n            {/*===> Alignment Options <===*/}\r\n            {!options || options.includes(\"align\") ? <>\r\n                {/*===> Label <===*/}\r\n                <label className={`col-12 mb-5 tx-UpperCase fs-13`}>{__(\"Text Alignment\", \"pds-blocks\")}</label>\r\n                {/*===> Elements Group <===*/}\r\n                <div className='flexbox mb-15'>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`align${screenPoint}`} checked={!attributes.typography[`align${screenPoint}`] || attributes.typography[`align${screenPoint}`] === \"\"} value={\"\"} onChange={!screen ? mainSetter : (target) => mainSetter(target, screen)} type='button-radio' className='small me-5'>\r\n                        <span className='btn small square outline gray far fa-align-slash radius-sm'></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`align${screenPoint}`} checked={attributes.typography[`align${screenPoint}`] === `tx-align${screenPoint}-start` ? true : false} value={`tx-align${screenPoint}-start`} onChange={!screen ? mainSetter : (target) => mainSetter(target, screen)} type='button-radio' className='small me-5'>\r\n                        <span className={`btn small square outline gray fs-17 far fa-align-${Phenix(document).direction() === \"ltr\" ? 'left' : \"right\"} radius-sm`}></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`align${screenPoint}`} checked={attributes.typography[`align${screenPoint}`] === `tx-align${screenPoint}-justify` ? true : false} value={`tx-align${screenPoint}-justify`} onChange={!screen ? mainSetter : (target) => mainSetter(target, screen)} type='button-radio' className='small me-5'>\r\n                        <span className={`btn small square outline gray fs-17 far fa-align-justify radius-sm`}></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`align${screenPoint}`} checked={attributes.typography[`align${screenPoint}`] === `tx-align${screenPoint}-center` ? true : false} value={`tx-align${screenPoint}-center`} onChange={!screen ? mainSetter : (target) => mainSetter(target, screen)} type='button-radio' className='small me-5'>\r\n                        <span className={`btn small square outline gray fs-17 far fa-align-center radius-sm`}></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`align${screenPoint}`} checked={attributes.typography[`align${screenPoint}`] === `tx-align${screenPoint}-end` ? true : false} value={`tx-align${screenPoint}-end`} onChange={!screen ? mainSetter : (target) => mainSetter(target, screen)} type='button-radio' className='small'>\r\n                        <span className={`btn small square outline gray fs-17 far fa-align-${Phenix(document).direction() === \"rtl\" ? 'left' : \"right\"} radius-sm`}></span>\r\n                    </OptionControl>\r\n                </div>\r\n                {/*===> Style Options <===*/}\r\n                <label className={`col-12 mb-5 tx-UpperCase fs-13`}>{__(\"Text Style\", \"pds-blocks\")}</label>\r\n                {/*===> Elements Group <===*/}\r\n                <div className='flexbox mb-15'>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`tx-capitalize`} checked={attributes.typography[`tx-capitalize`]} value={\"tx-capitalize\"} onChange={!screen ? mainSetter : (target) => mainSetter(target, screen)} type='button-checkbox' className='small me-5'>\r\n                        <span className='btn small square tooltip-bottom outline gray fas fa-font-case radius-sm' data-title={__(\"Capitalize\",\"pds-blocks\")}></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`tx-uppercase`} checked={attributes.typography[`tx-uppercase`]} value={\"tx-uppercase\"} onChange={!screen ? mainSetter : (target) => mainSetter(target, screen)} type='button-checkbox' className='small me-5'>\r\n                        <span className='btn small square tooltip-bottom outline gray fas fa-text radius-sm' data-title={__(\"Uppercase\",\"pds-blocks\")}></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`tx-underline`} checked={attributes.typography[`tx-underline`]} value={\"tx-underline\"} onChange={!screen ? mainSetter : (target) => mainSetter(target, screen)} type='button-checkbox' className='small me-5'>\r\n                        <span className='btn small square tooltip-bottom outline gray fas fa-underline radius-sm' data-title={__(\"Underline\",\"pds-blocks\")}></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`tx-line-through`} checked={attributes.typography[`tx-line-through`]} value={\"tx-line-through\"} onChange={!screen ? mainSetter : (target) => mainSetter(target, screen)} type='button-checkbox' className='small me-5'>\r\n                        <span className='btn small square tooltip-bottom outline gray fas fa-strikethrough radius-sm' data-title={__(\"Strikethrough\",\"pds-blocks\")}></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`tx-direction`} checked={attributes.typography[`tx-direction`] === \"ltr\"} value={\"ltr\"} onChange={!screen ? mainSetter : (target) => mainSetter(target, screen)} type='button-radio' className='small me-5'>\r\n                        <span className='btn small square tooltip-bottom outline gray fas fa-paragraph radius-sm' data-title={__(\"LTR\",\"pds-blocks\")}></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`tx-direction`} checked={attributes.typography[`tx-direction`] === \"rtl\"} value={\"rtl\"} onChange={!screen ? mainSetter : (target) => mainSetter(target, screen)} type='button-radio' className='small me-5'>\r\n                        <span className='btn small square tooltip-bottom outline gray fas fa-paragraph-rtl radius-sm' data-title={__(\"RTL\",\"pds-blocks\")}></span>\r\n                    </OptionControl>\r\n                </div>\r\n            </>: null}\r\n        </>\r\n    }\r\n}","//====> .Dependencies. <====//\r\nimport {Component} from '@wordpress/element';\r\nimport { useState, useEffect } from '@wordpress/element';\r\n\r\n//===> Phenix Form Control <===//\r\nexport default class OptionControl extends Component {\r\n    //===> States <===//\r\n    state = {};\r\n\r\n    render () {\r\n        //===> Properties <===//\r\n        const {\r\n            name,\r\n            type,\r\n            value,\r\n            checked,\r\n            onChange,\r\n            children,\r\n            required,\r\n            className\r\n        } = this.props;\r\n\r\n        //===> Change Value <===//\r\n        const setValue = (event) => {\r\n            return onChange(event.target);\r\n        };\r\n\r\n        //===> Define Data <===//\r\n        let options = `fs-12 option-control flexbox align-center-y`,\r\n            attributes = {onChange: setValue};\r\n\r\n        //===> Custom Classes <===//\r\n        if (className) options += ` ${className}`;\r\n\r\n        //===> Check if is On <===//\r\n        attributes.defaultChecked = checked;\r\n\r\n        //===> add Options <===//\r\n        if (required) attributes.required = true;\r\n        if (value) attributes.value = value;\r\n\r\n        //===> Render Component <===//\r\n        return (<label className={options} data-type={type?.includes(\"switch\") ? \"switch\" : type.includes(\"button\") ? \"button\" : type}>\r\n            <input type={type?.replace(\"switch-\",\"\").replace(\"button-\", \"\")} name={name} {...attributes} />\r\n            {type?.includes(\"switch\") ? <span className=\"switch\"></span> : null}\r\n            {children}\r\n        </label>)\r\n    }\r\n}","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"apiFetch\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"wp\"][\"serverSideRender\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl + \"../../\";","/*\r\n * ===> 01 - Block Data\r\n * ===> 02 - WordPress Modules\r\n * ===> 03 - Register Block\r\n * ===> 03 - Block Save Mode [Output]\r\n*/\r\n\r\n//===> Block Data <===//\r\nimport Edit from './edit';\r\nimport metadata from './block.json';\r\n\r\n//===> WordPress Modules <===//\r\nimport { registerBlockType } from '@wordpress/blocks';\r\n\r\n//===> Register Block <===//\r\nregisterBlockType(metadata.name, {\r\n    title      : metadata.title,\r\n    category   : metadata.category,\r\n    attributes : metadata.attributes,\r\n    icon  : <svg fill=\"none\" viewBox=\"0 0 30 28\"><path fill=\"#000\" fillRule=\"evenodd\" d=\"M16.187 27.68c.293.107.6.16.906.16.707 0 1.4-.293 1.894-.853L29.08 15.52c.667-.76.827-1.8.413-2.72a2.498 2.498 0 00-2.306-1.493h-3.12v-8.6c0-1.067-.64-2-1.64-2.374a2.498 2.498 0 00-2.8.694L9.533 12.493c-.666.76-.826 1.8-.413 2.72a2.497 2.497 0 002.307 1.494h3.12v8.6c0 1.067.64 2 1.64 2.373zM21.12 2.347a.485.485 0 01.387-.187c.08 0 .16.013.2.04.106.04.346.173.346.507v9.6c0 .546.454 1 1 1h4.12a.52.52 0 01.494.32c.04.093.12.333-.094.573L17.48 25.68a.502.502 0 01-.587.147.523.523 0 01-.346-.507v-9.6c0-.546-.454-1-1-1h-4.12a.52.52 0 01-.494-.32.515.515 0 01.094-.573L21.12 2.347zM1 4.333h9.333c.547 0 1-.453 1-1 0-.546-.453-1-1-1H1c-.547 0-1 .454-1 1 0 .547.453 1 1 1zm9 20.334c0 .546-.453 1-1 1H1c-.547 0-1-.454-1-1 0-.547.453-1 1-1h8c.547 0 1 .453 1 1zM1 15h4c.547 0 1-.453 1-1 0-.547-.453-1-1-1H1c-.547 0-1 .453-1 1 0 .547.453 1 1 1z\" clipRule=\"evenodd\"/></svg>,\r\n\r\n    /**===> @see ./edit.js <===*/\r\n    edit  : Edit,\r\n    save  : () => null\r\n});"],"names":["Edit","props","attributes","blockProps","setAttributes","useBlockProps","BlockControls","Toolbar","label","__","InspectorControls","key","PanelBody","title","initialOpen","preview","src","PreviewImage","alt","className","block","Component","finder_counter","element_finder","setInterval","document","querySelectorAll","forEach","element","class_names","classList","contains","Phenix","ancestor","select","dropdown","clearInterval","viewScript","the_document","time_counter","pds_elements_timer","style","backgroundImage","multimedia","row","add","getAttribute","setAttribute","menu","window","frames","trying_times","loadAssetTimer","querySelector","frameDoc","fontAwesome","importedEl","importNode","body","appendChild","PhenixSelect","PhenixComponentsBuilder","nextProps","nextState","value","this","options","name","size","type","multiple","onChange","placeholder","search","Date","now","toString","Math","random","substr","screen","event","target","defaultValue","options_list","Array","isArray","item","push","Object","entries","group_list","options_group","marginBottom","OptionControl","_Component","_inherits","_super","_this","_classCallCheck","_len","arguments","length","args","_key","_defineProperty","_assertThisInitialized","call","apply","concat","_this$props","checked","children","required","defaultChecked","React","createElement","includes","_extends","replace","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","obj","prop","prototype","hasOwnProperty","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","p","registerBlockType","metadata","category","icon","fill","viewBox","fillRule","clipRule","edit","save"],"sourceRoot":""}