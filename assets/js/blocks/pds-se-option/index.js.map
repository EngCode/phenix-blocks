{"version":3,"file":"blocks/pds-se-option/index.js","mappings":"wFAKwCA,EAAAA,S,+BCKEA,S,8CCmI1C,IAjIgC,WAE5B,IAAIC,EAAiB,EACjBC,EAAiBC,aAAY,WAEVC,SAASC,iBAAiB,mBAGhCC,SAAQ,SAAAC,GAEb,IAAIC,EAAcD,EAAQE,UAGtBD,EAAYE,SAAS,eAAiBC,OAAOJ,GAASK,SAAS,gBAC/DD,OAAOJ,GAASM,SACTL,EAAYE,SAAS,iBAC5BC,OAAOJ,GAASO,WAChBP,EAAQF,iBAAiB,6BAA6BC,SAAQ,SAAAC,GAAO,OAAII,OAAOJ,GAASM,QAApB,IAE5E,MAGDZ,EAGqB,IAAIc,cAAcb,EAC1C,GAAE,KAGHc,EAAa,SAACC,GAEd,IAAIC,EAAe,EAEnBC,EAAqBhB,aAAY,WAE7Bc,EAAaZ,iBAAb,8CAA4EC,SAAQ,SAAAC,GAChFA,EAAQa,MAAMC,gBAAkB,KAChCV,OAAOJ,GAASe,YACnB,IAGDL,EAAaZ,iBAAiB,mDAAmDC,SAAQ,SAAAC,GAQrF,IAA2BgB,EAN3BhB,EAAQE,UAAUe,IAAI,aAGnBjB,EAAQkB,aAAa,kBAAkBlB,EAAQmB,aAAa,iBAAiB,IAGrDH,EAQThB,GANVE,UAAUe,IAAI,eACdjB,EAAQkB,aAAa,YAAYF,EAAId,UAAUe,IAAd,sBAAiCjB,EAAQkB,aAAa,aACvFlB,EAAQkB,aAAa,YAAYF,EAAId,UAAUe,IAAd,sBAAiCjB,EAAQkB,aAAa,aACvFlB,EAAQkB,aAAa,YAAYF,EAAId,UAAUe,IAAd,sBAAiCjB,EAAQkB,aAAa,YA0BlG,IAGDR,EAAaZ,iBAAiB,kBAAkBC,SAAQ,SAAAC,GAAO,OAAII,OAAOJ,GAASoB,MAApB,KAG/DT,GAAgB,GAAsB,KAAKH,cAAcI,EAC5D,GAAE,IACN,EAGD,GAAIS,OAAOC,OAAO,iBAAkB,CAChCb,EAAWY,OAAOC,OAAO,iBAAiBzB,UAE1C,IAAI0B,EAAe,EAAGC,EAAiB5B,aAAY,WAE/C,GAAKyB,OAAOC,OAAO,kBAAqBD,OAAOC,OAAO,iBAAiBzB,SAKnE,GAAKwB,OAAOC,OAAO,iBAAiBzB,SAAS4B,cAAc,qBAkBvDF,GAAgB,GACG,IAAIf,cAAcgB,OAnBuC,CAE5E,IAWgD,EAX5CE,EAAWL,OAAOC,OAAO,iBAAiBzB,SAC1C8B,EAAc9B,SAAS4B,cAAc,oBACrCG,IAAaD,GAAc9B,SAASgC,WAAWF,GAAa,GAG7DC,GAAcF,EAASI,OACtBJ,EAASI,KAAKC,YAAYH,GAC1BpB,cAAcgB,IAIdE,GAAYA,EAASD,cAAc,UACnC,UAAAC,EAASD,cAAc,eAAvB,SAAgCvB,UAAUe,IAAI,gBAErD,MApBDT,cAAcgB,EA0BrB,GAAE,IACN,MAAUH,OAAOjB,QACdiB,OAAOxB,UAAWY,EAAWY,OAAOxB,SAE3C,C,4DClI2CJ,EAAAA,S,kkDCDvBuC,EAAAA,SAAAA,I,y1BAET,CAAC,G,gDAGT,YAAsBC,EAAAA,EAAAA,IAA4B,G,gCAClD,YAAuBA,EAAAA,EAAAA,IAA4B,G,mCAEnD,SAAsBC,EAAWC,GAC7B,OAAQD,EAAUE,QAAUC,KAAKC,MAAMF,OAASF,EAAUK,UAAYF,KAAKC,MAAMC,OACpF,G,oBAED,WAEI,MAAuGF,KAAKC,MAArGE,EAAP,EAAOA,KAAYC,GAAnB,EAAaC,KAAb,EAAmBD,MAAME,EAAzB,EAAyBA,MAAOP,EAAhC,EAAgCA,MAAOG,EAAvC,EAAuCA,QAASK,EAAhD,EAAgDA,SAAUC,EAA1D,EAA0DA,SAAUC,EAApE,EAAoEA,UAAWC,EAA/E,EAA+EA,YAAaC,EAA5F,EAA4FA,OASxFC,GARcC,KAAKC,MAAMC,SAAS,IAAMC,KAAKC,SAASF,SAAS,IAAIG,OAAO,EAAG,GAA/D,mBAA8EC,OAA9E,WAQD,CAACX,SALD,SAACY,GACd,OAAOZ,EAASY,EAAMC,OACzB,IAMGV,IAAQC,EAAW,eAAiB,GACpCb,IAAOa,EAAWU,aAAevB,GACjCQ,IAAUK,EAAWL,SAAWA,GAChCG,IAAaE,EAAW,oBAAsBF,GAGlD,IAAIa,EAAe,GA0BnB,OAxBIC,MAAMC,QAAQvB,KAAaA,EAAQ,GAAGG,KAEtCH,EAAQxC,SAAQ,SAAAgE,GACZH,EAAaI,KAAK,4BAAQC,IAAKF,EAAK3B,MAAOA,MAAO2B,EAAK3B,OAArC,UAAgD2B,EAAKpB,QAC1E,IACMJ,EAAQ,IAAMA,EAAQ,GAAGG,KAChCkB,EAAerB,EAGf2B,OAAOC,QAAQ5B,GAASxC,SAAQ,YAAoB,I,IAAA,G,EAAA,E,4CAAA,I,oxBAAlBkE,EAAkB,KAAb1B,EAAa,KAE5C6B,EAAa,GAEjB7B,EAAQxC,SAAQ,SAAAgE,GACZK,EAAWJ,KAAK,4BAAQC,IAAKF,EAAK3B,MAAOA,MAAO2B,EAAK3B,OAArC,UAAgD2B,EAAKpB,QACxE,IAED,IAAI0B,EAAgB,8BAAUJ,IAAG,UAAKA,EAAL,UAAkBtB,MAAK,UAAKsB,IAAQG,GAErER,EAAaI,KAAKK,EACrB,IAIE,oCAEF1B,EAAM,2BAAOG,UAAU,sBAAsBjC,MAAO,CAACyD,aAAc,IAA7D,UAAqE3B,IAAiB,KAG7F,yBAAKsB,IAAG,iBAAoBnB,UAAS,oBAAeA,GAAwB,KACxE,8BAAQmB,IAAG,iBAAoBzB,KAAMA,EAAMM,UAAS,gDAA2CL,GAAc,QAAzD,eAAkFQ,GAAaW,IAG9J,M,sEAnEgB5B,CAAqBvC,EAAAA,U,+BCHCA,S,mBCL3C8E,EAAOC,QAAUnD,OAAc,K,mBCA/BkD,EAAOC,QAAUnD,OAAW,GAAY,Q,mBCAxCkD,EAAOC,QAAUnD,OAAW,GAAc,U,mBCA1CkD,EAAOC,QAAUnD,OAAW,GAAY,Q,mBCAxCkD,EAAOC,QAAUnD,OAAW,GAAW,O,mBCAvCkD,EAAOC,QAAUnD,OAAW,GAAQ,I,mBCApCkD,EAAOC,QAAUnD,OAAW,GAAW,O,GCCnCoD,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaJ,QAGrB,IAAID,EAASE,EAAyBE,GAAY,CAGjDH,QAAS,CAAC,GAOX,OAHAM,EAAoBH,GAAUJ,EAAQA,EAAOC,QAASE,GAG/CH,EAAOC,OACf,CCrBAE,EAAoBK,EAAI,SAASR,GAChC,IAAIS,EAAST,GAAUA,EAAOU,WAC7B,WAAa,OAAOV,EAAgB,OAAG,EACvC,WAAa,OAAOA,CAAQ,EAE7B,OADAG,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CACR,ECNAN,EAAoBQ,EAAI,SAASV,EAASY,GACzC,IAAI,IAAInB,KAAOmB,EACXV,EAAoBW,EAAED,EAAYnB,KAASS,EAAoBW,EAAEb,EAASP,IAC5EC,OAAOoB,eAAed,EAASP,EAAK,CAAEsB,YAAY,EAAMC,IAAKJ,EAAWnB,IAG3E,ECPAS,EAAoBW,EAAI,SAASI,EAAKC,GAAQ,OAAOxB,OAAOyB,UAAUC,eAAeC,KAAKJ,EAAKC,EAAO,E,6GCsBtGI,EAAAA,EAAAA,gBAAe,iBAAkB,CAC7BC,OAAQ,WAaJ,OARAC,EAAAA,EAAAA,YAAU,WAENC,IAAS,CAACC,KAAM,0BAA0BC,MAAK,SAAA5D,GAE9C,GACJ,IAGM,oBAAC,EAAA6D,cAAD,CAAe5D,KAAK,iBAAiB6D,OAAOC,EAAAA,EAAAA,IAAG,kBAAmB,UAAWC,KAAM,2BAAKC,KAAK,OAAOC,QAAQ,aAAY,4BAAMD,KAAK,UAAUtB,EAAE,u3CAElJ,oBAAC,EAAAwB,UAAD,CAAWL,OAAOC,EAAAA,EAAAA,IAAG,kBAAmB,UAAWK,aAAa,IAIhE,oBAAC,EAAAD,UAAD,CAAWL,OAAOC,EAAAA,EAAAA,IAAG,gBAAiB,UAAWK,aAAa,IAI9D,oBAAC,EAAAD,UAAD,CAAWL,OAAOC,EAAAA,EAAAA,IAAG,cAAe,UAAWK,aAAa,IAI5D,oBAAC,EAAAD,UAAD,CAAWL,OAAOC,EAAAA,EAAAA,IAAG,mBAAoB,UAAWK,aAAa,IAKxE,G","sources":["webpack://pds-blocks-pro/./src/blocks/px-controls/dropdown.js","webpack://pds-blocks-pro/./src/blocks/px-controls/number.js","webpack://pds-blocks-pro/./src/blocks/px-controls/panel-scripts.js","webpack://pds-blocks-pro/./src/blocks/px-controls/select-data.js","webpack://pds-blocks-pro/./src/blocks/px-controls/select.js","webpack://pds-blocks-pro/./src/blocks/px-controls/switch.js","webpack://pds-blocks-pro/external window \"React\"","webpack://pds-blocks-pro/external window [\"wp\",\"apiFetch\"]","webpack://pds-blocks-pro/external window [\"wp\",\"components\"]","webpack://pds-blocks-pro/external window [\"wp\",\"editSite\"]","webpack://pds-blocks-pro/external window [\"wp\",\"element\"]","webpack://pds-blocks-pro/external window [\"wp\",\"i18n\"]","webpack://pds-blocks-pro/external window [\"wp\",\"plugins\"]","webpack://pds-blocks-pro/webpack/bootstrap","webpack://pds-blocks-pro/webpack/runtime/compat get default export","webpack://pds-blocks-pro/webpack/runtime/define property getters","webpack://pds-blocks-pro/webpack/runtime/hasOwnProperty shorthand","webpack://pds-blocks-pro/./src/blocks/pds-options/site-editor.js"],"sourcesContent":["//====> .Dependencies. <====//\r\nimport {Component} from '@wordpress/element';\r\nimport PhenixComponentsBuilder from './panel-scripts';\r\n\r\n//===> Phenix Form Control <===//\r\nexport default class PxDropDown extends Component {\r\n    //===> States <===//\r\n    state = {};\r\n\r\n    //===> Component Rendered Hooks <===//\r\n    componentDidMount() { PhenixComponentsBuilder(); };\r\n    componentDidUpdate() { PhenixComponentsBuilder(); };\r\n\r\n    render () {\r\n        //===> Properties <===//\r\n        const {\r\n            label,\r\n            button,\r\n            support,\r\n            dropList,\r\n            children,\r\n            className,\r\n            dataPosition,\r\n            title,\r\n        } = this.props;\r\n\r\n        const attributes = {};\r\n\r\n\r\n        if (support?.includes(\"hover\")) attributes[\"data-hover\"] = \"true\";\r\n        if (dataPosition) attributes[\"data-position\"] = dataPosition;\r\n\r\n        //===> Render Component <===//\r\n        return (<>\r\n            {/* Dropdown Wrapper */}\r\n            <div className={`px-dropdown pds-tm-control ${className ? className : \"\"}`} {...attributes}>\r\n                {/* Toggle Button */}\r\n                <button className={`px-toggle btn ${button} ${title ? \"tooltip\" : \"\"}`} data-title={title}>{label}</button>\r\n                {/* Dropdown Target */}\r\n                <ul className={`hidden px-dropdown-list reset-list bg-white radius-md radius-bottom bx-shadow-dp-2 border-1 border-alpha-10 border-solid ${dropList ? dropList : \"fs-14 w-min-200\"}`}>{children}</ul>\r\n                {/* // Dropdown Target */}\r\n            </div>\r\n            {/* // Dropdown Wrapper */}\r\n        </>)\r\n    }\r\n}","/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport {Component} from '@wordpress/element';\r\n\r\n//===> Media Uploader <===//\r\nexport default class PhenixNumber extends Component {\r\n    render () {\r\n        //===> Properties <===//\r\n        const {label, value, min, max, steps, icon, onChange, name} = this.props;\r\n        const uniqueKey = Date.now().toString(36) + Math.random().toString(36).substr(2, 5)+`-flexbox-${screen}-option`;\r\n\r\n        //===> Set Value <===//\r\n        const setNumber = (changed) => {\r\n            //===> Get Elements <===//\r\n            const input  = changed.target,\r\n                  minNum  = parseInt(min) || 0,\r\n                  maxNum  = parseInt(max) || 0;\r\n\r\n            //===> Get Input Element <===//\r\n            const newVal = parseInt(input.value),\r\n                  checkVal = (newVal >= minNum || newVal <= maxNum) ? newVal : 0;\r\n\r\n            //===> Set Data <===//\r\n            input.value = checkVal;\r\n            return onChange(input);\r\n        },\r\n\r\n        //===> Increase Number <===//\r\n        IncreaseNum = (clicked) => {\r\n            //===> Get Elements <===//\r\n            let button  = clicked.target,\r\n                wrapper = Phenix(button).ancestor(\".px-counter-input\"),\r\n                maxNum  = parseInt(max) || 9999999,\r\n                step    = steps ? parseInt(steps) : 1;\r\n\r\n            //===> Get Input Element <===//\r\n            let input  = wrapper.querySelector('input[type=\"number\"]'),\r\n                newVal = parseInt(input.value) + step;\r\n\r\n            //===> Set Data <===//\r\n            input.value = newVal < maxNum || newVal === maxNum ? newVal : maxNum;\r\n            return onChange(input);\r\n        },\r\n\r\n        //===> Decrease Number <===//\r\n        DecreaseNum = (clicked) => {\r\n            //===> Get Elements <===//\r\n            let button  = clicked.target,\r\n                wrapper = Phenix(button).ancestor(\".px-counter-input\"),\r\n                minNum  = parseInt(min) || 0,\r\n                step    = steps ? steps : 1;\r\n\r\n            //===> Get Input Element <===//\r\n            let input = wrapper.querySelector('input[type=\"number\"]'),\r\n                newVal = parseInt(input.value) - step;\r\n\r\n            //===> Set Data <===//\r\n            input.value = newVal > minNum || newVal === minNum ? newVal : minNum;\r\n            return onChange(input);\r\n        };\r\n\r\n        //===> Output <===//\r\n        return (<div className='flexbox flex-gap-fix align-between flow-column'>\r\n            {/*===> Label <===*/}\r\n            <label className='components-input-control__label tx-uppercase weight-bold'>{label}</label>\r\n            {/*===> Counter Control <===*/}\r\n            <div className={\"px-counter-input position-rv fluid \" + (icon ? icon : \"\")}>\r\n                {/*===> Button <===*/}\r\n                {!icon ? <button onClick={DecreaseNum} className='btn square small fs-13 increase-btn far fa-minus position-ab pos-start-0 pos-top-0 divider-e icon-fix'></button> : \"\"}\r\n\r\n                {/*===> Number Input <===*/}\r\n                <input name={name} type=\"number\" min={min} max={max} value={parseInt(value) ? parseInt(value) : 0} className={\"form-control small radius-sm reset-appearance tx-align-center\"} onChange={setNumber} />\r\n\r\n                {/*===> Button <===*/}\r\n                <div className='position-ab pos-end-0 pos-bottom-0 flexbox'>\r\n                    {icon ? <button onClick={DecreaseNum} className='btn square small fs-13 increase-btn far fa-minus divider-s icon-fix'></button> : \"\"}\r\n                    <button onClick={IncreaseNum} className='btn square small fs-13 increase-btn far fa-plus divider-s icon-fix'></button>\r\n                </div>\r\n            </div>\r\n            {/*===> Counter Control <===*/}\r\n        </div>)\r\n    }\r\n}","/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport { __ } from '@wordpress/i18n';\r\nimport apiFetch from '@wordpress/api-fetch';\r\nimport { useState, useEffect } from '@wordpress/element';\r\n\r\n//===> Script Runner <===//\r\nconst PhenixComponentsBuilder = () => {\r\n    //===> Create Time Loop to Find the Elements <===//\r\n    let finder_counter = 0,\r\n        element_finder = setInterval(() => {\r\n            //===> Get Elements <===//\r\n            let elements = document.querySelectorAll('.pds-tm-control');\r\n\r\n            //===> Loop Through Elements <===//\r\n            elements.forEach(element => {\r\n                //===> Define Element Data <===//\r\n                let class_names = element.classList;\r\n\r\n                //===> for Selects <===//\r\n                if (class_names.contains('px-select') && !Phenix(element).ancestor('.px-dropdown')) {\r\n                    Phenix(element).select();\r\n                } else if (class_names.contains('px-dropdown')) {\r\n                    Phenix(element).dropdown();\r\n                    element.querySelectorAll('.pds-tm-control.px-select').forEach(element => Phenix(element).select());\r\n                }\r\n            });\r\n\r\n            //===> Increase Counter <===//\r\n            finder_counter++;\r\n\r\n            //===> Clear Timer Loop <===//\r\n            if (finder_counter > 30) clearInterval(element_finder);\r\n        }, 500);\r\n\r\n    //===> Get View iFrame <===//\r\n    let viewScript = (the_document) => {\r\n        //===> Define Data <===//\r\n        let time_counter = 0,\r\n        //===> Timer Loop <===//\r\n        pds_elements_timer = setInterval(() => {\r\n            //===> Run Multimedia <===//\r\n            the_document.querySelectorAll(`.px-media:not([style*=\"background-image\"])`).forEach(element => {\r\n                element.style.backgroundImage = null;\r\n                Phenix(element).multimedia();\r\n            });\r\n\r\n            //===> Run Sliders <===//\r\n            the_document.querySelectorAll(\".px-slider:not(.block-editor-block-list__block)\").forEach(element => {\r\n                //===> Mark as Editing Mode <===//\r\n                element.classList.add('edit-mode');\r\n\r\n                //===> Disable Autoplay <===//\r\n                if(element.getAttribute('data-autoplay')) element.setAttribute('data-autoplay', false);\r\n\r\n                //===> Replace Data Attributes with Row/Columns Classes <===//\r\n                const slider_cols_fixer = (row) => {\r\n                    //===> Contain the Slides in One Line <====//\r\n                    row.classList.add('flow-nowrap');\r\n                    if (element.getAttribute('data-md')) row.classList.add(`row-cols-md-${element.getAttribute('data-md')}`);\r\n                    if (element.getAttribute('data-lg')) row.classList.add(`row-cols-md-${element.getAttribute('data-lg')}`);\r\n                    if (element.getAttribute('data-xl')) row.classList.add(`row-cols-md-${element.getAttribute('data-xl')}`);\r\n                }\r\n\r\n                slider_cols_fixer(element);\r\n\r\n                //===> Stretch Fix <===//\r\n                // let slider_element = element.querySelector(\".splide__list\"),\r\n                //===> Slides List Finder <===//\r\n                // slider_element_finder = setInterval(() => {\r\n                //     if (!slider_element) {\r\n                //         slider_cols_fixer(element);\r\n                //         slider_element = element.querySelector(\".splide__list\");\r\n                //     } else {\r\n                //         //===> Assign a Max Height for Stretch <===//\r\n                //         slider_element.style.maxHeight = Phenix(slider_element).height();\r\n\r\n                //         //===> Assign Columns Sizes <===//\r\n                //         slider_cols_fixer(slider_element);\r\n                //         element.classList.forEach(class_name => class_name.includes('row-cols') || class_name.includes('flow-') ? element.classList.remove(class_name) : null);\r\n\r\n                //         //===> Clear Timer <===//\r\n                //         clearInterval(slider_element_finder);\r\n                //     }\r\n                // }, 100);\r\n                //===> Run the Slider <===//\r\n                // Phenix(element).slider({autoplay: false});\r\n            });\r\n\r\n            //===> Run Menus <===//\r\n            the_document.querySelectorAll(\".px-navigation\").forEach(element => Phenix(element).menu());\r\n\r\n            //====> Clear Timer <===//\r\n            time_counter += 1; if (time_counter > 100) clearInterval(pds_elements_timer);\r\n        }, 500);\r\n    };\r\n\r\n    //===> Run View Script <===//\r\n    if (window.frames['editor-canvas']) {\r\n        viewScript(window.frames['editor-canvas'].document);\r\n        //===> Load Assets in Frame <====//\r\n        let trying_times = 0, loadAssetTimer = setInterval(()=> {\r\n            //====> if the Document unloaded clear the timer <====//\r\n            if (!window.frames['editor-canvas'] || !window.frames['editor-canvas'].document) {\r\n                clearInterval(loadAssetTimer);\r\n                return;\r\n            } else {\r\n                //===> When the Frame is Found <===//\r\n                if (!window.frames['editor-canvas'].document.querySelector(\"#fontawesome-css\")) {\r\n                    //===> Check in the Editor <===//\r\n                    let frameDoc = window.frames['editor-canvas'].document,\r\n                        fontAwesome = document.querySelector(\"#fontawesome-css\"),\r\n                        importedEl = fontAwesome ? document.importNode(fontAwesome, true) : false;\r\n    \r\n                    //===> Load Font <===//\r\n                    if(importedEl && frameDoc.body) {\r\n                        frameDoc.body.appendChild(importedEl);\r\n                        clearInterval(loadAssetTimer);\r\n                    }\r\n                    \r\n                    //===> Add Scrollbar <===//\r\n                    if (frameDoc && frameDoc.querySelector('html')) {\r\n                        frameDoc.querySelector('html')?.classList.add('px-scrollbar');\r\n                    };\r\n                } else {\r\n                    //===> Increase Counter <===//\r\n                    trying_times += 1;\r\n                    if (trying_times > 10) clearInterval(loadAssetTimer);\r\n                }\r\n            }\r\n        }, 300);\r\n    } else if (window.Phenix) {\r\n        window.document ? viewScript(window.document) : null;\r\n    }\r\n}\r\n\r\nexport default PhenixComponentsBuilder;","//====> .Dependencies. <====//\r\nimport {__} from '@wordpress/i18n';\r\nimport apiFetch from '@wordpress/api-fetch';\r\nimport {Component} from '@wordpress/element';\r\n\r\n//====> Phenix Modules <====//\r\nimport PhenixSelect from './select';\r\n\r\n//===> Phenix Form Control <===//\r\nexport default class SelectFromData extends Component {\r\n    //===> States <===//\r\n    state = {\r\n        dataFetched: 0,\r\n        options: [{label: __(\"Default\", \"pds-blocks\"), value: \"\"}],\r\n    };\r\n\r\n    //===> Component Rendered Hook <===//\r\n    reRender = () => {\r\n        //===> Fetch Data <===//\r\n        if(this.state.options.length < 2) {\r\n            //===> for PDS Menu Locations <===//\r\n            if (this.props.options === \"menu-locations\") {\r\n                apiFetch({path: 'pds-blocks/v2/options'}).then(options => {\r\n                    //===> Create New Array <===//\r\n                    const new_state = this.state,\r\n                        locations = options.menu_locations,\r\n                        new_options_list = [{label: __(\"Default\", \"pds-blocks\"), value: \"\"}];\r\n        \r\n                    //===> add Locations to a List <===//\r\n                    for (const [key, value] of Object.entries(locations)) {\r\n                        new_options_list.push({label: value, value: key});\r\n                    }\r\n    \r\n                    //===> Set new Options List <===//\r\n                    if (new_options_list !== this.state.options) {\r\n                        new_state.dataFetched += 1;\r\n                        new_state.options = new_options_list;\r\n                        //===> Set State <===//\r\n                       this.setState({...new_state});\r\n                    }\r\n                });\r\n            }\r\n            //====> for taxonomies <====//\r\n            else if (this.props.options === \"taxonomies\") {\r\n                //===> Fetch Taxonomies <===//\r\n                apiFetch({path: 'wp/v2/taxonomies'}).then(taxonomies => {\r\n                    //===> Define Types <===//\r\n                    const new_state = this.state,\r\n                          new_options_list = [];\r\n\r\n                    //===> Get Current Active Types <===//\r\n                    for (const [key, value] of Object.entries(taxonomies)) {\r\n                        //===> Exclude the Core Types <===//\r\n                        if (\"nav_menu\" !== key) {\r\n                            new_options_list.push({\"value\":key, \"label\":value.name});\r\n                        }\r\n                    }\r\n\r\n                    //===> Set new Options List <===//\r\n                    if (new_options_list !== this.state.options) {\r\n                        new_state.dataFetched += 1;\r\n                        new_state.options = new_options_list;\r\n                        //===> Set State <===//\r\n                        this.setState({...new_state});\r\n                    }\r\n                });\r\n            }\r\n            //====> for Post-Types <====//\r\n            else if (this.props.options === \"post-types\") {\r\n                //===> Fetch Post Types <===//\r\n                apiFetch({path: 'wp/v2/types'}).then(post_types => {\r\n                    //===> Define Types <===//\r\n                    const new_state = this.state,\r\n                          new_options_list = [];\r\n            \r\n                    //===> Get Current Active Types <===//\r\n                    for (const [key, value] of Object.entries(post_types)) {\r\n                        //===> Exclude the Core Types <===//\r\n                        if (!['attachment', 'nav_menu_item', 'wp_block', 'wp_navigation', 'wp_template', 'wp_template_part'].includes(key)) {\r\n                            new_options_list.push({\"value\":key, \"label\":value.name});\r\n                        }\r\n                    }\r\n            \r\n                    //===> Set new Options List <===//\r\n                    if (new_options_list !== this.state.options) {\r\n                        new_state.dataFetched += 1;\r\n                        new_state.options = new_options_list;\r\n                        //===> Set State <===//\r\n                        this.setState({...new_state});\r\n                    }\r\n\r\n                });\r\n            }\r\n            //====> for Users-Roles <====//\r\n            else if (this.props.options === \"users-roles\") {\r\n                //===> Fetch Roles <===//\r\n                apiFetch({path: 'pds-blocks/v2/options'}).then(options => {\r\n                    //===> Define Types <===//\r\n                    const new_state = this.state,\r\n                          new_options_list = [];\r\n            \r\n                    //===> Get Current Roles <===//\r\n                    for (const [key, value] of Object.entries(options.users_roles)) {\r\n                        new_options_list.push({\"value\": value.name, \"label\": value.name});\r\n                    }\r\n            \r\n                    //===> Set new Options List <===//\r\n                    if (new_options_list !== this.state.options) {\r\n                        new_state.dataFetched += 1;\r\n                        new_state.options = new_options_list;\r\n                        //===> Set State <===//\r\n                        this.setState({...new_state});\r\n                    }\r\n                });\r\n            }\r\n            //====> for Template-Parts <====//\r\n            else if (this.props.options === \"template-parts\") {\r\n                apiFetch({path: 'pds-blocks/v2/options'}).then(options => {\r\n                    //===> Create New Array <===//\r\n                    const new_state = this.state,\r\n                          template_parts = options.theme_parts,\r\n                          new_options_list = [];\r\n\r\n                    //===> Loop Through Theme-Parts <===//\r\n                    Object.entries(template_parts).forEach(([key, value]) => {\r\n                        //===> if its direct theme-part <===//\r\n                        if(typeof(value) === 'string') {\r\n                            new_options_list.push(<option key={`${key}-${value}`} value={value.replace(\".php\", \"\")}>{value.replace('-', ' ').replace('_', '').replace(\".php\", \"\")}</option>);\r\n                        }\r\n                        //===> if its nested theme-part in a directory <===//\r\n                        else {\r\n                            //===> Define Directory Files <===//\r\n                            let files_list = [];\r\n                            //===> Loop Through Files <===//\r\n                            Object.entries(value).forEach(([key2, value]) => {\r\n                                //===> add the file to the list <===//\r\n                                files_list.push(<option key={`${key2}-${value}`} value={`${key}/${value.replace(\".php\", \"\")}`}>{`${value.replace('-', ' ').replace('_', '').replace(\".php\", \"\")}`}</option>);\r\n                            });\r\n                            //===> Push the Options Group <===//\r\n                            new_options_list.push(<optgroup key={`${key}-group`} label={`${key}`}>{files_list}</optgroup>);\r\n                        }\r\n                    });\r\n\r\n                    //===> Set new Options List <===//\r\n                    if (new_options_list !== this.state.options) {\r\n                        new_state.dataFetched += 1;\r\n                        new_state.options = new_options_list;\r\n                        //===> Set State <===//\r\n                       this.setState({...new_state});\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    //===> Fetch Data When Rendered <===//\r\n    componentDidMount() { this.reRender(); };\r\n    //===> Fetch Data When Updated <===//\r\n    componentDidUpdate() { this.reRender(); };\r\n\r\n    render () {\r\n        //===> Properties <===//\r\n        const {options, name, type, size, label, value, multiple, valueSetter, className, search } = this.props;\r\n        const uniqueKey = Date.now().toString(36) + Math.random().toString(36).substr(2, 5)+`-flexbox-${screen}-option`;\r\n\r\n        //===> Render Component <===//\r\n        return <PhenixSelect key={this.state.dataFetched} type={type} options={this.state.options} multiple={multiple} name={name} placeholder={__(\"Default\", \"pds-blocks\")} label={label} value={value} onChange={valueSetter} className={className} search={search} size={size} />\r\n    }\r\n}","//====> .Dependencies. <====//\r\nimport React from 'react';\r\nimport {Component} from '@wordpress/element';\r\n\r\n//====> Phenix Modules <====//\r\nimport PhenixComponentsBuilder from './panel-scripts';\r\n\r\n//===> Phenix Form Control <===//\r\nexport default class PhenixSelect extends Component {\r\n    //===> States <===//\r\n    state = {};\r\n\r\n    //===> Component Rendered Hooks <===//\r\n    componentDidMount() { PhenixComponentsBuilder(); };\r\n    componentDidUpdate() { PhenixComponentsBuilder(); };\r\n    //===> Component Rendered when Props Change <===//\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return (nextProps.value !== this.props.value || nextProps.options !== this.props.options);\r\n    }\r\n\r\n    render () {\r\n        //===> Properties <===//\r\n        const {name, type, size, label, value, options, multiple, onChange, className, placeholder, search } = this.props;\r\n        const uniqueKey = Date.now().toString(36) + Math.random().toString(36).substr(2, 5)+`-flexbox-${screen}-option`;\r\n\r\n        //===> Change Value <===//\r\n        const setValue = (event) => {\r\n            return onChange(event.target);\r\n        };\r\n\r\n        //===> Define Element Attributes <===//\r\n        let attributes = {onChange: setValue};\r\n\r\n        //===> add Options <===//\r\n        if (search) attributes['data-search'] = 1;\r\n        if (value) attributes.defaultValue = value;\r\n        if (multiple) attributes.multiple = multiple;\r\n        if (placeholder) attributes['data-placeholder'] = placeholder;\r\n\r\n        //===> Get Options List <===//\r\n        let options_list = [];\r\n\r\n        if (Array.isArray(options) && !options[0].type) {\r\n            //===> Normal Lost of Options <===//\r\n            options.forEach(item => {\r\n                options_list.push(<option key={item.value} value={item.value}>{`${item.label}`}</option>);\r\n            });\r\n        } else if (options[0] && options[0].type) {\r\n            options_list = options;\r\n        } else{\r\n            //===> Grouped Options <===//\r\n            Object.entries(options).forEach(([key, options]) => {\r\n                //===> Define the Options List <===//\r\n                let group_list = [];\r\n                //===> Add Options to the Group <===//\r\n                options.forEach(item => {\r\n                    group_list.push(<option key={item.value} value={item.value}>{`${item.label}`}</option>);\r\n                });\r\n                //===> Create the Group <===//\r\n                let options_group = <optgroup key={`${key}-group`} label={`${key}`}>{group_list}</optgroup>;\r\n                //===> Add the Group <===//\r\n                options_list.push(options_group);\r\n            });\r\n        }\r\n\r\n        //===> Render Component <===//\r\n        return <>\r\n            {/*===> Control Label <===*/}\r\n            {label?<label className='tx-capitalize fs-13' style={{marginBottom: 5}}>{`${label}`}</label>:null}\r\n\r\n            {/*===> Control Element <===*/}\r\n            <div key={`select-wrapper`} className={`px-select ${className ? className : \"\"}`}>\r\n                <select key={`select-element`} name={name} className={`px-select pds-tm-control form-control ${size ? size : \"small\"} radius-md`} {...attributes}>{options_list}</select>\r\n            </div>\r\n        </>\r\n    }\r\n}","//====> .Dependencies. <====//\r\nimport {Component} from '@wordpress/element';\r\nimport { useState, useEffect } from '@wordpress/element';\r\n\r\n//===> Phenix Form Control <===//\r\nexport default class OptionControl extends Component {\r\n    //===> States <===//\r\n    state = {};\r\n\r\n    render () {\r\n        //===> Properties <===//\r\n        const {\r\n            name,\r\n            type,\r\n            value,\r\n            checked,\r\n            onChange,\r\n            children,\r\n            required,\r\n            className\r\n        } = this.props;\r\n\r\n        //===> Change Value <===//\r\n        const setValue = (event) => {\r\n            return onChange(event.target);\r\n        };\r\n\r\n        //===> Define Data <===//\r\n        let options = `fs-12 option-control flexbox align-center-y`,\r\n            attributes = {onChange: setValue};\r\n\r\n        //===> Custom Classes <===//\r\n        if (className) options += ` ${className}`;\r\n\r\n        //===> Check if is On <===//\r\n        attributes.defaultChecked = checked;\r\n\r\n        //===> add Options <===//\r\n        if (required) attributes.required = true;\r\n        if (value) attributes.value = value;\r\n\r\n        //===> Render Component <===//\r\n        return (<label className={options} data-type={type?.includes(\"switch\") ? \"switch\" : type.includes(\"button\") ? \"button\" : type}>\r\n            <input type={type?.replace(\"switch-\",\"\").replace(\"button-\", \"\")} name={name} {...attributes} />\r\n            {type?.includes(\"switch\") ? <span className=\"switch\"></span> : null}\r\n            {children}\r\n        </label>)\r\n    }\r\n}","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"apiFetch\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"editSite\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"wp\"][\"plugins\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","/*\r\n * ===> 01 - Modules\r\n * ===> 02 - Register Block\r\n * ===> 03 - Block Save Mode [Output]\r\n*/\r\n\r\n//===> WP Modules <===//\r\nimport { __ } from '@wordpress/i18n';\r\nimport apiFetch from '@wordpress/api-fetch';\r\nimport { PanelBody } from '@wordpress/components';\r\nimport { registerPlugin } from '@wordpress/plugins';\r\nimport { PluginSidebar } from '@wordpress/edit-site';\r\nimport {useState, useEffect} from '@wordpress/element';\r\n\r\n//====> Phenix Modules <====//\r\nimport PxDropDown from '../px-controls/dropdown';\r\nimport PhenixNumber from \"../px-controls/number\";\r\nimport PhenixSelect from '../px-controls/select';\r\nimport OptionControl from '../px-controls/switch';\r\nimport SelectFromData from '../px-controls/select-data';\r\n\r\n//===> Register the Plugin Sidebar <===//\r\nregisterPlugin('phenix-sidebar', {\r\n    render: () => {\r\n        //===> Define Options <===//\r\n        const data_options = {};\r\n\r\n        //===> on Render Hook <===//\r\n        useEffect(() => {\r\n            //===> \r\n            apiFetch({path: 'pds-blocks/v2/options'}).then(options => {\r\n                \r\n            });\r\n        });\r\n\r\n        //===> Sidebar Content <===//\r\n        return <PluginSidebar name=\"phenix-sidebar\" title={__('Phenix Settings', 'phenix')} icon={<svg fill=\"none\" viewBox=\"0 0 28 29\"><path fill=\"#121212\" d=\"M18 2.378c4.766.944 6.867 11.864 1.543 13.04.433.378 1.623.871 2.598 2.225 2.206 3.071 1.061 5.217 1.137 6.48a9.895 9.895 0 001.896-1.93c2.203-2.833 3.26-6.245 2.506-9.858-.17.296-.373.573-.603.826.114-4.55-4.064-10.996-9.077-10.764m-2.476 22.321C12.127 23.338 3.892 23.046.858 19.13c1.566 3.39 5.263 4.652 8.835 5.434 3.321.731 7.424.223 8.429 3.916.633-1.547-.971-3.094-2.613-3.76m2.195 3.7c-.822-2.84-7.25-2.757-12.474-4.323a21.922 21.922 0 01-3.033-1.16c5.486 4.197 10.764 2.43 14.506 4.618.66.402.565.47 1.017.865m2.16-17.57c-.026-2.587-2.111-2.61-3.556-2.678-.333 0-2.093-.603-3.355.02h-.812c-.542 0-1.274.06-1.736-.289l-.38-.379a.644.644 0 00-.071-.076c.005.611.231 1.2.636 1.657.228.254.88.758 1.347.758l-.562 1.672c-1.107 4.41 1.767 5.138 4.687 7.25 1.543 1.138 3.31 2.734 3.033 4.838 0-.504-.728-1.698-.997-2.07-2.984-4.091-15.811-6.912-8.83-17.275A8.816 8.816 0 0117.408.32c-.307-.06-.641-.129-.853-.152C8.495-.667 1.799 5.35 1.496 13.377l-.638-1.403c-.542 1.202-.47 4.065.148 5.328 1.278 3.17 5.468 4.55 8.49 5.281 4.19 1.043 9.941.888 9 5.582 1.848-.451 4.486-4.79 4.172-7.132A6.825 6.825 0 0017.48 15.3a3.033 3.033 0 01-1.198-.417c-.38-.243-.6-.607-.888-.732a5.69 5.69 0 01-.436-1.16 2.86 2.86 0 011.058-2.655c1.308-1.073 2.68-.318 3.864.524m-4.706-2.078a.254.254 0 01-.144.466l-.61-.019a.243.243 0 01-.14-.05.258.258 0 010-.428.25.25 0 01.144-.037l.61.019c.05.001.1.018.14.049z\"/></svg>}>\r\n            {/*===> Panel Component <===*/}\r\n            <PanelBody title={__('General Options', 'phenix')} initialOpen={true}>\r\n                \r\n            </PanelBody>\r\n            {/*===> Panel Component <===*/}\r\n            <PanelBody title={__('Phenix Blocks', 'phenix')} initialOpen={false}>\r\n                \r\n            </PanelBody>\r\n            {/*===> Panel Component <===*/}\r\n            <PanelBody title={__('Core Blocks', 'phenix')} initialOpen={false}>\r\n                \r\n            </PanelBody>\r\n            {/*===> Panel Component <===*/}\r\n            <PanelBody title={__('Typography Fonts', 'phenix')} initialOpen={false}>\r\n                \r\n            </PanelBody>\r\n            {/*===> Panels Component <===*/}\r\n        </PluginSidebar>\r\n    },\r\n});"],"names":["Component","finder_counter","element_finder","setInterval","document","querySelectorAll","forEach","element","class_names","classList","contains","Phenix","ancestor","select","dropdown","clearInterval","viewScript","the_document","time_counter","pds_elements_timer","style","backgroundImage","multimedia","row","add","getAttribute","setAttribute","menu","window","frames","trying_times","loadAssetTimer","querySelector","frameDoc","fontAwesome","importedEl","importNode","body","appendChild","PhenixSelect","PhenixComponentsBuilder","nextProps","nextState","value","this","props","options","name","size","type","label","multiple","onChange","className","placeholder","search","attributes","Date","now","toString","Math","random","substr","screen","event","target","defaultValue","options_list","Array","isArray","item","push","key","Object","entries","group_list","options_group","marginBottom","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","registerPlugin","render","useEffect","apiFetch","path","then","PluginSidebar","title","__","icon","fill","viewBox","PanelBody","initialOpen"],"sourceRoot":""}