{"version":3,"file":"blocks/query/index.js","mappings":"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","sources":["webpack://phenix-blocks/./src/blocks/px-controls/alignment.js","webpack://phenix-blocks/./src/blocks/px-controls/colors/background.js","webpack://phenix-blocks/./src/blocks/px-controls/colors/text.js","webpack://phenix-blocks/./src/blocks/px-controls/number.js","webpack://phenix-blocks/./src/blocks/px-controls/panel-scripts.js","webpack://phenix-blocks/./src/blocks/px-controls/switch.js","webpack://phenix-blocks/./src/blocks/px-controls/tabs.js","webpack://phenix-blocks/./src/blocks/px-controls/templates-meta.js","webpack://phenix-blocks/./src/blocks/px-controls/uploader.js","webpack://phenix-blocks/./src/blocks/query/edit.js","webpack://phenix-blocks/external window [\"wp\",\"apiFetch\"]","webpack://phenix-blocks/external window [\"wp\",\"blockEditor\"]","webpack://phenix-blocks/external window [\"wp\",\"blocks\"]","webpack://phenix-blocks/external window [\"wp\",\"components\"]","webpack://phenix-blocks/external window [\"wp\",\"element\"]","webpack://phenix-blocks/external window [\"wp\",\"i18n\"]","webpack://phenix-blocks/external window [\"wp\",\"serverSideRender\"]","webpack://phenix-blocks/webpack/bootstrap","webpack://phenix-blocks/webpack/runtime/compat get default export","webpack://phenix-blocks/webpack/runtime/define property getters","webpack://phenix-blocks/webpack/runtime/hasOwnProperty shorthand","webpack://phenix-blocks/./src/blocks/query/index.js"],"sourcesContent":["/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport {Component} from '@wordpress/element';\r\nimport OptionControl from './switch';\r\n\r\n//===> Media Uploader <===//\r\nexport default class FlexAlignment extends Component {\r\n    render () {\r\n        //===> Properties <===//\r\n        const {label, value, onChange} = this.props;\r\n        const button_style = \"btn tiny bg-transparent fs-12 square pxi\";\r\n\r\n        //===> Value Handler <===//\r\n        const set_alignment = target => {\r\n            //===> Define Data <===//\r\n            let align_val  = value;\r\n            const current_val = value.trim(),\r\n                  current_values  = current_val.split(\" \"),\r\n                  xTypes = [\"-x\", \"between\", \"around\"],\r\n                  allTypes = [\"-x\", \"between\", \"around\", \"-y\"];\r\n\r\n            //===> Check if the Value has an option with the same type as the target value <===//\r\n            const itHasType = allTypes.some(type => current_val.includes(type)),\r\n                  align_type = xTypes.some(type => target.getAttribute('name').includes(type)) ? \"x\" : \"y\",\r\n                  foundedType = xTypes.some(type => current_val.includes(type)) ? \"x\" : \"y\";\r\n\r\n            //===> if the Value has an Option and the option type is the same as the target <===//\r\n            if (itHasType && align_type === foundedType) {\r\n                //===> Loop on Values <===//\r\n                current_values.forEach(current_value => {\r\n                    //===> if the Founded Type is the same is the Value, Replace the Value <===//\r\n                    if (current_value.includes(align_type)) {\r\n                        align_val = align_val.replace(current_value, target.value);\r\n                    }\r\n                });\r\n            }\r\n            //===> if its a new Value add it <===//\r\n            else {\r\n                align_val += ` ${target.value}`;\r\n            }\r\n\r\n            //===> Return new Value <===//\r\n            return onChange(align_val.trim());\r\n        },\r\n\r\n        //===> Reset Value Method <===//\r\n        reset_align = (clicked) => onChange(\"align-reset\");\r\n\r\n        //===> Output <===//\r\n        return (<div className='components-flex-item flex-alignment-btns'>\r\n            {/*===> Label <===*/}\r\n            <div className={\"flexbox align-between mb-5 align-center-y\"}>\r\n                <label className='fs-13 weight-bold'>{label}</label>\r\n                <button type=\"button\" data-value=\"\" title=\"Reset\" className='btn tiny bg-transparent fs-12 square far fa-redo' onClick={reset_align}></button>\r\n            </div>\r\n            {/*===> Counter Control <===*/}\r\n            <div className={\"flexbox align-between\"}>\r\n                {/*===> Radio Buttons <===*/}\r\n                <div className=\"col-auto pdx-5 border-1 border-solid border-alpha-15 radius-sm\">\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name='flex-align-x' checked={value.includes(\"align-start-x\")} value={\"align-start-x\"} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span title=\"Start\" className={`${button_style} pxi-align-x-start`}></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name='flex-align-x' checked={value.includes(\"align-center-x\")} value={\"align-center-x\"} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span className={`${button_style} pxi-align-x-center`} title=\"Center\"></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name='flex-align-x' checked={value.includes(\"align-between\")} value={\"align-between\"} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span className={`${button_style} pxi-align-x-between`} title=\"Between\"></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name='flex-align-x' checked={value.includes(\"align-around\")} value={\"align-around\"} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span className={`${button_style} pxi-align-x-around`} title=\"Around\"></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name='flex-align-x' checked={value.includes(\"align-end-x\")} value={\"align-end-x\"} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span className={`${button_style} pxi-align-x-end`} title=\"Around\"></span>\r\n                    </OptionControl>\r\n                </div>\r\n                {/*===> Radio Buttons <===*/}\r\n                <div className=\"col-auto pdx-5 border-1 border-solid border-alpha-15 radius-sm\">\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name='flex-align-y' checked={value.includes(\"align-start-y\")} value={\"align-start-y\"} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span className={`${button_style} pxi-align-y-start`} title=\"Start\"></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name='flex-align-y' checked={value.includes(\"align-center-y\")} value={\"align-center-y\"} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span className={`${button_style} pxi-align-y-center`} title=\"Center\"></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name='flex-align-y' checked={value.includes(\"align-end-y\")} value={\"align-end-y\"} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span className={`${button_style} pxi-align-y-end`} title=\"End\"></span>\r\n                    </OptionControl>\r\n                </div>\r\n            </div>\r\n            {/*===> Counter Control <===*/}\r\n        </div>)\r\n    }\r\n}","/*\r\n * ===> 01 - WordPress Modules\r\n * ===> 02 - Phenix Background\r\n * ===> 03 - Buttons Creator\r\n * ===> 04 - Component Output\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport { __ } from '@wordpress/i18n';\r\nimport {Component} from '@wordpress/element';\r\nimport {SelectControl} from '@wordpress/components';\r\n\r\n//====> Phenix Modules <====//\r\nimport MediaUploader from '../uploader';\r\n\r\n//===> Phenix Background <===//\r\nexport default class PhenixBackground extends Component {\r\n    //===> States <===//\r\n    state = {\r\n        colors : [\r\n            \"fas fa-redo tx-align-center\",\r\n\r\n            \"bg-inherit\",\r\n            \"bg-transparent\",\r\n            \"bg-primary\",\r\n            \"bg-primary-dark\",\r\n            \"bg-secondary\",\r\n            \"bg-secondary-dark\",\r\n            \"bg-gray\",\r\n            \"bg-dark\",\r\n            \"bg-white\",\r\n            \"bg-success\",\r\n            \"bg-danger\",\r\n            \"bg-warning\",\r\n            \"bg-info\",\r\n\r\n            \"bg-offwhite-primary\",\r\n            \"bg-offwhite-secondary\",\r\n            \"bg-offwhite-info\",\r\n            \"bg-offwhite-success\",\r\n            \"bg-offwhite-danger\",\r\n            \"bg-offwhite-warning\",\r\n\r\n            \"bg-offwhite-smoke\",\r\n            \"bg-offwhite-gray\",\r\n            \"bg-offwhite-snow\",\r\n            \"bg-offwhite-honeydew\",\r\n            \"bg-offwhite-aliceblue\",\r\n            \"bg-offwhite-ghost\",\r\n            \"bg-offwhite-seashell\",\r\n            \"bg-offwhite-beige\",\r\n            \"bg-offwhite-oldlace\",\r\n            \"bg-offwhite-floral\",\r\n            \"bg-offwhite-antique\",\r\n            \"bg-offwhite-linen\",\r\n            \"bg-offwhite-lavenderblush\",\r\n\r\n            \"bg-alpha-05\",\r\n            \"bg-alpha-10\",\r\n            \"bg-alpha-15\",\r\n            \"bg-alpha-25\",\r\n            \"bg-alpha-50\",\r\n            \"bg-alpha-75\",\r\n\r\n            \"bg-facebook\",\r\n            \"bg-twitter\",\r\n            \"bg-youtube\",\r\n            \"bg-instagram\",\r\n            \"bg-snapchat\",\r\n            \"bg-whatsapp\",\r\n            \"bg-pinterest\",\r\n            \"bg-linkedin\",\r\n            \"bg-behance\",\r\n            \"bg-dribbble\",\r\n            \"bg-flicker\",\r\n        ],\r\n        gradients: [\r\n            \"bg-grade-primary\",\r\n            \"bg-grade-secondary\",\r\n            \"bg-grade-warning\",\r\n            \"bg-grade-danger\",\r\n            \"bg-grade-success\",\r\n            \"bg-grade-water\",\r\n            \"bg-grade-ice\",\r\n            \"bg-grade-fire\",\r\n            \"bg-grade-purple\"\r\n        ],\r\n        rotation : [\r\n            'bg-grade-0',\r\n            'bg-grade-45',\r\n            'bg-grade-90',\r\n            'bg-grade-120',\r\n            'bg-grade-120n',\r\n            'bg-grade-90n',\r\n            'bg-grade-45n',\r\n            'bg-grade-180',\r\n        ],\r\n        placeholder : \"https://via.placeholder.com/480x200.webp?text=Example\",\r\n    }\r\n    //===> Render <===//\r\n    render () {\r\n        //===> Properties <===//\r\n        const {\r\n            type,\r\n            value,\r\n            label,\r\n            rotate,\r\n            colorsOnly,\r\n            isSmall,\r\n            placeholder,\r\n            onChange\r\n        } = this.props;\r\n\r\n        //===> Returned Value <===//\r\n        let options = {\r\n            type: type,\r\n            rotate: rotate,\r\n            value: value || \"\",\r\n        };\r\n\r\n        //===> Set Type <===//\r\n        const set_type = type => {\r\n            //===> Set Value <===//\r\n            options.type = type;\r\n\r\n            //===> change value <===//\r\n            if (options.type === 'image') {\r\n                options.value = this.state.placeholder;\r\n            } else {\r\n                options.value = \"\";\r\n            }\r\n\r\n            //===> Return Options <===//\r\n            return onChange(options);\r\n        };\r\n\r\n        //===> Set Type <===//\r\n        const set_rotate = rotate => {\r\n            //===> Set Value <===//\r\n            options.rotate = rotate;\r\n\r\n            //===> change value <===//\r\n            if (options.type !== 'gradient') options.value = \"\";\r\n\r\n            //===> Return Options <===//\r\n            return onChange(options);\r\n        };\r\n\r\n        //===> Set Background <===//\r\n        const setBackground = clicked => {\r\n            //===> Get Value <===//\r\n            let button = clicked.target,\r\n                value  = button?.getAttribute('data-value');\r\n\r\n            //===> Colors & Gradients <===//\r\n            if (type !== 'image') {options.value = value;}\r\n            //===> Image Type <===//\r\n            else {options.value = clicked.url;}\r\n\r\n            //===> Return Options <===//\r\n            return onChange(options);\r\n        };\r\n\r\n        //===> Buttons Creator <===//\r\n        const makeButtons = (list, type) => {\r\n            let output = [];\r\n            //===> for each item <===//\r\n            for (let index = 0; index < list.length; index++) {\r\n                //===> Get Value <===//\r\n                const name = list[index];\r\n                let title = \"\",\r\n                    isColor = !name.includes(\"fa-\");\r\n\r\n                //===> Convert to Title <===//\r\n                if (isColor) {\r\n                    title = list[index].replace('bg-', '').replace('-', ' ');\r\n    \r\n                    //===> UpperCase Title <===//\r\n                    title = title.replace(/^\\w/, function(c) {\r\n                        return c.toUpperCase();\r\n                    });\r\n                } else title = \"Reset\";\r\n\r\n                output.push(<button key={`${name.replaceAll(\" \", \"-\")}`} onClick={setBackground} title={title} data-value={isColor ? name : \"\"} className={`${isColor ? name : `${name} color-gray fs-12`} col reset-button ${value === name ? 'px-active' : \"\"}`} style={{\"width\":\"30px\",\"height\":\"16px\",\"borderRadius\":\"16px\"}}></button>);\r\n            }\r\n            //===> Return Buttons <===//\r\n            return output;\r\n        };\r\n\r\n        //===> Colors Panel <===//\r\n        const showPanel = clicked => {\r\n            let button  = clicked.target,\r\n                wrapper = Phenix(button).ancestor('.px-gb-component'),\r\n                panel   = wrapper.querySelector(\".options-list\");\r\n\r\n            //=== Show/Hide Panel ===//\r\n            if (panel) {\r\n                Phenix(button).toggleClass(\"px-active\");\r\n                if (isSmall) {\r\n                    Phenix(wrapper).toggleClass(\"overlay-panel\")\r\n                    Phenix(panel).toggleClass(\"px-active\").fadeToggle(300, 0, \"flex\");\r\n                } else {\r\n                    Phenix(panel).toggleClass(\"px-active\").slideToggle(300, 0, \"flex\");\r\n                };\r\n            }\r\n        };\r\n\r\n        //===> Component Design <===//\r\n        return (\r\n            <div className={`px-gb-component${isSmall ? \"\":\" position-rv \"}${label ? \"mb-15\" : \"\"}`}>\r\n                {/*===> Toggle Button <===*/}\r\n                {label ? <label className='mb-10 tx-UpperCase fs-13'>{label}</label> : null}\r\n                {/*===> Group <===*/}\r\n                <div className='overflow-hidden form-control small flexbox border-alpha-25 mb-5 tx-align-start radius-md align-center-y pdx-0 flow-nowrap'>\r\n                    {/*===> Panel Trigger */}\r\n                    <button onClick={showPanel} className={`w-max-150 fs-13 col h-min-100 reset-button options-toggle flexbox flow-nowrap align-between align-center-y pdx-10 divider-e`} type=\"button\">\r\n                        {type !== \"image\" ? <>\r\n                            <span className={`me-5 radius-circle inline-block ${value?.length > 0 ? value : \"bg-inherit\"}`} style={{\"width\": \"17px\", \"height\": \"17px\"}}></span>\r\n                            <span className='col tx-nowrap pde-5 tx-capitalize'>{value?.length > 0 ? value.replaceAll(\"-\", \" \").replace(\"bg\",\"\") : placeholder ? placeholder : \"Default\"}</span>\r\n                        </> : <>\r\n                        <span className={`me-5 radius-circle inline-block`} style={{\"width\": \"22px\", \"height\": \"22px\", \"backgroundImage\": `url(${value})`, \"backgroundSize\": \"cover\", \"backgroundPosition\": \"center\"}}></span>\r\n                            <span className='col tx-nowrap pde-5'>{placeholder ? placeholder : __(\"Replace\", \"phenix\")}</span>\r\n                        </>}\r\n                        {!isSmall ? <i className='fas fa-pencil fs-12 color-gray'></i> : null}\r\n                    </button>\r\n                    {/*===> Type Select <===*/}\r\n                    {!colorsOnly ? \r\n                    <SelectControl key=\"bg-type\" value={type || \"\"} onChange={set_type} options={[\r\n                        { label: 'color',   value: 'color' },\r\n                        { label: 'image',   value: 'image' },\r\n                        { label: 'gradient',   value: 'gradient' },\r\n                    ]}/>\r\n                    : null}\r\n                </div>\r\n                {/*===> Panel <===*/}\r\n                <div className={`flexbox options-list align-between ${type !== \"image\" ? 'pd-15 bg-white border-1 border-solid border-alpha-20 radius-md radius-bottom' : 'pdt-5'} hidden fluid`} style={{gap:\"10px\"}}>\r\n                    {type === \"color\" ? makeButtons(this.state.colors) : type === \"gradient\" ? makeButtons(this.state.gradients) : null}\r\n                    {type === \"image\" ? <MediaUploader key=\"upload-file\" value={!value ? this.state.placeholder : value} setValue={setBackground}></MediaUploader> : null}\r\n                    {/*===> Rotation Select <===*/}\r\n                    {type === \"gradient\" ? <div className='divider-t pdt-15 col-12'>\r\n                        <SelectControl label={`${_(\"Rotation\", \"phenix\")}`} key=\"gradient-direction\" value={rotate || \"\"} onChange={set_rotate} options={[\r\n                            { label: __('Default' ,\"phenix\"), value: '' },\r\n                            { label: __('45 Degree' ,\"phenix\"), value: 'bg-grade-45' },\r\n                            { label: __('-45 Degree' ,\"phenix\"), value: 'bg-grade-45n' },\r\n                            { label: __('90 Degree' ,\"phenix\"), value: 'bg-grade-90' },\r\n                            { label: __('-90 Degree' ,\"phenix\"), value: 'bg-grade-90n' },\r\n                            { label: __('120 Degree' ,\"phenix\"), value: 'bg-grade-120' },\r\n                            { label: __('-120 Degree' ,\"phenix\"), value: 'bg-grade-120n' },\r\n                            { label: __('180 Degree' ,\"phenix\"), value: 'bg-grade-180' },\r\n                            { label: __('-180 Degree' ,\"phenix\"), value: 'bg-grade-180n' },\r\n                        ]}/>\r\n                    </div> : null}\r\n                    {/*===> Rotation Select <===*/}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","/*\r\n * ===> 01 - WordPress Modules\r\n * ===> 02 - Phenix Background\r\n * ===> 03 - Buttons Creator\r\n * ===> 04 - Component Output\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport {Component} from '@wordpress/element';\r\n\r\n//===> Phenix Background <===//\r\nexport default class PhenixColors extends Component {\r\n    render () {\r\n        //===> Properties <===//\r\n        const {\r\n            value,\r\n            label,\r\n            isSmall,\r\n            placeholder,\r\n            onChange\r\n        } = this.props;\r\n\r\n        //===> Colors List <===//\r\n        const pxPallete = [\r\n            \"color-inherit\",\r\n            \"color-transparent\",\r\n            \"color-primary\",\r\n            \"color-primary-dark\",\r\n            \"color-secondary\",\r\n            \"color-secondary-dark\",\r\n            \"color-gray\",\r\n            \"color-dark\",\r\n            \"color-white\",\r\n            \"color-success\",\r\n            \"color-danger\",\r\n            \"color-warning\",\r\n            \"color-info\",\r\n            \"color-facebook\",\r\n            \"color-twitter\",\r\n            \"color-youtube\",\r\n            \"color-instagram\",\r\n            \"color-snapchat\",\r\n            \"color-whatsapp\",\r\n            \"color-pinterest\",\r\n            \"color-linkedin\",\r\n            \"color-behance\",\r\n            \"color-dribbble\",\r\n            \"color-flicker\",\r\n            \"fas fa-redo tx-align-center\"\r\n        ];\r\n\r\n        //===> Set Color <===//\r\n        const setColor = clicked => {\r\n            //===> Get Value <===//\r\n            let button = clicked.target,\r\n                value  = button.getAttribute('data-value');\r\n            //===> Return Options <===//\r\n            return onChange(value);\r\n        };\r\n\r\n        //===> Buttons Creator <===//\r\n        const makeButtons = (list) => {\r\n            let output = [];\r\n            //===> for each item <===//\r\n            for (let index = 0; index < list.length; index++) {\r\n                //===> Get Value <===//\r\n                const name = list[index];\r\n                let title = \"\",\r\n                    isColor = !name.includes(\"fa-\");\r\n\r\n                //===> Convert to Title <===//\r\n                if (isColor) {\r\n                    title = list[index].replace('color-', '').replace('-', ' ');\r\n    \r\n                    //===> UpperCase Title <===//\r\n                    title = title.replace(/^\\w/, function(c) {\r\n                        return c.toUpperCase();\r\n                    });\r\n                } else title = \"Reset\";\r\n\r\n                output.push(<button key={`${name.replaceAll(\" \", \"-\")}`} onClick={setColor} title={title} data-value={isColor ? name : \"\"} className={`${isColor ? name.replace('color-','bg-') : `${name} color-gray fs-12`} reset-button ${value === name ? 'px-active' : null}`} style={{\"width\":\"30px\",\"height\":\"16px\",\"borderRadius\":\"16px\"}}></button>);\r\n            }\r\n\r\n            //===> Return Buttons <===//\r\n            return output;\r\n        };\r\n\r\n        //===> Colors Panel <===//\r\n        const showPanel = clicked => {\r\n            let button = clicked.target,\r\n                wrapper = Phenix(button).ancestor('.px-gb-component'),\r\n                panel  = Phenix(button).next(\".options-list\");\r\n            //=== Show/Hide Panel ===//\r\n            if (panel) {\r\n                Phenix(button).toggleClass(\"px-active\");\r\n                if (isSmall) {\r\n                    Phenix(wrapper).toggleClass(\"overlay-panel\")\r\n                    Phenix(panel).toggleClass(\"px-active\").fadeToggle(300, 0, \"flex\");\r\n                } else {\r\n                    Phenix(panel).toggleClass(\"px-active\").slideToggle(300, 0, \"flex\");\r\n                };\r\n            }\r\n        };\r\n\r\n        //===> Component Output <===//\r\n        return (\r\n            <div className={`px-gb-component${isSmall ? \"\":\" position-rv \"}${label ? \"mb-15\" : \"\"}`}>\r\n                {/*===> Toggle Button <===*/}\r\n                {label ? <label className='mb-10 tx-UpperCase fs-13'>{label}</label> : null}\r\n                {/*===> Trigger <===*/}\r\n                <button onClick={showPanel} className={`options-toggle form-control small flexbox align-between align-center-y radius-md tx-align-start border-alpha-25 mb-5`} type=\"button\">\r\n                    <span className={`me-5 radius-circle inline-block ${value?.length > 0 ? value.replace(\"color-\",\"bg-\") : \"bg-inherit\"}`} style={{\"width\": \"20px\", \"height\": \"20px\"}}></span>\r\n                    <span className='col'>{value?.length > 0 && !placeholder ? value?.replaceAll(\"-\", \" \").replace(\"color\",\"\") : placeholder ? placeholder : \"Default\"}</span>\r\n                    {!isSmall ? <i className='fas fa-pencil'></i> : null}\r\n                </button>\r\n                {/*===> Panel <===*/}\r\n                <div className='flexbox options-list align-between pd-20 bg-white border-1 border-solid border-alpha-20 radius-md radius-bottom hidden fluid' style={{gap:\"10px\"}}>\r\n                    {makeButtons(pxPallete)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport {Component} from '@wordpress/element';\r\n\r\n//===> Media Uploader <===//\r\nexport default class PhenixNumber extends Component {\r\n    render () {\r\n        //===> Properties <===//\r\n        const {label, value, min, max, steps, icon, onChange, name} = this.props;\r\n\r\n        //===> Set Value <===//\r\n        const setNumber = (changed) => {\r\n            //===> Get Elements <===//\r\n            let input  = changed.target,\r\n                minNum  = parseInt(min) || 0,\r\n                maxNum  = parseInt(max) || 0;\r\n\r\n            //===> Get Input Element <===//\r\n            let newVal = parseInt(input.value),\r\n                checkVal = (newVal >= minNum || newVal <= maxNum) ? newVal : 0;\r\n\r\n            //===> Set Data <===//\r\n            return onChange(checkVal);\r\n        },\r\n\r\n        //===> Increase Number <===//\r\n        IncreaseNum = (clicked) => {\r\n            //===> Get Elements <===//\r\n            let button  = clicked.target,\r\n                wrapper = Phenix(button).ancestor(\".px-counter-input\"),\r\n                maxNum  = parseInt(max) || 9999999,\r\n                step    = steps ? parseInt(steps) : 1;\r\n\r\n            //===> Get Input Element <===//\r\n            let input  = wrapper.querySelector('input[type=\"number\"]'),\r\n                newVal = parseInt(input.value) + step;\r\n\r\n            //===> Set Data <===//\r\n            return onChange(newVal < maxNum || newVal === maxNum ? newVal : maxNum);\r\n        },\r\n\r\n        //===> Decrease Number <===//\r\n        DecreaseNum = (clicked) => {\r\n            //===> Get Elements <===//\r\n            let button  = clicked.target,\r\n                wrapper = Phenix(button).ancestor(\".px-counter-input\"),\r\n                minNum  = parseInt(min) || 0,\r\n                step    = steps ? steps : 1;\r\n\r\n            //===> Get Input Element <===//\r\n            let input = wrapper.querySelector('input[type=\"number\"]'),\r\n                newVal = parseInt(input.value) - step;\r\n\r\n            //===> Set Data <===//\r\n            return onChange(newVal > minNum || newVal === minNum ? newVal : minNum);\r\n        };\r\n\r\n        //===> Output <===//\r\n        return (<div className='flexbox flex-gap-fix align-between flow-column'>\r\n            {/*===> Label <===*/}\r\n            <label className='components-input-control__label tx-uppercase weight-bold'>{label}</label>\r\n            {/*===> Counter Control <===*/}\r\n            <div className={\"px-counter-input position-rv fluid \" + (icon ? icon : \"\")}>\r\n                {/*===> Button <===*/}\r\n                {!icon ? <button onClick={DecreaseNum} className='btn square small fs-13 increase-btn far fa-minus position-ab pos-start-0 pos-top-0 divider-e icon-fix'></button> : \"\"}\r\n\r\n                {/*===> Number Input <===*/}\r\n                <input name={name} type=\"number\" min={min} max={max} value={parseInt(value) ? parseInt(value) : 0} className={\"form-control small radius-sm reset-appearance\"+(!icon ? \" tx-align-center\" : \"\")} onChange={setNumber} />\r\n\r\n                {/*===> Button <===*/}\r\n                <div className='position-ab pos-end-0 pos-bottom-0 flexbox'>\r\n                    <button onClick={IncreaseNum} className='btn square small fs-13 increase-btn far fa-plus divider-s icon-fix'></button>\r\n                    {icon ? <button onClick={DecreaseNum} className='btn square small fs-13 increase-btn far fa-minus divider-s icon-fix'></button> : \"\"}\r\n                </div>\r\n            </div>\r\n            {/*===> Counter Control <===*/}\r\n        </div>)\r\n    }\r\n}","/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport { __ } from '@wordpress/i18n';\r\n\r\n//===> Script Runner <===//\r\nconst PhenixComponentsBuilder = () => {\r\n    //===> Create Time Loop to Find the Elements <===//\r\n    let finder_counter = 0,\r\n    element_finder = setInterval(() => {\r\n        //===> Get Elements <===//\r\n        let elements = document.querySelectorAll('.pds-tm-control');\r\n\r\n        //===> Loop Through Elements <===//\r\n        elements.forEach(element => {\r\n            //===> Define Element Data <===//\r\n            let class_names = element.classList;\r\n\r\n            //===> for Selects <===//\r\n            if (class_names.contains('px-select')) Phenix(element).select();\r\n        });\r\n\r\n        //===> Increase Counter <===//\r\n        finder_counter++;\r\n\r\n        //===> Clear Timer Loop <===//\r\n        if (finder_counter > 30) clearInterval(element_finder);\r\n    }, 500);\r\n}\r\n\r\nexport default PhenixComponentsBuilder;","//====> .Dependencies. <====//\r\nimport {Component} from '@wordpress/element';\r\nimport { useState, useEffect } from '@wordpress/element';\r\n\r\n//===> Phenix Form Control <===//\r\nexport default class OptionControl extends Component {\r\n    //===> States <===//\r\n    state = {};\r\n\r\n    render () {\r\n        //===> Properties <===//\r\n        const {\r\n            name,\r\n            type,\r\n            value,\r\n            checked,\r\n            onChange,\r\n            children,\r\n            required,\r\n            className\r\n        } = this.props;\r\n\r\n        //===> Change Value <===//\r\n        const setValue = (event) => {\r\n            return onChange(event.target);\r\n        };\r\n\r\n        //===> Define Data <===//\r\n        let options = `fs-12 option-control flexbox align-center-y`,\r\n            attributes = {onChange: setValue};\r\n\r\n        //===> Custom Classes <===//\r\n        if (className) options += ` ${className}`;\r\n\r\n        //===> Check if is On <===//\r\n        attributes.defaultChecked = checked;\r\n\r\n        //===> add Options <===//\r\n        if (required) attributes.required = true;\r\n        if (value) attributes.value = value;\r\n\r\n        //===> Render Component <===//\r\n        return (<label className={options} data-type={type?.includes(\"switch\") ? \"switch\" : type.includes(\"button\") ? \"button\" : type}>\r\n            <input type={type?.replace(\"switch-\",\"\").replace(\"button-\", \"\")} name={name} {...attributes} />\r\n            {type?.includes(\"switch\") ? <span className=\"switch\"></span> : null}\r\n            {children}\r\n        </label>)\r\n    }\r\n}","/*\r\n * ===> 01 - WordPress Modules\r\n * ===> 02 - Phenix Background\r\n * ===> 03 - Buttons Creator\r\n * ===> 04 - Component Output\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport { __ } from '@wordpress/i18n';\r\nimport {Component} from '@wordpress/element';\r\n\r\n//===> Phenix Background <===//\r\nexport default class ScreensTabs extends Component {\r\n    //===> States <===//\r\n    state = {screen : this.props.sm ? \"sm\" : \"md\"};\r\n\r\n    render () {\r\n        //===> Properties <===//\r\n        const {sm, lg, xl, md} = this.props;\r\n        let screenContent = this.props[`${this.state.screen}`];\r\n\r\n        //===> Options Changer <===//\r\n        const changeTab = (clicked) => {\r\n            //===> Option Data <===//\r\n            let element = clicked.target;\r\n            //===> Show Options <===//\r\n            this.setState({screen: element.getAttribute('data-options')});\r\n        };\r\n\r\n        //===> Component Output <===//\r\n        return (\r\n            <div className='px-gb-tabs'>\r\n                {/*===> Tabs Buttons <===*/}\r\n                <div className='options-tabs px-group borderd-group divider-b border-alpha-15 mb-20'>\r\n                    {this.props.sm ? <button key=\"mobile\" onClick={changeTab} className={`btn square tiny ${this.state.screen !== \"sm\" ? \"bg-alpha-05\" : \"primary\"} col far fa-mobile`} title={__(\"Mobile Screens\", \"phenix\")}  data-options=\"sm\"></button> : null}\r\n                    {this.props.md ? <button key=\"tablet\" onClick={changeTab} className={`btn square tiny ${this.state.screen !== \"md\" ? \"bg-alpha-05\" : \"primary\"} col far fa-tablet`} title={__(\"Tablet Screens\", \"phenix\")}  data-options=\"md\"></button> : null}\r\n                    {this.props.lg ? <button key=\"laptop\" onClick={changeTab} className={`btn square tiny ${this.state.screen !== \"lg\" ? \"bg-alpha-05\" : \"primary\"} col far fa-laptop`} title={__(\"Desktop Screens\", \"phenix\")} data-options=\"lg\"></button> : null}\r\n                    {this.props.xl ? <button key=\"desktop\" onClick={changeTab} className={`btn square tiny ${this.state.screen !== \"xl\" ? \"bg-alpha-05\" : \"primary\"} col far fa-desktop`} title={__(\"xLarge Screens\", \"phenix\")}  data-options=\"xl\"></button> : null}\r\n                </div>\r\n                {/*===> Screen <====*/}\r\n                <div className={`flexbox ${this.state.screen}-options`}>{screenContent(this.state.screen)}</div>\r\n            </div>\r\n        )\r\n    }\r\n}","/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport { __ } from '@wordpress/i18n';\r\nimport apiFetch from '@wordpress/api-fetch';\r\nimport {Component} from '@wordpress/element';\r\nimport { PanelBody } from '@wordpress/components';\r\n\r\n//====> Phenix Modules <====//\r\nimport OptionControl from './switch';\r\nimport FlexAlignment from './alignment';\r\nimport PhenixColor from './colors/text';\r\nimport PhenixBackground from './colors/background';\r\nimport PhenixComponentsBuilder from './panel-scripts';\r\n\r\n//===> Media Uploader <===//\r\nexport default class TemplateOptions extends Component {\r\n    //===> States <===//\r\n    state = {post_types : this.props.types || [], taxonomies: this.props.taxonomies || []};\r\n\r\n    //===> Component Rendered Hook <===//\r\n    componentDidMount() {\r\n        //===> Create Time Loop to Find the Elements <===//\r\n        PhenixComponentsBuilder();\r\n    };\r\n\r\n    //===> Render <===//\r\n    render () {\r\n        //===> Properties <===//\r\n        const {options, features, meta, onChange, types, taxonomies} = this.props;\r\n\r\n        //===> Fetch Post Types <===//\r\n        if (this.state.post_types.length < 1) apiFetch({path: 'wp/v2/types'}).then(post_types => {\r\n            //===> Define State <===//\r\n            let new_state = {...this.state};\r\n\r\n            //===> Get Current Active Types <===//\r\n            for (const [key, value] of Object.entries(post_types)) {\r\n                //===> Exclude the Core Types <===//\r\n                if (!['attachment', 'nav_menu_item', 'wp_block', 'wp_navigation', 'wp_template', 'wp_template_part'].includes(key)) {\r\n                    new_state.post_types.push({\"value\":key, \"label\":value.name});\r\n                }\r\n            }\r\n\r\n            //===> Set State <===//\r\n            this.setState({...new_state});\r\n        });\r\n\r\n        //===> Fetch Taxonomies <===//\r\n        if (this.state.taxonomies.length < 1 && this.state.post_types.length > 0) apiFetch({path: 'wp/v2/taxonomies'}).then(taxonomies => {\r\n            //===> Define Types <===//\r\n            let new_state = {...this.state};\r\n\r\n            //===> Get Current Active Types <===//\r\n            for (const [key, value] of Object.entries(taxonomies)) {\r\n                //===> Exclude the Core Types <===//\r\n                if (!['nav_menu', 'post_tag'].includes(key)) {\r\n                    new_state.taxonomies.push({\"value\":key, \"label\":value.name});\r\n                }\r\n            }\r\n\r\n            //===> Set the new List if its Deferent <===//\r\n            this.setState({...new_state});\r\n        });\r\n\r\n        //===> Define Elements Lists <===//\r\n        let panels = [], controls = [], features_panels = [];\r\n\r\n        //===> Set Value <===//\r\n        const set_value = (control) => {\r\n            //===> Get Current Value <===//\r\n            let current = {\"options\": options || {}, \"features\": features || {}},\r\n                options_trail = control.name.split(':'),\r\n                trail_length = options_trail.length,\r\n                zero = options_trail[0];\r\n\r\n            //===> Define the Value <===//            \r\n            let value;\r\n            //===> Check for Array <===//\r\n            if (control.tagName === \"SELECT\" && control.getAttribute('multiple') !== null) {\r\n                //===> Get Multiple Value <===//\r\n                let values = Phenix(control).ancestor('.px-select').getAttribute('data-value').split(','),\r\n                    array_val = [];\r\n                //===> Get Current Values <===//\r\n                values.forEach(val => val !== \"\" ? array_val.push(val) : null);\r\n                //===> Set Array Value <===//\r\n                value = array_val;\r\n            }\r\n            //===> for Check-Boxes <===//\r\n            else if (control.getAttribute('type') === 'checkbox' || control.getAttribute('type') === 'radio') { value = control.checked; }\r\n            //===> Get Normal Value <===//\r\n            else { value = control.value; }\r\n\r\n            //===> set the Value for Level 01 Options <===//\r\n            if (trail_length === 2) current[`${zero}`][`${options_trail[1]}`] = value;\r\n\r\n            //===> Manual Loop on the Options Trail <===//\r\n            else if (trail_length === 3) {\r\n                //====> Create Options Object <====//\r\n                if (!current[`${zero}`][`${options_trail[1]}`]) current[`${zero}`][`${options_trail[1]}`] = {};\r\n                //===> Set the Value <===//\r\n                current[`${zero}`][`${options_trail[1]}`][`${options_trail[2]}`] = value;\r\n            }\r\n            //===> Manual Loop on the Options Trail <===//\r\n            else if (trail_length === 4) {\r\n                //====> Create Options Object <====//\r\n                if (!current[`${zero}`][`${options_trail[1]}`]) current[`${zero}`][`${options_trail[1]}`] = {};\r\n                if (!current[`${zero}`][`${options_trail[1]}`][`${options_trail[2]}`]) current[`${zero}`][`${options_trail[1]}`][`${options_trail[2]}`] = {};\r\n                //===> Set the Value <===//\r\n                current[`${zero}`][`${options_trail[1]}`][`${options_trail[2]}`][`${options_trail[3]}`] = value;\r\n            };\r\n\r\n            //===> Set Data <===//\r\n            return onChange({...current});\r\n        };\r\n\r\n        //===> Taxonomies Controls <===//\r\n        const post_types_control = (option, option_meta, group) => {\r\n            //===> Create Post Types Select <===//\r\n            if (this.state.post_types.length > 0) {\r\n                //===> Form Control <===//\r\n                return <div key={option} className={`mb-15 col-${option_meta.size ? option_meta.size : '12'}`}>\r\n                    {/*===> Control Label <===*/}\r\n                    <label className='mb-5 tx-capitalize'>{option.replace('-', ' ')}</label>\r\n                    {/*===> Control Element <===*/}\r\n                    <div className='px-select'>\r\n                        <select name={`${group}:${option}`} data-search=\"1\" defaultValue={options?.hasOwnProperty(`${option}`) ? options[`${option}`] : option_meta.value} multiple={option_meta.multiple ? option_meta.multiple : false} onChange={event => set_value(event.target)} className='px-select pds-tm-control form-control small radius-md'>\r\n                            {this.state.post_types.map(post_type => <option key={post_type.value} value={post_type.value}>{post_type.label}</option>)}\r\n                        </select>\r\n                    </div>\r\n                </div>;\r\n            } else {\r\n                return <div key={option} className={`col-${option_meta.size ? option_meta.size : '12'}`}>\r\n                    <div className=\"px-loading-inline form-control small radius-md overflow-hidden flexbox align-center\">{__(\"Loading\",\"phenix\")}</div>\r\n                </div>\r\n            }\r\n        };\r\n\r\n        //===> Post-Type Controls <===//\r\n        const post_taxonomies_control = (option, option_meta, group) => {\r\n            //===> Create Post Types Select <===//\r\n            if (this.state.taxonomies.length > 0) {\r\n                //===> Form Control <===//\r\n                return <div key={option} className={`mb-15 col-${option_meta.size ? option_meta.size : '12'}`}>\r\n                    {/*===> Control Label <===*/}\r\n                    <label className='mb-5 tx-capitalize'>{option.replace('-', ' ')}</label>\r\n                    {/*===> Control Element <===*/}\r\n                    <div className='px-select'>\r\n                        <select name={`${group}:${option}`} data-search=\"1\" defaultValue={options?.hasOwnProperty(`${option}`) ? options[`${option}`] : option_meta.value} multiple={option_meta.multiple ? option_meta.multiple : false} onChange={event => set_value(event.target)} className='px-select pds-tm-control form-control small radius-md'>\r\n                            {this.state.taxonomies.map(taxonomy => <option key={taxonomy.value} value={taxonomy.value}>{taxonomy.label}</option>)}\r\n                        </select>\r\n                    </div>\r\n                </div>;\r\n            } else {\r\n                return <div key={option} className={`col-${option_meta.size ? option_meta.size : '12'}`}>\r\n                    <div className=\"px-loading-inline form-control small radius-md overflow-hidden flexbox align-center\">{__(\"Loading\",\"phenix\")}</div>\r\n                </div>\r\n            }\r\n        };\r\n\r\n        //===> Array Controls <===//\r\n        const post_array_control = (option, option_meta, group) => {\r\n            //===> Form Control <===//\r\n            return <div key={option} className={`mb-15 col-${option_meta.size ? option_meta.size : '12'}`}>\r\n                {/*===> Control Label <===*/}\r\n                <label className='mb-5 tx-capitalize'>{option.replace('-', ' ')}</label>\r\n                {/*===> Control Element <===*/}\r\n                <div className='px-select'>\r\n                    <select name={`${group}:${option}`} data-search=\"1\" defaultValue={options?.hasOwnProperty(`${option}`) ? options[`${option}`] : \"\"} multiple={option_meta.multiple ? option_meta.multiple : false} onChange={event => set_value(event.target)} className='px-select pds-tm-control form-control small radius-md'>\r\n                        {option_meta.value.map(item => <option key={item.value} value={item.value}>{item.label}</option>)}\r\n                    </select>\r\n                </div>\r\n            </div>;\r\n        };\r\n\r\n        //===> Switch Buttons <===//\r\n        const switch_control = (option, option_meta, group) => {\r\n            let label = option.replace('-', ' ').toUpperCase();\r\n            //===> Label Correction <===//\r\n            if (option === 'status') label = `${__('Enable','phenix')} ${group.replace('-', ' ').replace('options:','')}`;\r\n\r\n            //===> Create Component <===//\r\n            return <div className={`mb-10 col-${option_meta.size ? option_meta.size : 12}`} key={`${option}`}>\r\n                <OptionControl name={`${group}:${option}`} checked={options?.hasOwnProperty(`${option}`) ? options[`${option}`] : option_meta.value} onChange={set_value} type='switch-checkbox' className='small me-5 tx-capitalize'>{label}</OptionControl>\r\n            </div>;\r\n        };\r\n\r\n        //===> Create the Template Meta Data <===//\r\n        if (meta.hasOwnProperty('options')) {\r\n            //===> Loop Through Template Options <===//\r\n            Object.entries(meta['options']).forEach(([option, option_meta]) => {\r\n                //===> Define Element <===//\r\n                let element;\r\n\r\n                //===> Create Post Types Select <===//\r\n                if (option_meta.type === \"post-type\") element = post_types_control(option, option_meta, 'options');\r\n\r\n                //===> Create Taxonomies Select <===//\r\n                if (option_meta.type === \"taxonomies\") element = post_taxonomies_control(option, option_meta, 'options');\r\n\r\n                //===> Create Switch Button <===//\r\n                if(option_meta.type === \"boolean\") element = switch_control(option, option_meta, 'options');\r\n\r\n                //===> Create Array Controls <===//\r\n                if(option_meta.type === \"select\") element = post_array_control(option, option_meta, 'options');\r\n\r\n                //====> Group of Options <====//\r\n                if (option_meta.type === \"options\") {\r\n                    //===> Define Sub Options <===//\r\n                    let sub_options = [];\r\n\r\n                    //===> Create Sub-Options <===//\r\n                    Object.entries(option_meta.value).forEach(([sub_option, sub_option_meta]) => {\r\n                        //====> for the Status Controller and any Switch Button <====//\r\n                        if (sub_option === 'status') sub_options.push(switch_control(sub_option, sub_option_meta, `options:${option}`));\r\n\r\n                        //====> for the Others Controllers <====//\r\n                        if (options?.hasOwnProperty(`${option}`) && options[`${option}`].hasOwnProperty('status')) {\r\n                            if (options[`${option}`].status === true) {\r\n                                //===> Create Post Types Select <===//\r\n                                if (sub_option_meta.type === \"post-type\") sub_options.push(post_types_control(sub_option, sub_option_meta, `options:${option}`));\r\n\r\n                                //===> Create Taxonomies Select <===//\r\n                                if (sub_option_meta.type === \"taxonomies\") sub_options.push(post_taxonomies_control(sub_option, sub_option_meta, `options:${option}`));\r\n\r\n                                //===> Create Switch Buttons <===//\r\n                                if (sub_option_meta.type === \"boolean\" && sub_option !== 'status') sub_options.push(switch_control(sub_option, sub_option_meta, `options:${option}`));\r\n                                \r\n                                //===> Create Array Controls <===//\r\n                                if (sub_option_meta.type === \"select\") sub_options.push(post_array_control(sub_option, sub_option_meta, `options:${option}`));\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    //===> Controls Group <===//\r\n                    element = <div key={option} className={`col-12`}>\r\n                        <div className='row gpx-10'>{sub_options}</div>\r\n                    </div>;\r\n                }\r\n\r\n                //===> Add the Element <===//\r\n                if (element) controls.push(element);\r\n            });\r\n\r\n            {/*===> Options Panel <===*/}\r\n            if(controls.length > 0) panels.push(<PanelBody key=\"template-options\" title={__(\"Template Options\", \"phenix\")} initialOpen={true}><div className='row gpx-10'>{controls}</div></PanelBody>)\r\n            {/*===> Features Panel <===*/}\r\n            if(features_panels.length > 0) panels.push(<PanelBody key=\"template-features\" title={__(\"Template Features\", \"phenix\")} initialOpen={true}><div className='row gpx-10'>{features_panels}</div></PanelBody>)\r\n        }\r\n\r\n        //===> Output <===//\r\n        return (<>{panels}</>);\r\n    }\r\n}","/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport {MediaUpload} from '@wordpress/block-editor';\r\nimport {Component} from '@wordpress/element';\r\n\r\n//===> Media Uploader <===//\r\nexport default class MediaUploader extends Component {\r\n    render () {\r\n        //===> Properties <===//\r\n        const {\r\n            label,\r\n            value,\r\n            size,\r\n            type,\r\n            setValue,\r\n            className,\r\n        } = this.props;\r\n\r\n        //===> Output <===//\r\n        return (<>\r\n            <MediaUpload onSelect={ setValue } value={value} render={({open}) => (\r\n                    <div className=\"mouse-pointer\" onClick={open}>\r\n                        {/* label */}\r\n                        {label ? <label className=\"mb-5\">{label}</label> : ''}\r\n                        {/* elements group */}\r\n                        <div className={`${className ? `${className}` : \"\"}`}>\r\n                            {size === 'small' ?\r\n                                <div className='flexbox align-center-y align-between pd-5 border-solid border-1 border-alpha-15 radius-sm'>\r\n                                    {!type || type === 'image' ? <img src={value} style={{\"maxHeight\": \"1.5rem\"}} /> : null}\r\n                                    <button key=\"change-media\" onClick={open} className=\"btn square primary tiny radius-sm fs-12 fas fa-upload\"></button>\r\n                                </div>\r\n                                :\r\n                                <div className='flexbox align-center-y align-between'>\r\n                                    {!type || type === 'image' ? <img src={value} className=\"radius-sm radius-top\" style={{\"maxWidth\": \"100%\", \"display\": \"block\"}} /> : null}\r\n                                    <button key=\"change-media\" onClick={open} className=\"btn fluid primary small radius-sm radius-bottom fs-13 far fa-camera btn-icon\">Select File</button>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        {/* //elements group */}\r\n                    </div>\r\n                )}\r\n            />\r\n        </>\r\n        )\r\n    }\r\n}","//====> WP Modules <====//\r\nimport { __ } from '@wordpress/i18n';\r\n\r\nimport {\r\n    PanelBody,\r\n    SelectControl,\r\n    ToggleControl,\r\n    TextControl,\r\n    RangeControl\r\n} from '@wordpress/components';\r\n\r\nimport {\r\n    useBlockProps,\r\n    InspectorControls\r\n} from '@wordpress/block-editor';\r\n\r\nimport { useState, useEffect } from '@wordpress/element';\r\nimport apiFetch from '@wordpress/api-fetch';\r\nimport ServerSideRender from '@wordpress/server-side-render';\r\n\r\n//====> Phenix Modules <====//\r\nimport ScreensTabs from \"../px-controls/tabs\";\r\nimport PhenixNumber from \"../px-controls/number\";\r\nimport OptionControl from '../px-controls/switch';\r\nimport TemplateOptions from '../px-controls/templates-meta';\r\nimport PhenixComponentsBuilder from '../px-controls/panel-scripts';\r\n\r\n//====> Edit Mode <====//\r\nexport default function Edit(props) {\r\n    //===> Get Properties <===//\r\n    const {attributes, setAttributes} = props;\r\n    const blockProps = useBlockProps();\r\n    const [state, set_state] = useState({\r\n        post_types: [],\r\n        taxonomies: [],\r\n        templates_meta: {},\r\n        template_list: [<option key={__(\"Default\", \"phenix\")} value=\"\">{__(\"Default\", \"phenix\")}</option>],\r\n    });\r\n\r\n    //===> Query Options <===//\r\n    const set_order = order => setAttributes({ order });\r\n    const set_post_type  = post_type  => setAttributes({ post_type });\r\n    const set_grid_mode = grid_mode => setAttributes({ grid_mode });\r\n    const set_per_page   = per_page   => setAttributes({ per_page });\r\n    const set_pagination = pagination => setAttributes({ pagination });\r\n    const set_template_part = changed => setAttributes({ template_part: changed.target.value });\r\n\r\n    const set_slider_mode = value => {\r\n        //===> Define Data <===//\r\n        let options = attributes.grid;\r\n\r\n        //===> Convert Grid to Slider <===//\r\n        if (options.state && value) options.state = false;\r\n        if (options.cols && parseInt(options.cols) < 1) options.cols = 1;\r\n\r\n        //===> Set Value <===//\r\n        setAttributes({slider_mode: value, grid: {...options}});\r\n    };\r\n\r\n    //===> Grid Options <===//\r\n    const set_grid_cols = value => {\r\n        //===> Define Data <===//\r\n        let grid_ops = attributes.grid;\r\n        //===> Set Value <===//\r\n        grid_ops.cols = value;\r\n        setAttributes({ grid: {...grid_ops} });\r\n    },\r\n\r\n    set_grid_cols_resp = (value, screen) => {\r\n        //===> Define Data <===//\r\n        let grid_ops = attributes.grid;\r\n        //===> Set Value <===//\r\n        grid_ops[`cols-${screen}`] = value;\r\n        setAttributes({ grid: {...grid_ops} });\r\n    },\r\n\r\n    set_grid_state = target => {\r\n        //==> Get Current <==//\r\n        let grid_ops = attributes.grid;\r\n\r\n        //==> Set Value <==//\r\n        grid_ops.state = target.checked;\r\n        console.log(grid_ops);\r\n        setAttributes({grid : {...grid_ops}});\r\n    };\r\n\r\n    //===> Grid Utilites <===//\r\n    const set_grid_flow = target => {\r\n        //==> Get Current <==//\r\n        let grid_ops = attributes.grid;\r\n\r\n        //==> Set Value <==//\r\n        grid_ops.flow = target.checked ? target.value : \"\";\r\n        setAttributes({grid : {...grid_ops}});\r\n    },\r\n\r\n    set_grid_masonry = target => {\r\n        //==> Get Current <==//\r\n        let grid_ops = attributes.grid;\r\n\r\n        //==> Set Value <==//\r\n        grid_ops.masonry = target.checked ? target.value : \"\";\r\n        setAttributes({grid : {...grid_ops}});\r\n    };\r\n\r\n    //===> Slider Options <===//\r\n    const set_slider_type = value => {\r\n        //==> Get Current <==//\r\n        let options = attributes.slider;\r\n\r\n        //==> Set Value <==//\r\n        options.type = value;\r\n        setAttributes({ slider : {...options} });\r\n    },\r\n\r\n    set_slider_steps = value => {\r\n        //==> Get Current <==//\r\n        let options = attributes.slider;\r\n\r\n        //==> Set Value <==//\r\n        options.steps = value;\r\n        setAttributes({ slider : {...options} });\r\n    },\r\n\r\n    set_slider_duration = value => {\r\n        //==> Get Current <==//\r\n        let options = attributes.slider;\r\n\r\n        //==> Set Value <==//\r\n        options.duration = value;\r\n        setAttributes({ slider : {...options} });\r\n    },\r\n\r\n    set_slider_speed = value => {\r\n        //==> Get Current <==//\r\n        let options = attributes.slider;\r\n\r\n        //==> Set Value <==//\r\n        options.speed = value;\r\n        setAttributes({ slider : {...options} });\r\n    },\r\n\r\n    set_slider_autoplay = value => {\r\n        //==> Get Current <==//\r\n        let options = attributes.slider;\r\n\r\n        //==> Set Value <==//\r\n        options.autoplay = value;\r\n        setAttributes({slider : {...options}});\r\n    },\r\n\r\n    set_slider_controls = value => {\r\n        //==> Get Current <==//\r\n        let options = attributes.slider;\r\n\r\n        //==> Set Value <==//\r\n        options.controls = value;\r\n        setAttributes({slider : {...options}});\r\n    },\r\n\r\n    set_slider_pagination = value => {\r\n        //==> Get Current <==//\r\n        let options = attributes.slider;\r\n\r\n        //==> Set Value <==//\r\n        options.pagination = value;\r\n        setAttributes({slider : {...options}});\r\n    };\r\n\r\n    //===> Responsive Options <===//\r\n    const responsive_options = (screen) => {\r\n        //===> Layout <===//\r\n        return <>\r\n            {/*===> Column <===*/}\r\n            <div className='col col-6 mb-15'>\r\n                <PhenixNumber label={__(\"Columns No.\", \"phenix\")} value={attributes.grid[`cols-${screen}`] || 0} onChange={value => set_grid_cols_resp(value, screen)} min={0} max={12}></PhenixNumber>\r\n            </div>\r\n            {/*===> // Column <===*/}\r\n        </>\r\n    };\r\n\r\n    //===> Set Phenix Components <===//\r\n    const setPhenixView = () => {\r\n        //===> Get View iFrame <===//\r\n        if (window.frames['editor-canvas']) {\r\n            //===> View Script <===//\r\n            let frameDoc = window.frames['editor-canvas'].document;\r\n            setTimeout(() => {\r\n                //===> Run Multimedia <===//\r\n                frameDoc.querySelectorAll(\".px-media\").forEach(element => Phenix(element).multimedia());\r\n\r\n                //===> Run Sliders <===//\r\n                frameDoc.querySelectorAll(\".px-slider:not(.splide)\").forEach(element => {\r\n                    element.classList.add('edit-mode');\r\n                    element.getAttribute('data-autoplay') ? element.setAttribute('data-autoplay', false) : null;\r\n                    Phenix(element).slider({autoplay: false});\r\n                    //===> Stretch Fix <===//\r\n                    let slider_element = element.querySelector(\".splide__list\");\r\n                    if (slider_element) slider_element.style.maxHeight = Phenix(slider_element).height();\r\n                });\r\n            }, 2000);\r\n        } else {\r\n        }\r\n        //===> Timeout for Loading <===//\r\n        setTimeout(() => {\r\n            //===> Get Elements <===//\r\n            let Sliders  = Phenix('.px-slider'),\r\n                MediaEls = Phenix(\".px-media\");\r\n\r\n            //===> Run Phenix Components <===//\r\n            if(MediaEls.length > 0) MediaEls.multimedia();\r\n            if(Sliders.length > 0) {\r\n                Sliders.forEach(slider => {\r\n                    slider.getAttribute('data-autoplay') ? slider.setAttribute('data-autoplay', false) : null;\r\n                });\r\n                Sliders.addClass('edit-mode').slider({autoplay: false});\r\n                //===> Stretch Fix <===//\r\n                Sliders.forEach(element => {\r\n                    let slider_element = element.querySelector(\".splide__list\");\r\n                    if (slider_element) slider_element.style.maxHeight = Phenix(slider_element).height();\r\n                    element.getAttribute('data-autoplay') ? element.setAttribute('data-autoplay', false) : null;\r\n                });\r\n            }\r\n        }, 2000);\r\n    }\r\n\r\n    useEffect(()=> { setPhenixView(); }, [attributes]);\r\n\r\n    //===> Fetching Data <===//\r\n    useEffect(() => {\r\n        //===> Fetch Post Types <===//\r\n        if (state.post_types.length < 1) {\r\n            apiFetch({path: 'wp/v2/types'}).then(post_types => {\r\n                //===> Reset Types <===//\r\n                let new_state = state;\r\n        \r\n                //===> Get Current Active Types <===//\r\n                for (const [key, value] of Object.entries(post_types)) {\r\n                    //===> Exclude the Core Types <===//\r\n                    if (!['attachment', 'nav_menu_item', 'wp_block', 'wp_navigation', 'wp_template', 'wp_template_part'].includes(key)) {\r\n                        new_state.post_types.push({\"value\":key, \"label\":value.name});\r\n                    }\r\n                }\r\n\r\n                //===> Fetch PDS Options <===//\r\n                apiFetch({path: 'pds-blocks/v2/options'}).then(options => {\r\n                    //===> Create New Array <===//\r\n                    let meta_templates = options.templates_meta,\r\n                        template_parts = options.theme_parts;\r\n\r\n                    //===> Loop Through Theme-Parts <===//\r\n                    Object.entries(template_parts).forEach(([key, value]) => {\r\n                        //===> if its direct theme-part <===//\r\n                        if(typeof(value) === 'string') {\r\n                            new_state.template_list.push(<option key={`${key}-${value}`} value={value.replace(\".php\", \"\")}>{value.replace('-', ' ').replace('_', '').replace(\".php\", \"\")}</option>);\r\n                        }\r\n                        //===> if its nested theme-part in a directory <===//\r\n                        else {\r\n                            //===> Define Directory Files <===//\r\n                            let files_list = [];\r\n                            //===> Loop Through Files <===//\r\n                            Object.entries(value).forEach(([key2, value]) => {\r\n                                //===> add the file to the list <===//\r\n                                files_list.push(<option key={`${key2}-${value}`} value={`${key}/${value.replace(\".php\", \"\")}`}>{`${value.replace('-', ' ').replace('_', '').replace(\".php\", \"\")}`}</option>);\r\n                            });\r\n                            //===> Push the Options Group <===//\r\n                            new_state.template_list.push(<optgroup key={`${key}-group`} label={`${key}`}>{files_list}</optgroup>);\r\n                        }\r\n                    });\r\n\r\n                    //===> Get Phenix Data <===//\r\n                    if(meta_templates !== state.templates_meta) new_state.templates_meta = meta_templates;\r\n\r\n                    //===> Set the new List if its Deferent <===//\r\n                    if (new_state !== state) set_state([...new_state]);\r\n                });\r\n            });\r\n        }\r\n\r\n        //===> Run Phenix Components <===//\r\n        PhenixComponentsBuilder();\r\n    }, []);\r\n    //===> Render <===//\r\n    return (<>\r\n        {/* //====> Controls Layout <====// */}\r\n        <InspectorControls key=\"inspector\">\r\n            {/*===> Widget Panel <===*/}\r\n            <PanelBody title={__(\"General Setting\", \"phenix\")} initialOpen={true}>\r\n                {/*===> Post Type <===*/}\r\n                <SelectControl label={__(\"Data Type\", \"phenix\")} value={attributes.post_type} onChange={set_post_type} options={state.post_types} />\r\n\r\n                {/*===> Group <===*/}\r\n                {attributes.post_type !== 'default' ? \r\n                <div className='row gpx-20 mb-15'>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6'>\r\n                        <PhenixNumber label={__(\"Per Page\", \"phenix\")} value={ attributes.per_page } onChange={set_per_page} min={3} max={36}></PhenixNumber>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6'>\r\n                        <SelectControl label={__(\"Order By\", \"phenix\")} value={attributes.order} onChange={set_order} options={[\r\n                            { label: __('Oldest', \"phenix\"), value: 'ASC' },\r\n                            { label: __('Newest', \"phenix\"),  value: 'DESC' },\r\n                        ]}/>\r\n                    </div>\r\n                    {/*===> // Column <===*/}\r\n                </div> : \"\"}\r\n\r\n                {/*=== Card Template ===*/}\r\n                <label className='mb-5'>{__(\"Card Template\", \"phenix\")}</label>\r\n                <div className='px-select mb-15'>\r\n                    <select name=\"template-name\" data-placeholder={__(\"Default\", \"phenix\")} onChange={set_template_part} className='px-select form-control pds-tm-control small radius-md' data-search=\"1\" defaultValue={ attributes.template_part }>\r\n                        {state.template_list}\r\n                    </select>\r\n                </div>\r\n\r\n                {/*===> Group <===*/}\r\n                <div className='row gpx-20 mb-15'>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6'>\r\n                        <ToggleControl label={__(\"Pagination\", \"phenix\")} checked={attributes.pagination} onChange={set_pagination}/>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6'>\r\n                        <ToggleControl label={__(\"Grid Mode\", \"phenix\")} checked={attributes.grid_mode} onChange={set_grid_mode}/>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6'>\r\n                        <ToggleControl label={__(\"Slider Mode\", \"phenix\")} checked={attributes.slider_mode} onChange={set_slider_mode}/>\r\n                    </div>\r\n                    {/*===> // Column <===*/}\r\n                </div>\r\n            </PanelBody>\r\n            {/*===> Widget Panel <===*/}\r\n            {attributes.grid_mode && !attributes.slider_mode ? <PanelBody title={__(\"Loop Grid\", \"phenix\")} initialOpen={true}>\r\n                {/*===> Columns No. in Row <===*/}\r\n                {!attributes.grid.state ? <div className=\"mb-15\">\r\n                    <PhenixNumber label={__(\"Columns in Row\", \"phenix\")} icon=\"far fa-mobile-android\" value={attributes.grid.cols?.replace(\"row-cols-\", \"\") || 1} onChange={set_grid_cols} min={0} max={12}></PhenixNumber>\r\n                </div> : \"\"}\r\n\r\n                {/*===> Switch Button <===*/}\r\n                <OptionControl name='grid-state' checked={attributes.grid.state} onChange={set_grid_state} type='switch-checkbox' className='small'>\r\n                    <span>{__(\"Free Columns Size ?\", \"phenix\")}</span>\r\n                </OptionControl>\r\n\r\n                {/*===> Switch Buttons <===*/}\r\n                <div className='row gpx-15 mb-15'>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6'>\r\n                        {/*===> Switch Button <===*/}\r\n                        <OptionControl name='grid-state' value=\"flow-reverse\" checked={attributes.grid.flow?.length > 0} onChange={set_grid_flow} type='switch-checkbox' className='small'>\r\n                            <span>{__(\"Reverse\", \"phenix\")}</span>\r\n                        </OptionControl>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6'>\r\n                        {/*===> Switch Button <===*/}\r\n                        <OptionControl name='grid-masonry' value=\"px-masonry\" checked={attributes.grid.masonry?.length > 0} onChange={set_grid_masonry} type='switch-checkbox' className='small'>\r\n                            <span>{__(\"Masonry\", \"phenix\")}</span>\r\n                        </OptionControl>\r\n                    </div>\r\n                    {/*===> // Column <===*/}\r\n                </div>\r\n            </PanelBody> : null}\r\n            {/*===> Widget Panel <===*/}\r\n            {attributes.slider_mode ? <PanelBody title={__(\"Slider Options\", \"phenix\")} initialOpen={true}>\r\n                {/*===> Elements Group <===*/}\r\n                <div className='row gpx-20'>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-12 mb-15'>\r\n                        <SelectControl label={__(\"Type\", \"phenix\")} value={attributes.slider_type} onChange={set_slider_type} options={[\r\n                            { label: __('Loop', \"phenix\"), value: 'loop' },\r\n                            { label: __('Fading', \"phenix\"),  value: 'fade' },\r\n                            { label: __('Sliding', \"phenix\"),  value: 'slide' },\r\n                        ]}/>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6 mb-15'>\r\n                        <PhenixNumber label={__(\"Columns No.\", \"phenix\")} value={attributes.grid.cols ? attributes.grid.cols : 1} onChange={set_grid_cols} min={0} max={12}></PhenixNumber>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6 mb-15'>\r\n                        <PhenixNumber label={__(\"Steps\", \"phenix\")} value={attributes.slider.steps || 1} onChange={set_slider_steps} min={1} max={12}></PhenixNumber>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6 mb-15'>\r\n                        <PhenixNumber label={__(\"Duration\", \"phenix\")} value={attributes.slider.duration || 6000} onChange={set_slider_duration} min={3000} max={20000} steps={100}></PhenixNumber>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6 mb-15'>\r\n                        <PhenixNumber label={__(\"Speed\", \"phenix\")} value={attributes.slider.speed || 700} onChange={set_slider_speed} min={300} max={3000} steps={100}></PhenixNumber>\r\n                    </div>\r\n                    {/*===> // Column <===*/}\r\n                </div>\r\n\r\n                {/*===> Switch Buttons <===*/}\r\n                <div className='pdt-15 divider-t'>\r\n                    <ToggleControl label={__(\"Enable Autoplay\", \"phenix\")} checked={attributes.slider.autoplay || false} onChange={set_slider_autoplay}/>\r\n                    <ToggleControl label={__(\"Enable Arrows Buttons\", \"phenix\")} checked={attributes.slider.controls || false} onChange={set_slider_controls}/>\r\n                    <ToggleControl label={__(\"Enable Bullet Pagination\", \"phenix\")} checked={attributes.slider.pagination || false} onChange={set_slider_pagination}/>\r\n                </div>\r\n            </PanelBody> : null}\r\n            {/*===> Widgets Panel <===*/}\r\n            <PanelBody title={__(\"Responsive Options\", \"phenix\")} initialOpen={false}>\r\n                <ScreensTabs md={responsive_options} lg={responsive_options} xl={responsive_options} />\r\n            </PanelBody>\r\n            {/*===> End Widgets Panels <===*/}\r\n        </InspectorControls>\r\n\r\n        {/* //====> Edit Layout <====// */}\r\n        {attributes.preview ? \r\n            <img src=\"https://design.phenixthemes.com/px-assets/slider-placeholder.svg\" alt=\"\" className='fluid' />\r\n        :\r\n            <div {...blockProps}>\r\n                <ServerSideRender block=\"phenix/query\" attributes={attributes} />\r\n                { setPhenixView() }\r\n            </div>\r\n        }\r\n    </>);\r\n}","module.exports = window[\"wp\"][\"apiFetch\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"wp\"][\"serverSideRender\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","/*\r\n * ===> 01 - Block Data\r\n * ===> 02 - WordPress Modules\r\n * ===> 03 - Register Block\r\n * ===> 03 - Block Save Mode [Output]\r\n*/\r\n\r\n//===> Block Data <===//\r\nimport Edit from './edit';\r\nimport metadata from './block.json';\r\n\r\n//===> WordPress Modules <===//\r\nimport { registerBlockType } from '@wordpress/blocks';\r\n\r\n//===> Register Block <===//\r\nregisterBlockType(metadata.name, {\r\n    title      : metadata.title,\r\n    category   : metadata.category,\r\n    attributes : metadata.attributes,\r\n    icon  : <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\"><path d=\"M494.9 96.01c-38.78 0-75.22 15.09-102.6 42.5L320 210.8L247.8 138.5c-27.41-27.41-63.84-42.5-102.6-42.5C65.11 96.01 0 161.1 0 241.1v29.75c0 80.03 65.11 145.1 145.1 145.1c38.78 0 75.22-15.09 102.6-42.5L320 301.3l72.23 72.25c27.41 27.41 63.84 42.5 102.6 42.5C574.9 416 640 350.9 640 270.9v-29.75C640 161.1 574.9 96.01 494.9 96.01zM202.5 328.3c-15.31 15.31-35.69 23.75-57.38 23.75C100.4 352 64 315.6 64 270.9v-29.75c0-44.72 36.41-81.13 81.14-81.13c21.69 0 42.06 8.438 57.38 23.75l72.23 72.25L202.5 328.3zM576 270.9c0 44.72-36.41 81.13-81.14 81.13c-21.69 0-42.06-8.438-57.38-23.75l-72.23-72.25l72.23-72.25c15.31-15.31 35.69-23.75 57.38-23.75C539.6 160 576 196.4 576 241.1V270.9z\"/></svg>,\r\n    /**===> @see ./edit.js <===*/\r\n    edit  : Edit,\r\n    save  : () => null\r\n});"],"names":["Component","PhenixNumber","this","props","label","value","min","max","steps","icon","onChange","name","DecreaseNum","clicked","button","target","wrapper","Phenix","ancestor","minNum","parseInt","step","input","querySelector","newVal","className","onClick","type","changed","maxNum","finder_counter","element_finder","setInterval","document","querySelectorAll","forEach","element","classList","contains","select","clearInterval","OptionControl","checked","children","required","options","attributes","event","defaultChecked","includes","replace","ScreensTabs","screen","sm","screenContent","lg","xl","md","state","changeTab","setState","getAttribute","key","title","__","MediaUploader","size","setValue","MediaUpload","onSelect","render","open","src","style","Edit","setAttributes","blockProps","useBlockProps","useState","post_types","taxonomies","templates_meta","template_list","set_state","set_grid_cols","grid_ops","grid","cols","responsive_options","set_grid_cols_resp","setPhenixView","window","frames","frameDoc","setTimeout","multimedia","add","setAttribute","slider","autoplay","slider_element","maxHeight","height","Sliders","MediaEls","length","addClass","useEffect","apiFetch","path","then","new_state","Object","entries","push","meta_templates","template_parts","theme_parts","files_list","key2","PhenixComponentsBuilder","InspectorControls","PanelBody","initialOpen","SelectControl","post_type","per_page","order","template_part","defaultValue","ToggleControl","pagination","grid_mode","slider_mode","console","log","flow","masonry","slider_type","duration","speed","controls","preview","alt","block","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","registerBlockType","metadata","category","xmlns","viewBox","edit","save"],"sourceRoot":""}