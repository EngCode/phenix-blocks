{"version":3,"file":"blocks/query/index.js","mappings":"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","sources":["webpack://phenix-ui/./src/blocks/px-controls/alignment.js","webpack://phenix-ui/./src/blocks/px-controls/colors/background.js","webpack://phenix-ui/./src/blocks/px-controls/colors/text.js","webpack://phenix-ui/./src/blocks/px-controls/number.js","webpack://phenix-ui/./src/blocks/px-controls/panel-scripts.js","webpack://phenix-ui/./src/blocks/px-controls/switch.js","webpack://phenix-ui/./src/blocks/px-controls/tabs.js","webpack://phenix-ui/./src/blocks/px-controls/templates-meta.js","webpack://phenix-ui/./src/blocks/px-controls/uploader.js","webpack://phenix-ui/./src/blocks/query/edit.js","webpack://phenix-ui/external window [\"wp\",\"apiFetch\"]","webpack://phenix-ui/external window [\"wp\",\"blockEditor\"]","webpack://phenix-ui/external window [\"wp\",\"blocks\"]","webpack://phenix-ui/external window [\"wp\",\"components\"]","webpack://phenix-ui/external window [\"wp\",\"element\"]","webpack://phenix-ui/external window [\"wp\",\"i18n\"]","webpack://phenix-ui/external window [\"wp\",\"serverSideRender\"]","webpack://phenix-ui/webpack/bootstrap","webpack://phenix-ui/webpack/runtime/compat get default export","webpack://phenix-ui/webpack/runtime/define property getters","webpack://phenix-ui/webpack/runtime/hasOwnProperty shorthand","webpack://phenix-ui/./src/blocks/query/index.js"],"sourcesContent":["/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport {Component} from '@wordpress/element';\r\nimport OptionControl from './switch';\r\n\r\n//===> Media Uploader <===//\r\nexport default class FlexAlignment extends Component {\r\n    render () {\r\n        //===> Properties <===//\r\n        const {label, value, onChange, screen} = this.props;\r\n        const screenPoint = screen ? `-${screen}` : \"\";\r\n        const button_style = \"btn tiny bg-transparent fs-12 square pxi\";\r\n\r\n        //===> Value Handler <===//\r\n        const set_alignment = target => {\r\n            //===> Define Data <===//\r\n            let align_val  = value;\r\n            const current_val = value.trim(),\r\n                  current_values  = current_val.split(\" \"),\r\n                  xTypes = [\"-x\", \"between\", \"around\"],\r\n                  allTypes = [\"-x\", \"between\", \"around\", \"-y\"];\r\n\r\n            //===> Check if the Value has an option with the same type as the target value <===//\r\n            const itHasType = allTypes.some(type => current_val.includes(type)),\r\n                  align_type = xTypes.some(type => target.getAttribute('name').includes(type)) ? \"x\" : \"y\",\r\n                  foundedType = xTypes.some(type => current_val.includes(type)) ? \"x\" : \"y\";\r\n\r\n            //===> if the Value has an Option and the option type is the same as the target <===//\r\n            if (itHasType && align_type === foundedType) {\r\n                //===> Loop on Values <===//\r\n                current_values.forEach(current_value => {\r\n                    //===> if the Founded Type is the same is the Value, Replace the Value <===//\r\n                    if (current_value.includes(align_type)) {\r\n                        align_val = align_val.replace(current_value, target.value);\r\n                    }\r\n                });\r\n            }\r\n            //===> if its a new Value add it <===//\r\n            else {\r\n                align_val += ` ${target.value}`;\r\n            }\r\n\r\n            //===> Return new Value <===//\r\n            return onChange(align_val.trim());\r\n        },\r\n\r\n        //===> Reset Value Method <===//\r\n        reset_align = (clicked) => onChange(\"align-reset\");\r\n\r\n        //===> Output <===//\r\n        return (<div className='components-flex-item flex-alignment-btns'>\r\n            {/*===> Label <===*/}\r\n            <div className={\"flexbox align-between mb-5 align-center-y\"}>\r\n                <label className='fs-13 weight-bold'>{label}</label>\r\n                <button type=\"button\" data-value=\"\" title=\"Reset\" className='btn tiny bg-transparent fs-12 square far fa-redo' onClick={reset_align}></button>\r\n            </div>\r\n            {/*===> Counter Control <===*/}\r\n            <div className={\"flexbox align-between\"}>\r\n                {/*===> Radio Buttons <===*/}\r\n                <div className=\"col-auto pdx-5 border-1 border-solid border-alpha-15 radius-sm\">\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`flex-align-x${screenPoint}`} checked={value.includes(`align${screenPoint}-start-x`)} value={`align${screenPoint}-start-x`} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span title=\"Start\" className={`${button_style} pxi-align-x-start`}></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`flex-align-x${screenPoint}`} checked={value.includes(`align${screenPoint}-center-x`)} value={`align${screenPoint}-center-x`} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span className={`${button_style} pxi-align-x-center`} title=\"Center\"></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`flex-align-x${screenPoint}`} checked={value.includes(`align${screenPoint}-between`)} value={`align${screenPoint}-between`} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span className={`${button_style} pxi-align-x-between`} title=\"Between\"></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`flex-align-x${screenPoint}`} checked={value.includes(`align${screenPoint}-around`)} value={`align${screenPoint}-around`} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span className={`${button_style} pxi-align-x-around`} title=\"Around\"></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`flex-align-x${screenPoint}`} checked={value.includes(`align${screenPoint}-end-x`)} value={`align${screenPoint}-end-x`} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span className={`${button_style} pxi-align-x-end`} title=\"Around\"></span>\r\n                    </OptionControl>\r\n                </div>\r\n                {/*===> Radio Buttons <===*/}\r\n                <div className=\"col-auto pdx-5 border-1 border-solid border-alpha-15 radius-sm\">\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`flex-align-y${screenPoint}`} checked={value.includes(`align${screenPoint}-start-y`)} value={`align${screenPoint}-start-y`} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span className={`${button_style} pxi-align-y-start`} title=\"Start\"></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`flex-align-y${screenPoint}`} checked={value.includes(`align${screenPoint}-center-y`)} value={`align${screenPoint}-center-y`} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span className={`${button_style} pxi-align-y-center`} title=\"Center\"></span>\r\n                    </OptionControl>\r\n                    {/*===> Switch Button <===*/}\r\n                    <OptionControl name={`flex-align-y${screenPoint}`} checked={value.includes(`align${screenPoint}-end-y`)} value={`align${screenPoint}-end-y`} onChange={set_alignment} type='button-radio' className='tiny inline-block'>\r\n                        <span className={`${button_style} pxi-align-y-end`} title=\"End\"></span>\r\n                    </OptionControl>\r\n                </div>\r\n            </div>\r\n            {/*===> Counter Control <===*/}\r\n        </div>)\r\n    }\r\n}","/*\r\n * ===> 01 - WordPress Modules\r\n * ===> 02 - Phenix Background\r\n * ===> 03 - Buttons Creator\r\n * ===> 04 - Component Output\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport { __ } from '@wordpress/i18n';\r\nimport {Component} from '@wordpress/element';\r\nimport {SelectControl} from '@wordpress/components';\r\n\r\n//====> Phenix Modules <====//\r\nimport MediaUploader from '../uploader';\r\n\r\n//===> Phenix Background <===//\r\nexport default class PhenixBackground extends Component {\r\n    //===> States <===//\r\n    state = {\r\n        colors : [\r\n            \"fas fa-redo tx-align-center\",\r\n\r\n            \"bg-inherit\",\r\n            \"bg-transparent\",\r\n            \"bg-primary\",\r\n            \"bg-primary-dark\",\r\n            \"bg-secondary\",\r\n            \"bg-secondary-dark\",\r\n            \"bg-gray\",\r\n            \"bg-dark\",\r\n            \"bg-white\",\r\n            \"bg-success\",\r\n            \"bg-danger\",\r\n            \"bg-warning\",\r\n            \"bg-info\",\r\n\r\n            \"bg-offwhite-primary\",\r\n            \"bg-offwhite-secondary\",\r\n            \"bg-offwhite-info\",\r\n            \"bg-offwhite-success\",\r\n            \"bg-offwhite-danger\",\r\n            \"bg-offwhite-warning\",\r\n\r\n            \"bg-offwhite-smoke\",\r\n            \"bg-offwhite-gray\",\r\n            \"bg-offwhite-snow\",\r\n            \"bg-offwhite-honeydew\",\r\n            \"bg-offwhite-aliceblue\",\r\n            \"bg-offwhite-ghost\",\r\n            \"bg-offwhite-seashell\",\r\n            \"bg-offwhite-beige\",\r\n            \"bg-offwhite-oldlace\",\r\n            \"bg-offwhite-floral\",\r\n            \"bg-offwhite-antique\",\r\n            \"bg-offwhite-linen\",\r\n            \"bg-offwhite-lavenderblush\",\r\n\r\n            \"bg-alpha-05\",\r\n            \"bg-alpha-10\",\r\n            \"bg-alpha-15\",\r\n            \"bg-alpha-25\",\r\n            \"bg-alpha-50\",\r\n            \"bg-alpha-75\",\r\n\r\n            \"bg-facebook\",\r\n            \"bg-twitter\",\r\n            \"bg-youtube\",\r\n            \"bg-instagram\",\r\n            \"bg-snapchat\",\r\n            \"bg-whatsapp\",\r\n            \"bg-pinterest\",\r\n            \"bg-linkedin\",\r\n            \"bg-behance\",\r\n            \"bg-dribbble\",\r\n            \"bg-flicker\",\r\n        ],\r\n        gradients: [\r\n            \"bg-grade-primary\",\r\n            \"bg-grade-secondary\",\r\n            \"bg-grade-warning\",\r\n            \"bg-grade-danger\",\r\n            \"bg-grade-success\",\r\n            \"bg-grade-water\",\r\n            \"bg-grade-ice\",\r\n            \"bg-grade-fire\",\r\n            \"bg-grade-purple\"\r\n        ],\r\n        rotation : [\r\n            'bg-grade-0',\r\n            'bg-grade-45',\r\n            'bg-grade-90',\r\n            'bg-grade-120',\r\n            'bg-grade-120n',\r\n            'bg-grade-90n',\r\n            'bg-grade-45n',\r\n            'bg-grade-180',\r\n        ],\r\n        placeholder : \"https://via.placeholder.com/480x200.webp?text=Example\",\r\n    }\r\n    //===> Render <===//\r\n    render () {\r\n        //===> Properties <===//\r\n        const {\r\n            type,\r\n            value,\r\n            label,\r\n            rotate,\r\n            colorsOnly,\r\n            isSmall,\r\n            placeholder,\r\n            onChange\r\n        } = this.props;\r\n\r\n        //===> Returned Value <===//\r\n        let options = {\r\n            type: type,\r\n            rotate: rotate,\r\n            value: value || \"\",\r\n        };\r\n\r\n        //===> Set Type <===//\r\n        const set_type = type => {\r\n            //===> Set Value <===//\r\n            options.type = type;\r\n\r\n            //===> change value <===//\r\n            if (options.type === 'image') {\r\n                options.value = this.state.placeholder;\r\n            } else {\r\n                options.value = \"\";\r\n            }\r\n\r\n            //===> Return Options <===//\r\n            return onChange(options);\r\n        };\r\n\r\n        //===> Set Type <===//\r\n        const set_rotate = rotate => {\r\n            //===> Set Value <===//\r\n            options.rotate = rotate;\r\n\r\n            //===> change value <===//\r\n            if (options.type !== 'gradient') options.value = \"\";\r\n\r\n            //===> Return Options <===//\r\n            return onChange(options);\r\n        };\r\n\r\n        //===> Set Background <===//\r\n        const setBackground = clicked => {\r\n            //===> Get Value <===//\r\n            let button = clicked.target,\r\n                value  = button?.getAttribute('data-value');\r\n\r\n            //===> Colors & Gradients <===//\r\n            if (type !== 'image') {options.value = value;}\r\n            //===> Image Type <===//\r\n            else {options.value = clicked.url;}\r\n\r\n            //===> Return Options <===//\r\n            return onChange(options);\r\n        };\r\n\r\n        //===> Buttons Creator <===//\r\n        const makeButtons = (list, type) => {\r\n            let output = [];\r\n            //===> for each item <===//\r\n            for (let index = 0; index < list.length; index++) {\r\n                //===> Get Value <===//\r\n                const name = list[index];\r\n                let title = \"\",\r\n                    isColor = !name.includes(\"fa-\");\r\n\r\n                //===> Convert to Title <===//\r\n                if (isColor) {\r\n                    title = list[index].replace('bg-', '').replace('-', ' ');\r\n    \r\n                    //===> UpperCase Title <===//\r\n                    title = title.replace(/^\\w/, function(c) {\r\n                        return c.toUpperCase();\r\n                    });\r\n                } else title = \"Reset\";\r\n\r\n                output.push(<button key={`${name.replaceAll(\" \", \"-\")}`} onClick={setBackground} title={title} data-value={isColor ? name : \"\"} className={`${isColor ? name : `${name} color-gray fs-12`} col reset-button ${value === name ? 'px-active' : \"\"}`} style={{\"width\":\"30px\",\"height\":\"16px\",\"borderRadius\":\"16px\"}}></button>);\r\n            }\r\n            //===> Return Buttons <===//\r\n            return output;\r\n        };\r\n\r\n        //===> Colors Panel <===//\r\n        const showPanel = clicked => {\r\n            let button  = clicked.target,\r\n                wrapper = Phenix(button).ancestor('.px-gb-component'),\r\n                panel   = wrapper.querySelector(\".options-list\");\r\n\r\n            //=== Show/Hide Panel ===//\r\n            if (panel) {\r\n                Phenix(button).toggleClass(\"px-active\");\r\n                if (isSmall) {\r\n                    Phenix(wrapper).toggleClass(\"overlay-panel\")\r\n                    Phenix(panel).toggleClass(\"px-active\").fadeToggle(300, 0, \"flex\");\r\n                } else {\r\n                    Phenix(panel).toggleClass(\"px-active\").slideToggle(300, 0, \"flex\");\r\n                };\r\n            }\r\n        };\r\n\r\n        //===> Component Design <===//\r\n        return (\r\n            <div className={`px-gb-component${isSmall ? \"\":\" position-rv \"}${label ? \"mb-15\" : \"\"}`}>\r\n                {/*===> Toggle Button <===*/}\r\n                {label ? <label className='mb-10 tx-UpperCase fs-13'>{label}</label> : null}\r\n                {/*===> Group <===*/}\r\n                <div className='overflow-hidden form-control small flexbox border-alpha-25 mb-5 tx-align-start radius-md align-center-y pdx-0 flow-nowrap'>\r\n                    {/*===> Panel Trigger */}\r\n                    <button onClick={showPanel} className={`w-max-150 fs-13 col h-min-100 reset-button options-toggle flexbox flow-nowrap align-between align-center-y pdx-10 divider-e`} type=\"button\">\r\n                        {type !== \"image\" ? <>\r\n                            <span className={`me-5 radius-circle inline-block ${value?.length > 0 ? value : \"bg-inherit\"}`} style={{\"width\": \"17px\", \"height\": \"17px\"}}></span>\r\n                            <span className='col tx-nowrap pde-5 tx-capitalize'>{value?.length > 0 ? value.replaceAll(\"-\", \" \").replace(\"bg\",\"\") : placeholder ? placeholder : \"Default\"}</span>\r\n                        </> : <>\r\n                        <span className={`me-5 radius-circle inline-block`} style={{\"width\": \"22px\", \"height\": \"22px\", \"backgroundImage\": `url(${value})`, \"backgroundSize\": \"cover\", \"backgroundPosition\": \"center\"}}></span>\r\n                            <span className='col tx-nowrap pde-5'>{placeholder ? placeholder : __(\"Replace\", \"phenix\")}</span>\r\n                        </>}\r\n                        {!isSmall ? <i className='fas fa-pencil fs-12 color-gray'></i> : null}\r\n                    </button>\r\n                    {/*===> Type Select <===*/}\r\n                    {!colorsOnly ? \r\n                    <SelectControl key=\"bg-type\" value={type || \"\"} onChange={set_type} options={[\r\n                        { label: 'color',   value: 'color' },\r\n                        { label: 'image',   value: 'image' },\r\n                        { label: 'gradient',   value: 'gradient' },\r\n                    ]}/>\r\n                    : null}\r\n                </div>\r\n                {/*===> Panel <===*/}\r\n                <div className={`flexbox options-list align-between ${type !== \"image\" ? 'pd-15 bg-white border-1 border-solid border-alpha-20 radius-md radius-bottom' : 'pdt-5'} hidden fluid`} style={{gap:\"10px\"}}>\r\n                    {type === \"color\" ? makeButtons(this.state.colors) : type === \"gradient\" ? makeButtons(this.state.gradients) : null}\r\n                    {type === \"image\" ? <MediaUploader key=\"upload-file\" value={!value ? this.state.placeholder : value} setValue={setBackground}></MediaUploader> : null}\r\n                    {/*===> Rotation Select <===*/}\r\n                    {type === \"gradient\" ? <div className='divider-t pdt-15 col-12'>\r\n                        <SelectControl label={`${_(\"Rotation\", \"phenix\")}`} key=\"gradient-direction\" value={rotate || \"\"} onChange={set_rotate} options={[\r\n                            { label: __('Default' ,\"phenix\"), value: '' },\r\n                            { label: __('45 Degree' ,\"phenix\"), value: 'bg-grade-45' },\r\n                            { label: __('-45 Degree' ,\"phenix\"), value: 'bg-grade-45n' },\r\n                            { label: __('90 Degree' ,\"phenix\"), value: 'bg-grade-90' },\r\n                            { label: __('-90 Degree' ,\"phenix\"), value: 'bg-grade-90n' },\r\n                            { label: __('120 Degree' ,\"phenix\"), value: 'bg-grade-120' },\r\n                            { label: __('-120 Degree' ,\"phenix\"), value: 'bg-grade-120n' },\r\n                            { label: __('180 Degree' ,\"phenix\"), value: 'bg-grade-180' },\r\n                            { label: __('-180 Degree' ,\"phenix\"), value: 'bg-grade-180n' },\r\n                        ]}/>\r\n                    </div> : null}\r\n                    {/*===> Rotation Select <===*/}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","/*\r\n * ===> 01 - WordPress Modules\r\n * ===> 02 - Phenix Background\r\n * ===> 03 - Buttons Creator\r\n * ===> 04 - Component Output\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport {Component} from '@wordpress/element';\r\n\r\n//===> Phenix Background <===//\r\nexport default class PhenixColors extends Component {\r\n    render () {\r\n        //===> Properties <===//\r\n        const {\r\n            value,\r\n            label,\r\n            isSmall,\r\n            placeholder,\r\n            onChange\r\n        } = this.props;\r\n\r\n        //===> Colors List <===//\r\n        const pxPallete = [\r\n            \"color-inherit\",\r\n            \"color-transparent\",\r\n            \"color-primary\",\r\n            \"color-primary-dark\",\r\n            \"color-secondary\",\r\n            \"color-secondary-dark\",\r\n            \"color-gray\",\r\n            \"color-dark\",\r\n            \"color-white\",\r\n            \"color-success\",\r\n            \"color-danger\",\r\n            \"color-warning\",\r\n            \"color-info\",\r\n            \"color-facebook\",\r\n            \"color-twitter\",\r\n            \"color-youtube\",\r\n            \"color-instagram\",\r\n            \"color-snapchat\",\r\n            \"color-whatsapp\",\r\n            \"color-pinterest\",\r\n            \"color-linkedin\",\r\n            \"color-behance\",\r\n            \"color-dribbble\",\r\n            \"color-flicker\",\r\n            \"fas fa-redo tx-align-center\"\r\n        ];\r\n\r\n        //===> Set Color <===//\r\n        const setColor = clicked => {\r\n            //===> Get Value <===//\r\n            let button = clicked.target,\r\n                value  = button.getAttribute('data-value');\r\n            //===> Return Options <===//\r\n            return onChange(value);\r\n        };\r\n\r\n        //===> Buttons Creator <===//\r\n        const makeButtons = (list) => {\r\n            let output = [];\r\n            //===> for each item <===//\r\n            for (let index = 0; index < list.length; index++) {\r\n                //===> Get Value <===//\r\n                const name = list[index];\r\n                let title = \"\",\r\n                    isColor = !name.includes(\"fa-\");\r\n\r\n                //===> Convert to Title <===//\r\n                if (isColor) {\r\n                    title = list[index].replace('color-', '').replace('-', ' ');\r\n    \r\n                    //===> UpperCase Title <===//\r\n                    title = title.replace(/^\\w/, function(c) {\r\n                        return c.toUpperCase();\r\n                    });\r\n                } else title = \"Reset\";\r\n\r\n                output.push(<button key={`${name.replaceAll(\" \", \"-\")}`} onClick={setColor} title={title} data-value={isColor ? name : \"\"} className={`${isColor ? name.replace('color-','bg-') : `${name} color-gray fs-12`} reset-button ${value === name ? 'px-active' : null}`} style={{\"width\":\"30px\",\"height\":\"16px\",\"borderRadius\":\"16px\"}}></button>);\r\n            }\r\n\r\n            //===> Return Buttons <===//\r\n            return output;\r\n        };\r\n\r\n        //===> Colors Panel <===//\r\n        const showPanel = clicked => {\r\n            let button = clicked.target,\r\n                wrapper = Phenix(button).ancestor('.px-gb-component'),\r\n                panel  = Phenix(button).next(\".options-list\");\r\n            //=== Show/Hide Panel ===//\r\n            if (panel) {\r\n                Phenix(button).toggleClass(\"px-active\");\r\n                if (isSmall) {\r\n                    Phenix(wrapper).toggleClass(\"overlay-panel\")\r\n                    Phenix(panel).toggleClass(\"px-active\").fadeToggle(300, 0, \"flex\");\r\n                } else {\r\n                    Phenix(panel).toggleClass(\"px-active\").slideToggle(300, 0, \"flex\");\r\n                };\r\n            }\r\n        };\r\n\r\n        //===> Component Output <===//\r\n        return (\r\n            <div className={`px-gb-component${isSmall ? \"\":\" position-rv \"}${label ? \"mb-15\" : \"\"}`}>\r\n                {/*===> Toggle Button <===*/}\r\n                {label ? <label className='mb-10 tx-UpperCase fs-13'>{label}</label> : null}\r\n                {/*===> Trigger <===*/}\r\n                <button onClick={showPanel} className={`options-toggle form-control small flexbox align-between align-center-y radius-md tx-align-start border-alpha-25 mb-5`} type=\"button\">\r\n                    <span className={`me-5 radius-circle inline-block ${value?.length > 0 ? value.replace(\"color-\",\"bg-\") : \"bg-inherit\"}`} style={{\"width\": \"20px\", \"height\": \"20px\"}}></span>\r\n                    <span className='col'>{value?.length > 0 && !placeholder ? value?.replaceAll(\"-\", \" \").replace(\"color\",\"\") : placeholder ? placeholder : \"Default\"}</span>\r\n                    {!isSmall ? <i className='fas fa-pencil'></i> : null}\r\n                </button>\r\n                {/*===> Panel <===*/}\r\n                <div className='flexbox options-list align-between pd-20 bg-white border-1 border-solid border-alpha-20 radius-md radius-bottom hidden fluid' style={{gap:\"10px\"}}>\r\n                    {makeButtons(pxPallete)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport {Component} from '@wordpress/element';\r\n\r\n//===> Media Uploader <===//\r\nexport default class PhenixNumber extends Component {\r\n    render () {\r\n        //===> Properties <===//\r\n        const {label, value, min, max, steps, icon, onChange, name} = this.props;\r\n\r\n        //===> Set Value <===//\r\n        const setNumber = (changed) => {\r\n            //===> Get Elements <===//\r\n            let input  = changed.target,\r\n                minNum  = parseInt(min) || 0,\r\n                maxNum  = parseInt(max) || 0;\r\n\r\n            //===> Get Input Element <===//\r\n            let newVal = parseInt(input.value),\r\n                checkVal = (newVal >= minNum || newVal <= maxNum) ? newVal : 0;\r\n\r\n            //===> Set Data <===//\r\n            return onChange(checkVal);\r\n        },\r\n\r\n        //===> Increase Number <===//\r\n        IncreaseNum = (clicked) => {\r\n            //===> Get Elements <===//\r\n            let button  = clicked.target,\r\n                wrapper = Phenix(button).ancestor(\".px-counter-input\"),\r\n                maxNum  = parseInt(max) || 9999999,\r\n                step    = steps ? parseInt(steps) : 1;\r\n\r\n            //===> Get Input Element <===//\r\n            let input  = wrapper.querySelector('input[type=\"number\"]'),\r\n                newVal = parseInt(input.value) + step;\r\n\r\n            //===> Set Data <===//\r\n            return onChange(newVal < maxNum || newVal === maxNum ? newVal : maxNum);\r\n        },\r\n\r\n        //===> Decrease Number <===//\r\n        DecreaseNum = (clicked) => {\r\n            //===> Get Elements <===//\r\n            let button  = clicked.target,\r\n                wrapper = Phenix(button).ancestor(\".px-counter-input\"),\r\n                minNum  = parseInt(min) || 0,\r\n                step    = steps ? steps : 1;\r\n\r\n            //===> Get Input Element <===//\r\n            let input = wrapper.querySelector('input[type=\"number\"]'),\r\n                newVal = parseInt(input.value) - step;\r\n\r\n            //===> Set Data <===//\r\n            return onChange(newVal > minNum || newVal === minNum ? newVal : minNum);\r\n        };\r\n\r\n        //===> Output <===//\r\n        return (<div className='flexbox flex-gap-fix align-between flow-column'>\r\n            {/*===> Label <===*/}\r\n            <label className='components-input-control__label tx-uppercase weight-bold'>{label}</label>\r\n            {/*===> Counter Control <===*/}\r\n            <div className={\"px-counter-input position-rv fluid \" + (icon ? icon : \"\")}>\r\n                {/*===> Button <===*/}\r\n                {!icon ? <button onClick={DecreaseNum} className='btn square small fs-13 increase-btn far fa-minus position-ab pos-start-0 pos-top-0 divider-e icon-fix'></button> : \"\"}\r\n\r\n                {/*===> Number Input <===*/}\r\n                <input name={name} type=\"number\" min={min} max={max} value={parseInt(value) ? parseInt(value) : 0} className={\"form-control small radius-sm reset-appearance\"+(!icon ? \" tx-align-center\" : \"\")} onChange={setNumber} />\r\n\r\n                {/*===> Button <===*/}\r\n                <div className='position-ab pos-end-0 pos-bottom-0 flexbox'>\r\n                    <button onClick={IncreaseNum} className='btn square small fs-13 increase-btn far fa-plus divider-s icon-fix'></button>\r\n                    {icon ? <button onClick={DecreaseNum} className='btn square small fs-13 increase-btn far fa-minus divider-s icon-fix'></button> : \"\"}\r\n                </div>\r\n            </div>\r\n            {/*===> Counter Control <===*/}\r\n        </div>)\r\n    }\r\n}","/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport { __ } from '@wordpress/i18n';\r\n\r\n//===> Script Runner <===//\r\nconst PhenixComponentsBuilder = () => {\r\n    //===> Create Time Loop to Find the Elements <===//\r\n    let finder_counter = 0,\r\n        element_finder = setInterval(() => {\r\n            //===> Get Elements <===//\r\n            let elements = document.querySelectorAll('.pds-tm-control');\r\n\r\n            //===> Loop Through Elements <===//\r\n            elements.forEach(element => {\r\n                //===> Define Element Data <===//\r\n                let class_names = element.classList;\r\n\r\n                //===> for Selects <===//\r\n                if (class_names.contains('px-select')) Phenix(element).select();\r\n            });\r\n\r\n            //===> Increase Counter <===//\r\n            finder_counter++;\r\n\r\n            //===> Clear Timer Loop <===//\r\n            if (finder_counter > 30) clearInterval(element_finder);\r\n        }, 500);\r\n\r\n    //===> Get View iFrame <===//\r\n    let viewScript = (the_document) => {\r\n        //===> Define Data <===// \r\n        let time_counter = 0,\r\n        //===> Timer Loop <===//\r\n        pds_elements_timer = setInterval(() => {\r\n            //===> Run Multimedia <===//\r\n            the_document.querySelectorAll(\".px-media\").forEach(element => {\r\n                element.style.backgroundImage = null;\r\n                Phenix(element).multimedia();\r\n            });\r\n\r\n            //===> Run Sliders <===//\r\n            the_document.querySelectorAll(\".px-slider:not(.block-editor-block-list__block)\").forEach(element => {\r\n                //===> Mark as Editing Mode <===//\r\n                element.classList.add('edit-mode');\r\n\r\n                //===> Disable Autoplay <===//\r\n                if(element.getAttribute('data-autoplay')) element.setAttribute('data-autoplay', false);\r\n\r\n                //===> Replace Data Attributes with Row/Columns Classes <===//\r\n                const slider_cols_fixer = (row) => {\r\n                    //===> Contain the Slides in One Line <====//\r\n                    row.classList.add('flow-nowrap');\r\n                    if (element.getAttribute('data-md')) row.classList.add(`row-cols-md-${element.getAttribute('data-md')}`);\r\n                    if (element.getAttribute('data-lg')) row.classList.add(`row-cols-md-${element.getAttribute('data-lg')}`);\r\n                    if (element.getAttribute('data-xl')) row.classList.add(`row-cols-md-${element.getAttribute('data-xl')}`);\r\n                }\r\n                \r\n                slider_cols_fixer(element);\r\n\r\n                //===> Stretch Fix <===//\r\n                // let slider_element = element.querySelector(\".splide__list\"),\r\n                //===> Slides List Finder <===//\r\n                // slider_element_finder = setInterval(() => {\r\n                //     if (!slider_element) {\r\n                //         slider_cols_fixer(element);\r\n                //         slider_element = element.querySelector(\".splide__list\");\r\n                //     } else {\r\n                //         //===> Assign a Max Height for Stretch <===//\r\n                //         slider_element.style.maxHeight = Phenix(slider_element).height();\r\n\r\n                //         //===> Assign Columns Sizes <===//\r\n                //         slider_cols_fixer(slider_element);\r\n                //         element.classList.forEach(class_name => class_name.includes('row-cols') || class_name.includes('flow-') ? element.classList.remove(class_name) : null);\r\n\r\n                //         //===> Clear Timer <===//\r\n                //         clearInterval(slider_element_finder);\r\n                //     }\r\n                // }, 100);\r\n                //===> Run the Slider <===//\r\n                // Phenix(element).slider({autoplay: false});\r\n            });\r\n\r\n            //===> Run Menus <===//\r\n            the_document.querySelectorAll(\".px-navigation\").forEach(element => Phenix(element).menu());\r\n\r\n            //====> Clear Timer <===//\r\n            time_counter += 1; if (time_counter > 100) clearInterval(pds_elements_timer);\r\n        }, 500);\r\n    };\r\n\r\n    //===> Run View Script <===//\r\n    if (window.frames['editor-canvas']) viewScript(window.frames['editor-canvas'].document);\r\n    else viewScript(window.document);\r\n}\r\n\r\nexport default PhenixComponentsBuilder;","//====> .Dependencies. <====//\r\nimport {Component} from '@wordpress/element';\r\nimport { useState, useEffect } from '@wordpress/element';\r\n\r\n//===> Phenix Form Control <===//\r\nexport default class OptionControl extends Component {\r\n    //===> States <===//\r\n    state = {};\r\n\r\n    render () {\r\n        //===> Properties <===//\r\n        const {\r\n            name,\r\n            type,\r\n            value,\r\n            checked,\r\n            onChange,\r\n            children,\r\n            required,\r\n            className\r\n        } = this.props;\r\n\r\n        //===> Change Value <===//\r\n        const setValue = (event) => {\r\n            return onChange(event.target);\r\n        };\r\n\r\n        //===> Define Data <===//\r\n        let options = `fs-12 option-control flexbox align-center-y`,\r\n            attributes = {onChange: setValue};\r\n\r\n        //===> Custom Classes <===//\r\n        if (className) options += ` ${className}`;\r\n\r\n        //===> Check if is On <===//\r\n        attributes.defaultChecked = checked;\r\n\r\n        //===> add Options <===//\r\n        if (required) attributes.required = true;\r\n        if (value) attributes.value = value;\r\n\r\n        //===> Render Component <===//\r\n        return (<label className={options} data-type={type?.includes(\"switch\") ? \"switch\" : type.includes(\"button\") ? \"button\" : type}>\r\n            <input type={type?.replace(\"switch-\",\"\").replace(\"button-\", \"\")} name={name} {...attributes} />\r\n            {type?.includes(\"switch\") ? <span className=\"switch\"></span> : null}\r\n            {children}\r\n        </label>)\r\n    }\r\n}","/*\r\n * ===> 01 - WordPress Modules\r\n * ===> 02 - Phenix Background\r\n * ===> 03 - Buttons Creator\r\n * ===> 04 - Component Output\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport { __ } from '@wordpress/i18n';\r\nimport {Component} from '@wordpress/element';\r\n\r\n//===> Phenix Background <===//\r\nexport default class ScreensTabs extends Component {\r\n    //===> States <===//\r\n    state = {screen : this.props.sm ? \"sm\" : \"md\"};\r\n\r\n    render () {\r\n        //===> Properties <===//\r\n        const {sm, lg, xl, md} = this.props;\r\n        let screenContent = this.props[`${this.state.screen}`];\r\n\r\n        //===> Options Changer <===//\r\n        const changeTab = (clicked) => {\r\n            //===> Option Data <===//\r\n            let element = clicked.target;\r\n            //===> Show Options <===//\r\n            this.setState({screen: element.getAttribute('data-options')});\r\n        };\r\n\r\n        //===> Component Output <===//\r\n        return (\r\n            <div className='px-gb-tabs'>\r\n                {/*===> Tabs Buttons <===*/}\r\n                <div className='options-tabs px-group borderd-group divider-b border-alpha-15 mb-20'>\r\n                    {this.props.sm ? <button key=\"mobile\" onClick={changeTab} className={`btn square tiny ${this.state.screen !== \"sm\" ? \"bg-alpha-05\" : \"primary\"} col far fa-mobile`} title={__(\"Mobile Screens\", \"phenix\")}  data-options=\"sm\"></button> : null}\r\n                    {this.props.md ? <button key=\"tablet\" onClick={changeTab} className={`btn square tiny ${this.state.screen !== \"md\" ? \"bg-alpha-05\" : \"primary\"} col far fa-tablet`} title={__(\"Tablet Screens\", \"phenix\")}  data-options=\"md\"></button> : null}\r\n                    {this.props.lg ? <button key=\"laptop\" onClick={changeTab} className={`btn square tiny ${this.state.screen !== \"lg\" ? \"bg-alpha-05\" : \"primary\"} col far fa-laptop`} title={__(\"Desktop Screens\", \"phenix\")} data-options=\"lg\"></button> : null}\r\n                    {this.props.xl ? <button key=\"desktop\" onClick={changeTab} className={`btn square tiny ${this.state.screen !== \"xl\" ? \"bg-alpha-05\" : \"primary\"} col far fa-desktop`} title={__(\"xLarge Screens\", \"phenix\")}  data-options=\"xl\"></button> : null}\r\n                </div>\r\n                {/*===> Screen <====*/}\r\n                <div className={`flexbox ${this.state.screen}-options`}>{screenContent(this.state.screen)}</div>\r\n            </div>\r\n        )\r\n    }\r\n}","/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport { __ } from '@wordpress/i18n';\r\nimport apiFetch from '@wordpress/api-fetch';\r\nimport {Component} from '@wordpress/element';\r\nimport { PanelBody } from '@wordpress/components';\r\n\r\n//====> Phenix Modules <====//\r\nimport OptionControl from './switch';\r\nimport FlexAlignment from './alignment';\r\nimport PhenixColor from './colors/text';\r\nimport PhenixBackground from './colors/background';\r\nimport PhenixComponentsBuilder from './panel-scripts';\r\n\r\n//===> Media Uploader <===//\r\nexport default class TemplateOptions extends Component {\r\n    //===> States <===//\r\n    state = {post_types : this.props.types || [], taxonomies: this.props.taxonomies || []};\r\n\r\n    //===> Component Rendered Hook <===//\r\n    componentDidMount() {\r\n        //===> Create Time Loop to Find the Elements <===//\r\n        PhenixComponentsBuilder();\r\n    };\r\n\r\n    //===> Render <===//\r\n    render () {\r\n        //===> Properties <===//\r\n        const {options, features, meta, onChange, types, taxonomies} = this.props;\r\n\r\n        //===> Fetch Post Types <===//\r\n        if (this.state.post_types.length < 1) apiFetch({path: 'wp/v2/types'}).then(post_types => {\r\n            //===> Define State <===//\r\n            let new_state = {...this.state};\r\n\r\n            //===> Get Current Active Types <===//\r\n            for (const [key, value] of Object.entries(post_types)) {\r\n                //===> Exclude the Core Types <===//\r\n                if (!['attachment', 'nav_menu_item', 'wp_block', 'wp_navigation', 'wp_template', 'wp_template_part'].includes(key)) {\r\n                    new_state.post_types.push({\"value\":key, \"label\":value.name});\r\n                }\r\n            }\r\n\r\n            //===> Set State <===//\r\n            this.setState({...new_state});\r\n        });\r\n\r\n        //===> Fetch Taxonomies <===//\r\n        if (this.state.taxonomies.length < 1 && this.state.post_types.length > 0) apiFetch({path: 'wp/v2/taxonomies'}).then(taxonomies => {\r\n            //===> Define Types <===//\r\n            let new_state = {...this.state};\r\n\r\n            //===> Get Current Active Types <===//\r\n            for (const [key, value] of Object.entries(taxonomies)) {\r\n                //===> Exclude the Core Types <===//\r\n                if (!['nav_menu', 'post_tag'].includes(key)) {\r\n                    new_state.taxonomies.push({\"value\":key, \"label\":value.name});\r\n                }\r\n            }\r\n\r\n            //===> Set the new List if its Deferent <===//\r\n            this.setState({...new_state});\r\n        });\r\n\r\n        //===> Define Elements Lists <===//\r\n        let panels = [], controls = [], features_panels = [];\r\n\r\n        //===> Set Value <===//\r\n        const set_value = (control) => {\r\n            //===> Get Current Value <===//\r\n            let current = {\"options\": options || {}, \"features\": features || {}},\r\n                options_trail = control.name.split(':'),\r\n                trail_length = options_trail.length,\r\n                zero = options_trail[0];\r\n\r\n            //===> Define the Value <===//            \r\n            let value;\r\n            //===> Check for Array <===//\r\n            if (control.tagName === \"SELECT\" && control.getAttribute('multiple') !== null) {\r\n                //===> Get Multiple Value <===//\r\n                let values = Phenix(control).ancestor('.px-select').getAttribute('data-value').split(','),\r\n                    array_val = [];\r\n                //===> Get Current Values <===//\r\n                values.forEach(val => val !== \"\" ? array_val.push(val) : null);\r\n                //===> Set Array Value <===//\r\n                value = array_val;\r\n            }\r\n            //===> for Check-Boxes <===//\r\n            else if (control.getAttribute('type') === 'checkbox' || control.getAttribute('type') === 'radio') { value = control.checked; }\r\n            //===> Get Normal Value <===//\r\n            else { value = control.value; }\r\n\r\n            //===> set the Value for Level 01 Options <===//\r\n            if (trail_length === 2) current[`${zero}`][`${options_trail[1]}`] = value;\r\n\r\n            //===> Manual Loop on the Options Trail <===//\r\n            else if (trail_length === 3) {\r\n                //====> Create Options Object <====//\r\n                if (!current[`${zero}`][`${options_trail[1]}`]) current[`${zero}`][`${options_trail[1]}`] = {};\r\n                //===> Set the Value <===//\r\n                current[`${zero}`][`${options_trail[1]}`][`${options_trail[2]}`] = value;\r\n            }\r\n            //===> Manual Loop on the Options Trail <===//\r\n            else if (trail_length === 4) {\r\n                //====> Create Options Object <====//\r\n                if (!current[`${zero}`][`${options_trail[1]}`]) current[`${zero}`][`${options_trail[1]}`] = {};\r\n                if (!current[`${zero}`][`${options_trail[1]}`][`${options_trail[2]}`]) current[`${zero}`][`${options_trail[1]}`][`${options_trail[2]}`] = {};\r\n                //===> Set the Value <===//\r\n                current[`${zero}`][`${options_trail[1]}`][`${options_trail[2]}`][`${options_trail[3]}`] = value;\r\n            };\r\n\r\n            //===> Set Data <===//\r\n            return onChange({...current});\r\n        };\r\n\r\n        //===> Taxonomies Controls <===//\r\n        const post_types_control = (option, option_meta, group) => {\r\n            //===> Create Post Types Select <===//\r\n            if (this.state.post_types.length > 0) {\r\n                //===> Form Control <===//\r\n                return <div key={option} className={`mb-15 col-${option_meta.size ? option_meta.size : '12'}`}>\r\n                    {/*===> Control Label <===*/}\r\n                    <label className='mb-5 tx-capitalize'>{option.replace('-', ' ')}</label>\r\n                    {/*===> Control Element <===*/}\r\n                    <div className='px-select'>\r\n                        <select name={`${group}:${option}`} data-search=\"1\" defaultValue={options?.hasOwnProperty(`${option}`) ? options[`${option}`] : option_meta.value} multiple={option_meta.multiple ? option_meta.multiple : false} onChange={event => set_value(event.target)} className='px-select pds-tm-control form-control small radius-md'>\r\n                            {this.state.post_types.map(post_type => <option key={post_type.value} value={post_type.value}>{post_type.label}</option>)}\r\n                        </select>\r\n                    </div>\r\n                </div>;\r\n            } else {\r\n                return <div key={option} className={`col-${option_meta.size ? option_meta.size : '12'}`}>\r\n                    <div className=\"px-loading-inline form-control small radius-md overflow-hidden flexbox align-center\">{__(\"Loading\",\"phenix\")}</div>\r\n                </div>\r\n            }\r\n        };\r\n\r\n        //===> Post-Type Controls <===//\r\n        const post_taxonomies_control = (option, option_meta, group) => {\r\n            //===> Create Post Types Select <===//\r\n            if (this.state.taxonomies.length > 0) {\r\n                //===> Form Control <===//\r\n                return <div key={option} className={`mb-15 col-${option_meta.size ? option_meta.size : '12'}`}>\r\n                    {/*===> Control Label <===*/}\r\n                    <label className='mb-5 tx-capitalize'>{option.replace('-', ' ')}</label>\r\n                    {/*===> Control Element <===*/}\r\n                    <div className='px-select'>\r\n                        <select name={`${group}:${option}`} data-search=\"1\" defaultValue={options?.hasOwnProperty(`${option}`) ? options[`${option}`] : option_meta.value} multiple={option_meta.multiple ? option_meta.multiple : false} onChange={event => set_value(event.target)} className='px-select pds-tm-control form-control small radius-md'>\r\n                            {this.state.taxonomies.map(taxonomy => <option key={taxonomy.value} value={taxonomy.value}>{taxonomy.label}</option>)}\r\n                        </select>\r\n                    </div>\r\n                </div>;\r\n            } else {\r\n                return <div key={option} className={`col-${option_meta.size ? option_meta.size : '12'}`}>\r\n                    <div className=\"px-loading-inline form-control small radius-md overflow-hidden flexbox align-center\">{__(\"Loading\",\"phenix\")}</div>\r\n                </div>\r\n            }\r\n        };\r\n\r\n        //===> Array Controls <===//\r\n        const post_array_control = (option, option_meta, group) => {\r\n            //===> Form Control <===//\r\n            return <div key={option} className={`mb-15 col-${option_meta.size ? option_meta.size : '12'}`}>\r\n                {/*===> Control Label <===*/}\r\n                <label className='mb-5 tx-capitalize'>{option.replace('-', ' ')}</label>\r\n                {/*===> Control Element <===*/}\r\n                <div className='px-select'>\r\n                    <select name={`${group}:${option}`} data-search=\"1\" defaultValue={options?.hasOwnProperty(`${option}`) ? options[`${option}`] : \"\"} multiple={option_meta.multiple ? option_meta.multiple : false} onChange={event => set_value(event.target)} className='px-select pds-tm-control form-control small radius-md'>\r\n                        {option_meta.value.map(item => <option key={item.value} value={item.value}>{item.label}</option>)}\r\n                    </select>\r\n                </div>\r\n            </div>;\r\n        };\r\n\r\n        //===> Switch Buttons <===//\r\n        const switch_control = (option, option_meta, group) => {\r\n            let label = option.replace('-', ' ').toUpperCase();\r\n            //===> Label Correction <===//\r\n            if (option === 'status') label = `${__('Enable','phenix')} ${group.replace('-', ' ').replace('options:','')}`;\r\n\r\n            //===> Create Component <===//\r\n            return <div className={`mb-10 col-${option_meta.size ? option_meta.size : 12}`} key={`${option}`}>\r\n                <OptionControl name={`${group}:${option}`} checked={options?.hasOwnProperty(`${option}`) ? options[`${option}`] : option_meta.value} onChange={set_value} type='switch-checkbox' className='small me-5 tx-capitalize'>{label}</OptionControl>\r\n            </div>;\r\n        };\r\n\r\n        //===> Create the Template Meta Data <===//\r\n        if (meta.hasOwnProperty('options')) {\r\n            //===> Loop Through Template Options <===//\r\n            Object.entries(meta['options']).forEach(([option, option_meta]) => {\r\n                //===> Define Element <===//\r\n                let element;\r\n\r\n                //===> Create Post Types Select <===//\r\n                if (option_meta.type === \"post-type\") element = post_types_control(option, option_meta, 'options');\r\n\r\n                //===> Create Taxonomies Select <===//\r\n                if (option_meta.type === \"taxonomies\") element = post_taxonomies_control(option, option_meta, 'options');\r\n\r\n                //===> Create Switch Button <===//\r\n                if(option_meta.type === \"boolean\") element = switch_control(option, option_meta, 'options');\r\n\r\n                //===> Create Array Controls <===//\r\n                if(option_meta.type === \"select\") element = post_array_control(option, option_meta, 'options');\r\n\r\n                //====> Group of Options <====//\r\n                if (option_meta.type === \"options\") {\r\n                    //===> Define Sub Options <===//\r\n                    let sub_options = [];\r\n\r\n                    //===> Create Sub-Options <===//\r\n                    Object.entries(option_meta.value).forEach(([sub_option, sub_option_meta]) => {\r\n                        //====> for the Status Controller and any Switch Button <====//\r\n                        if (sub_option === 'status') sub_options.push(switch_control(sub_option, sub_option_meta, `options:${option}`));\r\n\r\n                        //====> for the Others Controllers <====//\r\n                        if (options?.hasOwnProperty(`${option}`) && options[`${option}`].hasOwnProperty('status')) {\r\n                            if (options[`${option}`].status === true) {\r\n                                //===> Create Post Types Select <===//\r\n                                if (sub_option_meta.type === \"post-type\") sub_options.push(post_types_control(sub_option, sub_option_meta, `options:${option}`));\r\n\r\n                                //===> Create Taxonomies Select <===//\r\n                                if (sub_option_meta.type === \"taxonomies\") sub_options.push(post_taxonomies_control(sub_option, sub_option_meta, `options:${option}`));\r\n\r\n                                //===> Create Switch Buttons <===//\r\n                                if (sub_option_meta.type === \"boolean\" && sub_option !== 'status') sub_options.push(switch_control(sub_option, sub_option_meta, `options:${option}`));\r\n                                \r\n                                //===> Create Array Controls <===//\r\n                                if (sub_option_meta.type === \"select\") sub_options.push(post_array_control(sub_option, sub_option_meta, `options:${option}`));\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    //===> Controls Group <===//\r\n                    element = <div key={option} className={`col-12`}>\r\n                        <div className='row gpx-10'>{sub_options}</div>\r\n                    </div>;\r\n                }\r\n\r\n                //===> Add the Element <===//\r\n                if (element) controls.push(element);\r\n            });\r\n\r\n            {/*===> Options Panel <===*/}\r\n            if(controls.length > 0) panels.push(<PanelBody key=\"template-options\" title={__(\"Template Options\", \"phenix\")} initialOpen={true}><div className='row gpx-10'>{controls}</div></PanelBody>)\r\n            {/*===> Features Panel <===*/}\r\n            if(features_panels.length > 0) panels.push(<PanelBody key=\"template-features\" title={__(\"Template Features\", \"phenix\")} initialOpen={true}><div className='row gpx-10'>{features_panels}</div></PanelBody>)\r\n        }\r\n\r\n        //===> Output <===//\r\n        return (<>{panels}</>);\r\n    }\r\n}","/*\r\n * ===> 01 - Import Assets\r\n * ===> 02 - Import Block Functions\r\n * ===> 03 - Register Block\r\n*/\r\n\r\n//===> WordPress Modules <===//\r\nimport {MediaUpload} from '@wordpress/block-editor';\r\nimport {Component} from '@wordpress/element';\r\n\r\n//===> Media Uploader <===//\r\nexport default class MediaUploader extends Component {\r\n    render () {\r\n        //===> Properties <===//\r\n        const {\r\n            label,\r\n            value,\r\n            size,\r\n            type,\r\n            setValue,\r\n            className,\r\n        } = this.props;\r\n\r\n        //===> Output <===//\r\n        return (<>\r\n            <MediaUpload onSelect={ setValue } value={value} render={({open}) => (\r\n                    <div className=\"mouse-pointer\" onClick={open}>\r\n                        {/* label */}\r\n                        {label ? <label className=\"mb-5\">{label}</label> : ''}\r\n                        {/* elements group */}\r\n                        <div className={`${className ? `${className}` : \"\"}`}>\r\n                            {size === 'small' ?\r\n                                <div className='flexbox align-center-y align-between pd-5 border-solid border-1 border-alpha-15 radius-sm'>\r\n                                    {!type || type === 'image' ? <img src={value} style={{\"maxHeight\": \"1.5rem\"}} /> : null}\r\n                                    <button key=\"change-media\" onClick={open} className=\"btn square primary tiny radius-sm fs-12 fas fa-upload\"></button>\r\n                                </div>\r\n                                :\r\n                                <div className='flexbox align-center-y align-between'>\r\n                                    {!type || type === 'image' ? <img src={value} className=\"radius-sm radius-top\" style={{\"maxWidth\": \"100%\", \"display\": \"block\"}} /> : null}\r\n                                    <button key=\"change-media\" onClick={open} className=\"btn fluid primary small radius-sm radius-bottom fs-13 far fa-camera btn-icon\">Select File</button>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        {/* //elements group */}\r\n                    </div>\r\n                )}\r\n            />\r\n        </>\r\n        )\r\n    }\r\n}","//====> WP Modules <====//\r\nimport { __ } from '@wordpress/i18n';\r\n\r\nimport {\r\n    PanelBody,\r\n    SelectControl,\r\n    ToggleControl,\r\n} from '@wordpress/components';\r\n\r\nimport {\r\n    useBlockProps,\r\n    InspectorControls\r\n} from '@wordpress/block-editor';\r\n\r\nimport { useState, useEffect } from '@wordpress/element';\r\nimport apiFetch from '@wordpress/api-fetch';\r\nimport ServerSideRender from '@wordpress/server-side-render';\r\n\r\n//====> Phenix Modules <====//\r\nimport ScreensTabs from \"../px-controls/tabs\";\r\nimport PhenixNumber from \"../px-controls/number\";\r\nimport OptionControl from '../px-controls/switch';\r\nimport TemplateOptions from '../px-controls/templates-meta';\r\nimport PhenixComponentsBuilder from '../px-controls/panel-scripts';\r\n\r\n//====> Edit Mode <====//\r\nexport default function Edit(props) {\r\n    //===> Get Properties <===//\r\n    const {attributes, setAttributes} = props;\r\n    const blockProps = useBlockProps();\r\n    const [state, set_state] = useState({\r\n        post_types: [{label: __(\"Default\", \"phenix\"), value: \"\"}],\r\n        taxonomies: [],\r\n        templates_meta: {},\r\n        template_list: [<option key={__(\"Default\", \"phenix\")} value=\"\">{__(\"Default\", \"phenix\")}</option>],\r\n    });\r\n\r\n    //===> Query Options <===//\r\n    const set_order = order => setAttributes({ order });\r\n    const set_post_type  = post_type  => setAttributes({ post_type });\r\n    const set_grid_mode = grid_mode => setAttributes({ grid_mode });\r\n    const set_per_page   = per_page   => setAttributes({ per_page });\r\n    const set_pagination = pagination => setAttributes({ pagination });\r\n    const set_template_part = changed => setAttributes({ template_part: changed.target.value });\r\n\r\n    const set_slider_mode = value => {\r\n        //===> Define Data <===//\r\n        let options = attributes.grid;\r\n\r\n        //===> Convert Grid to Slider <===//\r\n        if (options.state && value) options.state = false;\r\n        if (options.cols && parseInt(options.cols) < 1) options.cols = 1;\r\n\r\n        //===> Set Value <===//\r\n        setAttributes({slider_mode: value, grid: {...options}});\r\n    };\r\n\r\n    //===> Grid Options <===//\r\n    const set_grid_cols = value => {\r\n        //===> Define Data <===//\r\n        let grid_ops = attributes.grid;\r\n        //===> Set Value <===//\r\n        grid_ops.cols = value;\r\n        setAttributes({ grid: {...grid_ops} });\r\n    },\r\n\r\n    set_grid_cols_resp = (value, screen) => {\r\n        //===> Define Data <===//\r\n        let grid_ops = attributes.grid;\r\n        //===> Set Value <===//\r\n        grid_ops[`cols-${screen}`] = value;\r\n        setAttributes({ grid: {...grid_ops} });\r\n    },\r\n\r\n    set_grid_state = target => {\r\n        //==> Get Current <==//\r\n        let grid_ops = attributes.grid;\r\n\r\n        //==> Set Value <==//\r\n        grid_ops.state = target.checked;\r\n        console.log(grid_ops);\r\n        setAttributes({grid : {...grid_ops}});\r\n    };\r\n\r\n    //===> Grid Utilites <===//\r\n    const set_grid_flow = target => {\r\n        //==> Get Current <==//\r\n        let grid_ops = attributes.grid;\r\n\r\n        //==> Set Value <==//\r\n        grid_ops.flow = target.checked ? target.value : \"\";\r\n        setAttributes({grid : {...grid_ops}});\r\n    },\r\n\r\n    set_grid_masonry = target => {\r\n        //==> Get Current <==//\r\n        let grid_ops = attributes.grid;\r\n\r\n        //==> Set Value <==//\r\n        grid_ops.masonry = target.checked ? target.value : \"\";\r\n        setAttributes({grid : {...grid_ops}});\r\n    };\r\n\r\n    //===> Slider Options <===//\r\n    const set_slider_type = value => {\r\n        //==> Get Current <==//\r\n        let options = attributes.slider;\r\n\r\n        //==> Set Value <==//\r\n        options.type = value;\r\n        setAttributes({ slider : {...options} });\r\n    },\r\n\r\n    set_slider_steps = value => {\r\n        //==> Get Current <==//\r\n        let options = attributes.slider;\r\n\r\n        //==> Set Value <==//\r\n        options.steps = value;\r\n        setAttributes({ slider : {...options} });\r\n    },\r\n\r\n    set_slider_duration = value => {\r\n        //==> Get Current <==//\r\n        let options = attributes.slider;\r\n\r\n        //==> Set Value <==//\r\n        options.duration = value;\r\n        setAttributes({ slider : {...options} });\r\n    },\r\n\r\n    set_slider_speed = value => {\r\n        //==> Get Current <==//\r\n        let options = attributes.slider;\r\n\r\n        //==> Set Value <==//\r\n        options.speed = value;\r\n        setAttributes({ slider : {...options} });\r\n    },\r\n\r\n    set_slider_autoplay = value => {\r\n        //==> Get Current <==//\r\n        let options = attributes.slider;\r\n\r\n        //==> Set Value <==//\r\n        options.autoplay = value;\r\n        setAttributes({slider : {...options}});\r\n    },\r\n\r\n    set_slider_controls = value => {\r\n        //==> Get Current <==//\r\n        let options = attributes.slider;\r\n\r\n        //==> Set Value <==//\r\n        options.controls = value;\r\n        setAttributes({slider : {...options}});\r\n    },\r\n\r\n    set_slider_pagination = value => {\r\n        //==> Get Current <==//\r\n        let options = attributes.slider;\r\n\r\n        //==> Set Value <==//\r\n        options.pagination = value;\r\n        setAttributes({slider : {...options}});\r\n    };\r\n\r\n    //===> Responsive Options <===//\r\n    const responsive_options = (screen) => {\r\n        //===> Layout <===//\r\n        return <>\r\n            {/*===> Column <===*/}\r\n            <div className='col col-6 mb-15'>\r\n                <PhenixNumber label={__(\"Columns No.\", \"phenix\")} value={attributes.grid[`cols-${screen}`] || 0} onChange={value => set_grid_cols_resp(value, screen)} min={0} max={12}></PhenixNumber>\r\n            </div>\r\n            {/*===> // Column <===*/}\r\n        </>\r\n    };\r\n\r\n    //===> Fetching Data <===//\r\n    useEffect(() => {\r\n        //===> Fetch Post Types <===//\r\n        if (state.post_types.length < 2) {\r\n            apiFetch({path: 'wp/v2/types'}).then(post_types => {\r\n                //===> Reset Types <===//\r\n                let new_state = state;\r\n        \r\n                //===> Get Current Active Types <===//\r\n                for (const [key, value] of Object.entries(post_types)) {\r\n                    //===> Exclude the Core Types <===//\r\n                    if (!['attachment', 'nav_menu_item', 'wp_block', 'wp_navigation', 'wp_template', 'wp_template_part'].includes(key)) {\r\n                        new_state.post_types.push({\"value\":key, \"label\":value.name});\r\n                    }\r\n                }\r\n\r\n                //===> Fetch PDS Options <===//\r\n                apiFetch({path: 'pds-blocks/v2/options'}).then(options => {\r\n                    //===> Create New Array <===//\r\n                    let meta_templates = options.templates_meta,\r\n                        template_parts = options.theme_parts;\r\n\r\n                    //===> Loop Through Theme-Parts <===//\r\n                    Object.entries(template_parts).forEach(([key, value]) => {\r\n                        //===> if its direct theme-part <===//\r\n                        if(typeof(value) === 'string') {\r\n                            new_state.template_list.push(<option key={`${key}-${value}`} value={value.replace(\".php\", \"\")}>{value.replace('-', ' ').replace('_', '').replace(\".php\", \"\")}</option>);\r\n                        }\r\n                        //===> if its nested theme-part in a directory <===//\r\n                        else {\r\n                            //===> Define Directory Files <===//\r\n                            let files_list = [];\r\n                            //===> Loop Through Files <===//\r\n                            Object.entries(value).forEach(([key2, value]) => {\r\n                                //===> add the file to the list <===//\r\n                                files_list.push(<option key={`${key2}-${value}`} value={`${key}/${value.replace(\".php\", \"\")}`}>{`${value.replace('-', ' ').replace('_', '').replace(\".php\", \"\")}`}</option>);\r\n                            });\r\n                            //===> Push the Options Group <===//\r\n                            new_state.template_list.push(<optgroup key={`${key}-group`} label={`${key}`}>{files_list}</optgroup>);\r\n                        }\r\n                    });\r\n\r\n                    //===> Get Phenix Data <===//\r\n                    if(meta_templates !== state.templates_meta) new_state.templates_meta = meta_templates;\r\n\r\n                    //===> Set the new List if its Deferent <===//\r\n                    if (new_state !== state) set_state([...new_state]);\r\n                });\r\n            });\r\n        }\r\n\r\n        //===> Run Phenix Components <===//\r\n        PhenixComponentsBuilder();\r\n    }, [attributes, state]);\r\n\r\n    //===> Render <===//\r\n    return (<>\r\n        {/* //====> Controls Layout <====// */}\r\n        <InspectorControls key=\"inspector\">\r\n            {/*===> Widget Panel <===*/}\r\n            <PanelBody title={__(\"General Setting\", \"phenix\")} initialOpen={true}>\r\n                {/*===> Post Type <===*/}\r\n                <SelectControl label={__(\"Data Type\", \"phenix\")} value={attributes.post_type} onChange={set_post_type} options={state.post_types} />\r\n\r\n                {/*===> Group <===*/}\r\n                {attributes.post_type !== 'default' ? \r\n                <div className='row gpx-20 mb-15'>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6'>\r\n                        <PhenixNumber label={__(\"Per Page\", \"phenix\")} value={ attributes.per_page } onChange={set_per_page} min={3} max={36}></PhenixNumber>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6'>\r\n                        <SelectControl label={__(\"Order By\", \"phenix\")} value={attributes.order} onChange={set_order} options={[\r\n                            { label: __('Oldest', \"phenix\"), value: 'ASC' },\r\n                            { label: __('Newest', \"phenix\"),  value: 'DESC' },\r\n                        ]}/>\r\n                    </div>\r\n                    {/*===> // Column <===*/}\r\n                </div> : \"\"}\r\n\r\n                {/*=== Card Template ===*/}\r\n                <label className='mb-5'>{__(\"Card Template\", \"phenix\")}</label>\r\n                <div className='px-select mb-15'>\r\n                    <select name=\"template-name\" data-placeholder={__(\"Default\", \"phenix\")} onChange={set_template_part} className='px-select form-control pds-tm-control small radius-md' data-search=\"1\" defaultValue={ attributes.template_part }>\r\n                        {state.template_list}\r\n                    </select>\r\n                </div>\r\n\r\n                {/*===> Group <===*/}\r\n                <div className='row gpx-20 mb-15'>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6'>\r\n                        <ToggleControl label={__(\"Pagination\", \"phenix\")} checked={attributes.pagination} onChange={set_pagination}/>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6'>\r\n                        <ToggleControl label={__(\"Grid Mode\", \"phenix\")} checked={attributes.grid_mode} onChange={set_grid_mode}/>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6'>\r\n                        <ToggleControl label={__(\"Slider Mode\", \"phenix\")} checked={attributes.slider_mode} onChange={set_slider_mode}/>\r\n                    </div>\r\n                    {/*===> // Column <===*/}\r\n                </div>\r\n            </PanelBody>\r\n            {/*===> Widget Panel <===*/}\r\n            {attributes.grid_mode && !attributes.slider_mode ? <PanelBody title={__(\"Loop Grid\", \"phenix\")} initialOpen={true}>\r\n                {/*===> Columns No. in Row <===*/}\r\n                {!attributes.grid.state ? <div className=\"mb-15\">\r\n                    <PhenixNumber label={__(\"Columns in Row\", \"phenix\")} icon=\"far fa-mobile-android\" value={attributes.grid.cols?.replace(\"row-cols-\", \"\") || 1} onChange={set_grid_cols} min={0} max={12}></PhenixNumber>\r\n                </div> : \"\"}\r\n\r\n                {/*===> Switch Button <===*/}\r\n                <OptionControl name='grid-state' checked={attributes.grid.state} onChange={set_grid_state} type='switch-checkbox' className='small'>\r\n                    <span>{__(\"Free Columns Size ?\", \"phenix\")}</span>\r\n                </OptionControl>\r\n\r\n                {/*===> Switch Buttons <===*/}\r\n                <div className='row gpx-15 mb-15'>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6'>\r\n                        {/*===> Switch Button <===*/}\r\n                        <OptionControl name='grid-state' value=\"flow-reverse\" checked={attributes.grid.flow?.length > 0} onChange={set_grid_flow} type='switch-checkbox' className='small'>\r\n                            <span>{__(\"Reverse\", \"phenix\")}</span>\r\n                        </OptionControl>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6'>\r\n                        {/*===> Switch Button <===*/}\r\n                        <OptionControl name='grid-masonry' value=\"px-masonry\" checked={attributes.grid.masonry?.length > 0} onChange={set_grid_masonry} type='switch-checkbox' className='small'>\r\n                            <span>{__(\"Masonry\", \"phenix\")}</span>\r\n                        </OptionControl>\r\n                    </div>\r\n                    {/*===> // Column <===*/}\r\n                </div>\r\n            </PanelBody> : null}\r\n            {/*===> Widget Panel <===*/}\r\n            {attributes.slider_mode ? <PanelBody title={__(\"Slider Options\", \"phenix\")} initialOpen={true}>\r\n                {/*===> Elements Group <===*/}\r\n                <div className='row gpx-20'>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-12 mb-15'>\r\n                        <SelectControl label={__(\"Type\", \"phenix\")} value={attributes.slider_type} onChange={set_slider_type} options={[\r\n                            { label: __('Loop', \"phenix\"), value: 'loop' },\r\n                            { label: __('Fading', \"phenix\"),  value: 'fade' },\r\n                            { label: __('Sliding', \"phenix\"),  value: 'slide' },\r\n                        ]}/>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6 mb-15'>\r\n                        <PhenixNumber label={__(\"Columns No.\", \"phenix\")} value={attributes.grid.cols ? attributes.grid.cols : 1} onChange={set_grid_cols} min={0} max={12}></PhenixNumber>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6 mb-15'>\r\n                        <PhenixNumber label={__(\"Steps\", \"phenix\")} value={attributes.slider.steps || 1} onChange={set_slider_steps} min={1} max={12}></PhenixNumber>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6 mb-15'>\r\n                        <PhenixNumber label={__(\"Duration\", \"phenix\")} value={attributes.slider.duration || 6000} onChange={set_slider_duration} min={3000} max={20000} steps={100}></PhenixNumber>\r\n                    </div>\r\n                    {/*===> Column <===*/}\r\n                    <div className='col-6 mb-15'>\r\n                        <PhenixNumber label={__(\"Speed\", \"phenix\")} value={attributes.slider.speed || 700} onChange={set_slider_speed} min={300} max={3000} steps={100}></PhenixNumber>\r\n                    </div>\r\n                    {/*===> // Column <===*/}\r\n                </div>\r\n\r\n                {/*===> Switch Buttons <===*/}\r\n                <div className='pdt-15 divider-t'>\r\n                    <ToggleControl label={__(\"Enable Autoplay\", \"phenix\")} checked={attributes.slider.autoplay || false} onChange={set_slider_autoplay}/>\r\n                    <ToggleControl label={__(\"Enable Arrows Buttons\", \"phenix\")} checked={attributes.slider.controls || false} onChange={set_slider_controls}/>\r\n                    <ToggleControl label={__(\"Enable Bullet Pagination\", \"phenix\")} checked={attributes.slider.pagination || false} onChange={set_slider_pagination}/>\r\n                </div>\r\n            </PanelBody> : null}\r\n            {/*===> Widgets Panel <===*/}\r\n            <PanelBody title={__(\"Responsive Options\", \"phenix\")} initialOpen={false}>\r\n                <ScreensTabs md={responsive_options} lg={responsive_options} xl={responsive_options} />\r\n            </PanelBody>\r\n            {/*===> End Widgets Panels <===*/}\r\n        </InspectorControls>\r\n\r\n        {/* //====> Edit Layout <====// */}\r\n        {attributes.preview ? \r\n            <img src=\"https://design.phenixthemes.com/px-assets/slider-placeholder.svg\" alt=\"\" className='fluid' />\r\n        :\r\n            <div {...blockProps}>\r\n                <ServerSideRender block=\"phenix/query\" attributes={attributes} />\r\n            </div>\r\n        }\r\n    </>);\r\n}","module.exports = window[\"wp\"][\"apiFetch\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"wp\"][\"serverSideRender\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","/*\r\n * ===> 01 - Block Data\r\n * ===> 02 - WordPress Modules\r\n * ===> 03 - Register Block\r\n * ===> 03 - Block Save Mode [Output]\r\n*/\r\n\r\n//===> Block Data <===//\r\nimport Edit from './edit';\r\nimport metadata from './block.json';\r\n\r\n//===> WordPress Modules <===//\r\nimport { registerBlockType } from '@wordpress/blocks';\r\n\r\n//===> Register Block <===//\r\nregisterBlockType(metadata.name, {\r\n    title      : metadata.title,\r\n    category   : metadata.category,\r\n    attributes : metadata.attributes,\r\n    icon  : <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\"><path d=\"M494.9 96.01c-38.78 0-75.22 15.09-102.6 42.5L320 210.8L247.8 138.5c-27.41-27.41-63.84-42.5-102.6-42.5C65.11 96.01 0 161.1 0 241.1v29.75c0 80.03 65.11 145.1 145.1 145.1c38.78 0 75.22-15.09 102.6-42.5L320 301.3l72.23 72.25c27.41 27.41 63.84 42.5 102.6 42.5C574.9 416 640 350.9 640 270.9v-29.75C640 161.1 574.9 96.01 494.9 96.01zM202.5 328.3c-15.31 15.31-35.69 23.75-57.38 23.75C100.4 352 64 315.6 64 270.9v-29.75c0-44.72 36.41-81.13 81.14-81.13c21.69 0 42.06 8.438 57.38 23.75l72.23 72.25L202.5 328.3zM576 270.9c0 44.72-36.41 81.13-81.14 81.13c-21.69 0-42.06-8.438-57.38-23.75l-72.23-72.25l72.23-72.25c15.31-15.31 35.69-23.75 57.38-23.75C539.6 160 576 196.4 576 241.1V270.9z\"/></svg>,\r\n    /**===> @see ./edit.js <===*/\r\n    edit  : Edit,\r\n    save  : () => null\r\n});"],"names":["Component","PhenixNumber","_Component","_inherits","_super","_classCallCheck","apply","arguments","key","value","_this$props","this","props","label","min","max","steps","icon","onChange","name","DecreaseNum","clicked","button","target","wrapper","Phenix","ancestor","minNum","parseInt","step","input","querySelector","newVal","React","createElement","className","onClick","type","changed","maxNum","finder_counter","element_finder","setInterval","document","querySelectorAll","forEach","element","classList","contains","select","clearInterval","viewScript","the_document","time_counter","pds_elements_timer","style","backgroundImage","multimedia","row","add","getAttribute","setAttribute","menu","window","frames","OptionControl","_this","_len","length","args","Array","_key","_defineProperty","_assertThisInitialized","call","concat","checked","children","required","options","attributes","event","defaultChecked","includes","_extends","replace","ScreensTabs","screen","sm","_this2","screenContent","lg","xl","md","state","changeTab","setState","title","__","MediaUploader","size","setValue","Fragment","MediaUpload","onSelect","render","_ref","open","src","Edit","_attributes$grid$cols","_attributes$grid$flow","_attributes$grid$maso","setAttributes","blockProps","useBlockProps","_useState2","_slicedToArray","useState","post_types","taxonomies","templates_meta","template_list","set_state","set_grid_cols","grid_ops","grid","cols","_objectSpread","responsive_options","set_grid_cols_resp","useEffect","apiFetch","path","then","new_state","_i2","_Object$entries","Object","entries","_Object$entries$_i","push","meta_templates","template_parts","theme_parts","_ref2","files_list","_ref3","_ref4","key2","PhenixComponentsBuilder","InspectorControls","PanelBody","initialOpen","SelectControl","post_type","per_page","order","template_part","defaultValue","ToggleControl","pagination","grid_mode","slider_mode","console","log","flow","masonry","slider_type","slider","duration","speed","autoplay","controls","preview","alt","ServerSideRender","block","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","registerBlockType","metadata","category","xmlns","viewBox","edit","save"],"sourceRoot":""}