import{_ as i,c as e,o as a,ag as t}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"Build Tools for SASS","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/getting-started/sass/build-tools.md","filePath":"frontend/getting-started/sass/build-tools.md"}'),n={name:"frontend/getting-started/sass/build-tools.md"};function l(o,s,p,h,r,d){return a(),e("div",null,s[0]||(s[0]=[t(`<h1 id="build-tools-for-sass" tabindex="-1">Build Tools for SASS <a class="header-anchor" href="#build-tools-for-sass" aria-label="Permalink to &quot;Build Tools for SASS&quot;">​</a></h1><p>This guide covers the build tools and processes used to compile Phenix Design System&#39;s SASS files into CSS.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The Phenix Design System uses a modern build process to compile SASS files into optimized CSS. This process includes:</p><ul><li>Compiling SASS to CSS</li><li>CSS minification</li><li>Source maps generation</li><li>Support for both LTR and RTL versions</li></ul><h2 id="build-tools-used" tabindex="-1">Build Tools Used <a class="header-anchor" href="#build-tools-used" aria-label="Permalink to &quot;Build Tools Used&quot;">​</a></h2><h3 id="_1-node-js-and-npm" tabindex="-1">1. Node.js and NPM <a class="header-anchor" href="#_1-node-js-and-npm" aria-label="Permalink to &quot;1. Node.js and NPM&quot;">​</a></h3><p>Phenix uses Node.js as its JavaScript runtime environment and NPM for package management. The build process requires:</p><ul><li>Node.js v14.0.0 or higher</li><li>NPM v6.0.0 or higher</li></ul><h3 id="_2-node-sass" tabindex="-1">2. node-sass <a class="header-anchor" href="#_2-node-sass" aria-label="Permalink to &quot;2. node-sass&quot;">​</a></h3><p>The <a href="https://www.npmjs.com/package/node-sass" target="_blank" rel="noreferrer">node-sass</a> package is used to directly compile SASS to CSS. It provides:</p><ul><li>Fast compilation of SASS files</li><li>Source map generation</li><li>Various output options (compressed, expanded, etc.)</li><li>Direct CLI usage without additional build tools</li></ul><h3 id="_3-concurrently" tabindex="-1">3. Concurrently <a class="header-anchor" href="#_3-concurrently" aria-label="Permalink to &quot;3. Concurrently&quot;">​</a></h3><p><a href="https://www.npmjs.com/package/concurrently" target="_blank" rel="noreferrer">Concurrently</a> is used to run multiple build processes simultaneously, improving the development workflow.</p><h2 id="build-configuration" tabindex="-1">Build Configuration <a class="header-anchor" href="#build-configuration" aria-label="Permalink to &quot;Build Configuration&quot;">​</a></h2><h3 id="package-json-scripts" tabindex="-1">Package.json Scripts <a class="header-anchor" href="#package-json-scripts" aria-label="Permalink to &quot;Package.json Scripts&quot;">​</a></h3><p>The build process is defined in the package.json scripts section. Here are scripts used:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;phenix-start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;concurrently --kill-others </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run phenix-sass</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run phenix-ts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run phenix-blocks</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;phenix-ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npx webpack --config typescript.webpack.js --watch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;phenix-sass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npx node-sass --watch src/sass -o assets/css --output-style compressed --source-map true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;phenix-blocks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wp-scripts start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;animate-sass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npx node-sass --watch src/animations/ -o assets/css/animations/ --output-style compressed&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>These scripts demonstrate the direct use of node-sass without intermediate build tools like Gulp.</p><h2 id="key-scripts-explained" tabindex="-1">Key Scripts Explained <a class="header-anchor" href="#key-scripts-explained" aria-label="Permalink to &quot;Key Scripts Explained&quot;">​</a></h2><h3 id="phenix-sass" tabindex="-1">phenix-sass <a class="header-anchor" href="#phenix-sass" aria-label="Permalink to &quot;phenix-sass&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node-sass</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/sass</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assets/css</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --output-style</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compressed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --source-map</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><p>This script:</p><ul><li>Uses node-sass directly</li><li>Watches the src/sass directory for changes</li><li>Outputs compiled CSS to assets/css</li><li>Compresses the output CSS (minification)</li><li>Generates source maps for debugging</li></ul><h3 id="animate-sass" tabindex="-1">animate-sass <a class="header-anchor" href="#animate-sass" aria-label="Permalink to &quot;animate-sass&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node-sass</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --watch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/animations/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assets/css/animations/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --output-style</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compressed</span></span></code></pre></div><p>This script handles animation-specific SASS files, compiling them separately from the main stylesheets.</p><h3 id="phenix-start" tabindex="-1">phenix-start <a class="header-anchor" href="#phenix-start" aria-label="Permalink to &quot;phenix-start&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concurrently</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kill-others</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npm run phenix-sass&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npm run phenix-ts&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npm run phenix-blocks&quot;</span></span></code></pre></div><p>This script runs multiple processes in parallel:</p><ul><li>SASS compilation</li><li>TypeScript compilation</li><li>WordPress blocks development</li></ul><h2 id="running-the-build-process" tabindex="-1">Running the Build Process <a class="header-anchor" href="#running-the-build-process" aria-label="Permalink to &quot;Running the Build Process&quot;">​</a></h2><h3 id="development-mode" tabindex="-1">Development Mode <a class="header-anchor" href="#development-mode" aria-label="Permalink to &quot;Development Mode&quot;">​</a></h3><p>For development, use the phenix-start script to start all development processes:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> phenix-start</span></span></code></pre></div><p>Or if you only need to compile SASS:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> phenix-sass</span></span></code></pre></div><p>These commands start watch processes that automatically recompile files when changes are detected.</p><h3 id="working-with-animations" tabindex="-1">Working with Animations <a class="header-anchor" href="#working-with-animations" aria-label="Permalink to &quot;Working with Animations&quot;">​</a></h3><p>To work with animation files separately:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> animate-sass</span></span></code></pre></div><h2 id="output-files" tabindex="-1">Output Files <a class="header-anchor" href="#output-files" aria-label="Permalink to &quot;Output Files&quot;">​</a></h2><p>The build process generates the following files in the assets/css directory:</p><ul><li><code>phenix.css</code> - Main LTR stylesheet</li><li><code>phenix-rtl.css</code> - RTL version of the main stylesheet</li><li><code>phenix-utils.css</code> - Utilities-only LTR stylesheet</li><li><code>phenix-utils-rtl.css</code> - Utilities-only RTL stylesheet</li><li><code>admin.css</code> - Admin-specific LTR styles</li><li><code>admin-rtl.css</code> - Admin-specific RTL styles</li><li>Source maps for all CSS files</li></ul><h2 id="node-sass-options-explained" tabindex="-1">node-sass Options Explained <a class="header-anchor" href="#node-sass-options-explained" aria-label="Permalink to &quot;node-sass Options Explained&quot;">​</a></h2><p>The build process uses several node-sass options:</p><ul><li><code>--watch</code>: Watches for file changes and recompiles automatically</li><li><code>-o, --output</code>: Specifies the output directory</li><li><code>--output-style</code>: Determines CSS formatting (compressed, expanded, etc.)</li><li><code>--source-map</code>: Generates source maps for debugging</li></ul><h2 id="customizing-the-build-process" tabindex="-1">Customizing the Build Process <a class="header-anchor" href="#customizing-the-build-process" aria-label="Permalink to &quot;Customizing the Build Process&quot;">​</a></h2><h3 id="creating-your-own-build-script" tabindex="-1">Creating Your Own Build Script <a class="header-anchor" href="#creating-your-own-build-script" aria-label="Permalink to &quot;Creating Your Own Build Script&quot;">​</a></h3><p>You can create custom build scripts for specific needs by adding to the scripts section in package.json:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;custom-theme&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npx node-sass src/themes/custom -o dist/themes/custom --output-style compressed&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="additional-node-sass-options" tabindex="-1">Additional node-sass Options <a class="header-anchor" href="#additional-node-sass-options" aria-label="Permalink to &quot;Additional node-sass Options&quot;">​</a></h3><p>node-sass provides many options for customization:</p><ul><li><code>--include-path</code>: Add directories to the SASS import resolution path</li><li><code>--precision</code>: Set decimal precision for output</li><li><code>--importer</code>: Provide custom importers for handling imports</li><li><code>--functions</code>: Define custom SASS functions</li></ul><p>Example:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node-sass</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --include-path=node_modules/foundation-sites/scss</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/custom</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist/css</span></span></code></pre></div><h2 id="rtl-support" tabindex="-1">RTL Support <a class="header-anchor" href="#rtl-support" aria-label="Permalink to &quot;RTL Support&quot;">​</a></h2><p>The Phenix Design System generates RTL stylesheets by using separate SASS entry files:</p><ul><li><code>phenix.scss</code> - For LTR</li><li><code>phenix-rtl.scss</code> - For RTL</li></ul><p>These files set different direction variables that control directional properties throughout the framework.</p><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><h3 id="common-build-issues" tabindex="-1">Common Build Issues <a class="header-anchor" href="#common-build-issues" aria-label="Permalink to &quot;Common Build Issues&quot;">​</a></h3><ol><li><p><strong>Node SASS compatibility issues</strong>:</p><ul><li>Error: <code>Node Sass version 6.0.0 is incompatible with ^4.0.0</code></li><li>Solution: Run <code>npm rebuild node-sass</code> or update node-sass version in package.json</li></ul></li><li><p><strong>Missing dependencies</strong>:</p><ul><li>Error: <code>Cannot find module &#39;node-sass&#39;</code></li><li>Solution: Run <code>npm install</code> to install all dependencies</li></ul></li><li><p><strong>Permission issues</strong>:</p><ul><li>Error: <code>EACCES: permission denied, open &#39;assets/css/phenix.css&#39;</code></li><li>Solution: Check file permissions and ensure write access to the output directory</li></ul></li><li><p><strong>Path issues</strong>:</p><ul><li>Error: <code>no such file or directory</code></li><li>Solution: Make sure your paths are correct and all referenced directories exist</li></ul></li></ol><h3 id="getting-help" tabindex="-1">Getting Help <a class="header-anchor" href="#getting-help" aria-label="Permalink to &quot;Getting Help&quot;">​</a></h3><p>If you encounter issues with the build process, you can:</p><ol><li>Check the <a href="https://github.com/EngCode/phenix-ui/issues" target="_blank" rel="noreferrer">GitHub issues</a> for similar problems</li><li>Join the community Discord channel</li><li>Contact support via email at <a href="mailto:support@phenixthemes.com" target="_blank" rel="noreferrer">support@phenixthemes.com</a></li></ol>`,66)]))}const k=i(n,[["render",l]]);export{u as __pageData,k as default};
