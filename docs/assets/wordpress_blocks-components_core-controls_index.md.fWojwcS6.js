import{_ as e,c as s,o as a,ag as i}from"./chunks/framework.CifvWIav.js";const k=JSON.parse('{"title":"Core Controls","description":"","frontmatter":{},"headers":[],"relativePath":"wordpress/blocks-components/core-controls/index.md","filePath":"wordpress/blocks-components/core-controls/index.md"}'),o={name:"wordpress/blocks-components/core-controls/index.md"};function n(l,t,r,h,c,d){return a(),s("div",null,t[0]||(t[0]=[i(`<h1 id="core-controls" tabindex="-1">Core Controls <a class="header-anchor" href="#core-controls" aria-label="Permalink to &quot;Core Controls&quot;">​</a></h1><p>Core controls are the fundamental UI components that form the building blocks of the Phenix block editor interface. These controls handle basic user interactions and provide consistent input methods across all blocks.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The core controls in the Phenix Blocks system are designed to be:</p><ul><li><strong>Reusable</strong>: Each control can be used across multiple blocks</li><li><strong>Consistent</strong>: Controls maintain the same behavior and appearance throughout the editor</li><li><strong>Extensible</strong>: Controls can be combined and configured for different use cases</li><li><strong>Framework-aligned</strong>: Controls reflect the capabilities of the front-end framework</li></ul><h2 id="available-controls" tabindex="-1">Available Controls <a class="header-anchor" href="#available-controls" aria-label="Permalink to &quot;Available Controls&quot;">​</a></h2><h3 id="input-controls" tabindex="-1">Input Controls <a class="header-anchor" href="#input-controls" aria-label="Permalink to &quot;Input Controls&quot;">​</a></h3><p>Basic controls for text and numerical input:</p><ul><li><a href="./input-controls.html#basic-input">Basic Input</a>: Single-line text input (<code>input.js</code>)</li><li><a href="./input-controls.html#number-input">Number Input</a>: Numerical input with optional constraints (<code>number.js</code>)</li><li><a href="./input-controls.html#text-area">Text Area</a>: Multi-line text input (<code>textarea.js</code>)</li></ul><h3 id="selection-controls" tabindex="-1">Selection Controls <a class="header-anchor" href="#selection-controls" aria-label="Permalink to &quot;Selection Controls&quot;">​</a></h3><p>Controls for selecting from predefined options:</p><ul><li><a href="./selection-controls.html#select-dropdown">Select Dropdown</a>: Standard dropdown select menu (<code>select.js</code>)</li><li><a href="./selection-controls.html#data-driven-select">Data-Driven Select</a>: Select menu populated from data sources (<code>select-data.js</code>)</li><li><a href="./selection-controls.html#custom-dropdown">Custom Dropdown</a>: Flexible dropdown with custom content (<code>dropdown.js</code>)</li></ul><h3 id="toggle-controls" tabindex="-1">Toggle Controls <a class="header-anchor" href="#toggle-controls" aria-label="Permalink to &quot;Toggle Controls&quot;">​</a></h3><p>Controls for boolean or toggle options:</p><ul><li><a href="./toggle-controls.html">Switch/Checkbox</a>: Toggle switches and checkboxes for boolean settings (<code>switch.js</code>)</li></ul><h3 id="media-controls" tabindex="-1">Media Controls <a class="header-anchor" href="#media-controls" aria-label="Permalink to &quot;Media Controls&quot;">​</a></h3><p>Controls for media selection and management:</p><ul><li><a href="./media-controls.html">Media Uploader</a>: Interface for selecting and uploading media files (<code>uploader.js</code>)</li></ul><h3 id="navigation-controls" tabindex="-1">Navigation Controls <a class="header-anchor" href="#navigation-controls" aria-label="Permalink to &quot;Navigation Controls&quot;">​</a></h3><p>Controls for organizing and navigating content:</p><ul><li><a href="./navigation-controls.html">Tabs Interface</a>: Tabbed interface for organizing settings (<code>tabs.js</code>)</li></ul><h3 id="special-controls" tabindex="-1">Special Controls <a class="header-anchor" href="#special-controls" aria-label="Permalink to &quot;Special Controls&quot;">​</a></h3><p>Specialized controls for specific purposes:</p><ul><li><a href="./special-controls.html#icon-selection">Icon Selection</a>: Interface for selecting icons from icon libraries (<code>icons.js</code>)</li><li><a href="./special-controls.html#url-controls">URL Controls</a>: Controls for URL input with suggestions (<code>dynamic-url.js</code>)</li></ul><h2 id="usage-pattern" tabindex="-1">Usage Pattern <a class="header-anchor" href="#usage-pattern" aria-label="Permalink to &quot;Usage Pattern&quot;">​</a></h2><p>All core controls follow a similar usage pattern in block <code>edit.js</code> files:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. Import the control</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PhenixInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;../px-controls/input&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. Set up attribute handler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> set_value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PhenixBlocks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, attributes, setAttributes);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. Use the control in your block</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhenixInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;inputName&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Input Label&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pds-blocks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{attributes.inputValue}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{set_value}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><h2 id="common-properties" tabindex="-1">Common Properties <a class="header-anchor" href="#common-properties" aria-label="Permalink to &quot;Common Properties&quot;">​</a></h2><p>Most core controls share these common properties:</p><table tabindex="0"><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td>String</td><td>The attribute name to update</td></tr><tr><td><code>value</code></td><td>Any</td><td>The current value of the control</td></tr><tr><td><code>onChange</code></td><td>Function</td><td>Handler function for value changes</td></tr><tr><td><code>label</code></td><td>String</td><td>Optional label for the control</td></tr><tr><td><code>className</code></td><td>String</td><td>Optional CSS classes to apply</td></tr><tr><td><code>placeholder</code></td><td>String</td><td>Optional placeholder text</td></tr></tbody></table><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>Explore detailed documentation for each type of control:</p><ul><li><a href="./input-controls.html">Input Controls</a></li><li><a href="./selection-controls.html">Selection Controls</a></li><li><a href="./toggle-controls.html">Toggle Controls</a></li><li><a href="./media-controls.html">Media Controls</a></li><li><a href="./navigation-controls.html">Navigation Controls</a></li><li><a href="./special-controls.html">Special Controls</a></li></ul>`,33)]))}const u=e(o,[["render",n]]);export{k as __pageData,u as default};
